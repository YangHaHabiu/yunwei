// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: admin.proto

package adminclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	//user rpc start
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddResp, error)
	UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error)
	UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error)
	ReSetPassword(ctx context.Context, in *ReSetPasswordReq, opts ...grpc.CallOption) (*ReSetPasswordResp, error)
	UpdateUserStatus(ctx context.Context, in *UserStatusReq, opts ...grpc.CallOption) (*UserStatusResp, error)
	UpdatePersonalInfo(ctx context.Context, in *UserUpdatePersonalInfoReq, opts ...grpc.CallOption) (*UserUpdatePersonalInfoResp, error)
	UpdatePersonalPassword(ctx context.Context, in *UserUpdatePersonalPasswordReq, opts ...grpc.CallOption) (*UserUpdatePersonalPasswordResp, error)
	UserStrategyList(ctx context.Context, in *UserStrategyInfoReq, opts ...grpc.CallOption) (*UserStrategyInfoResp, error)
	GetUserAssignmentPolicy(ctx context.Context, in *GetUserAssignmentPolicyReq, opts ...grpc.CallOption) (*GetUserAssignmentPolicyResp, error)
	UserAssignmentPolicy(ctx context.Context, in *UserAssignmentPolicyReq, opts ...grpc.CallOption) (*UserAssignmentPolicyResp, error)
	UserBatchEditItems(ctx context.Context, in *UserBatchEditItemsReq, opts ...grpc.CallOption) (*UserBatchEditItemsResp, error)
	//ugroup rpc start
	UgroupAdd(ctx context.Context, in *UgroupAddReq, opts ...grpc.CallOption) (*UgroupAddResp, error)
	UgroupList(ctx context.Context, in *UgroupListReq, opts ...grpc.CallOption) (*UgroupListResp, error)
	UgroupUpdate(ctx context.Context, in *UgroupUpdateReq, opts ...grpc.CallOption) (*UgroupUpdateResp, error)
	UgroupDelete(ctx context.Context, in *UgroupDeleteReq, opts ...grpc.CallOption) (*UgroupDeleteResp, error)
	UgroupInfo(ctx context.Context, in *UgroupInfoReq, opts ...grpc.CallOption) (*UgroupInfoResp, error)
	GetUgroupAssignmentPolicy(ctx context.Context, in *GetUgroupAssignmentPolicyReq, opts ...grpc.CallOption) (*GetUgroupAssignmentPolicyResp, error)
	UgroupAssignmentPolicy(ctx context.Context, in *UgroupAssignmentPolicyReq, opts ...grpc.CallOption) (*UgroupAssignmentPolicyResp, error)
	GetUgroupAssignmentUser(ctx context.Context, in *GetUgroupAssignmentUserReq, opts ...grpc.CallOption) (*GetUgroupAssignmentUserResp, error)
	UgroupAssignmentUser(ctx context.Context, in *UgroupAssignmentUserReq, opts ...grpc.CallOption) (*UgroupAssignmentUserResp, error)
	//stgroup rpc start
	StgroupAdd(ctx context.Context, in *StgroupAddReq, opts ...grpc.CallOption) (*StgroupAddResp, error)
	StgroupList(ctx context.Context, in *StgroupListReq, opts ...grpc.CallOption) (*StgroupListResp, error)
	StgroupUpdate(ctx context.Context, in *StgroupUpdateReq, opts ...grpc.CallOption) (*StgroupUpdateResp, error)
	StgroupDelete(ctx context.Context, in *StgroupDeleteReq, opts ...grpc.CallOption) (*StgroupDeleteResp, error)
	StgroupInfo(ctx context.Context, in *StgroupInfoReq, opts ...grpc.CallOption) (*StgroupInfoResp, error)
	PolicyAssociatedUsers(ctx context.Context, in *PolicyAssociatedUsersReq, opts ...grpc.CallOption) (*PolicyAssociatedUsersResp, error)
	GetUserCheckStategyInfo(ctx context.Context, in *StgroupUserCheckInfoReq, opts ...grpc.CallOption) (*StgroupUserCheckInfoResp, error)
	//strategy rpc start
	StrategyList(ctx context.Context, in *StrategyListReq, opts ...grpc.CallOption) (*StrategyListResp, error)
	//role rpc start
	RoleAdd(ctx context.Context, in *RoleAddReq, opts ...grpc.CallOption) (*RoleAddResp, error)
	RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error)
	RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*RoleUpdateResp, error)
	RoleDelete(ctx context.Context, in *RoleDeleteReq, opts ...grpc.CallOption) (*RoleDeleteResp, error)
	QueryMenuByRoleId(ctx context.Context, in *QueryMenuByRoleIdReq, opts ...grpc.CallOption) (*QueryMenuByRoleIdResp, error)
	UpdateMenuRole(ctx context.Context, in *UpdateMenuRoleReq, opts ...grpc.CallOption) (*UpdateMenuRoleResp, error)
	GetRoleAssignmentUser(ctx context.Context, in *GetRoleAssignmentUserReq, opts ...grpc.CallOption) (*GetRoleAssignmentUserResp, error)
	RoleAssignmentUser(ctx context.Context, in *RoleAssignmentUserReq, opts ...grpc.CallOption) (*RoleAssignmentUserResp, error)
	//menu rpc start
	MenuAdd(ctx context.Context, in *MenuAddReq, opts ...grpc.CallOption) (*MenuAddResp, error)
	MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error)
	MenuUpdate(ctx context.Context, in *MenuUpdateReq, opts ...grpc.CallOption) (*MenuUpdateResp, error)
	MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*MenuDeleteResp, error)
	MenuOperationList(ctx context.Context, in *MenuOperationListReq, opts ...grpc.CallOption) (*MenuOperationListResp, error)
	//dict rpc start
	DictAdd(ctx context.Context, in *DictAddReq, opts ...grpc.CallOption) (*DictAddResp, error)
	DictList(ctx context.Context, in *DictListReq, opts ...grpc.CallOption) (*DictListResp, error)
	DictUpdate(ctx context.Context, in *DictUpdateReq, opts ...grpc.CallOption) (*DictUpdateResp, error)
	DictDelete(ctx context.Context, in *DictDeleteReq, opts ...grpc.CallOption) (*DictDeleteResp, error)
	//dept rpc start
	DeptAdd(ctx context.Context, in *DeptAddReq, opts ...grpc.CallOption) (*DeptAddResp, error)
	DeptList(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListResp, error)
	DeptUpdate(ctx context.Context, in *DeptUpdateReq, opts ...grpc.CallOption) (*DeptUpdateResp, error)
	DeptDelete(ctx context.Context, in *DeptDeleteReq, opts ...grpc.CallOption) (*DeptDeleteResp, error)
	//loginlog rpc start
	LoginLogAdd(ctx context.Context, in *LoginLogAddReq, opts ...grpc.CallOption) (*LoginLogAddResp, error)
	LoginLogUpdate(ctx context.Context, in *LoginLogUpdateReq, opts ...grpc.CallOption) (*LoginLogUpdateResp, error)
	LoginLogList(ctx context.Context, in *LoginLogListReq, opts ...grpc.CallOption) (*LoginLogListResp, error)
	//syslog rpc start
	SysLogAdd(ctx context.Context, in *SysLogAddReq, opts ...grpc.CallOption) (*SysLogAddResp, error)
	SysLogList(ctx context.Context, in *SysLogListReq, opts ...grpc.CallOption) (*SysLogListResp, error)
	//company rpc start
	CompanyAdd(ctx context.Context, in *CompanyAddReq, opts ...grpc.CallOption) (*CompanyAddResp, error)
	CompanyList(ctx context.Context, in *CompanyListReq, opts ...grpc.CallOption) (*CompanyListResp, error)
	CompanyUpdate(ctx context.Context, in *CompanyUpdateReq, opts ...grpc.CallOption) (*CompanyUpdateResp, error)
	CompanyDelete(ctx context.Context, in *CompanyDeleteReq, opts ...grpc.CallOption) (*CompanyDeleteResp, error)
	UpdateSupplyCompany(ctx context.Context, in *UpdateSupplyCompanyReq, opts ...grpc.CallOption) (*UpdateSupplyCompanyResp, error)
	//project rpc start
	ProjectAdd(ctx context.Context, in *ProjectAddReq, opts ...grpc.CallOption) (*ProjectAddResp, error)
	ProjectList(ctx context.Context, in *ProjectListReq, opts ...grpc.CallOption) (*NewProjectListResp, error)
	ProjectUpdate(ctx context.Context, in *ProjectUpdateReq, opts ...grpc.CallOption) (*ProjectUpdateResp, error)
	ProjectDelete(ctx context.Context, in *ProjectDeleteReq, opts ...grpc.CallOption) (*ProjectDeleteResp, error)
	ProjectOwnerList(ctx context.Context, in *ProjectOwnerReq, opts ...grpc.CallOption) (*ProjectListResp, error)
	ProjectGetOne(ctx context.Context, in *ProjectGetOneReq, opts ...grpc.CallOption) (*ProjectListData, error)
	//label rpc start
	LabelAdd(ctx context.Context, in *LabelAddReq, opts ...grpc.CallOption) (*LabelAddResp, error)
	LabelList(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListResp, error)
	LabelUpdate(ctx context.Context, in *LabelUpdateReq, opts ...grpc.CallOption) (*LabelUpdateResp, error)
	LabelDelete(ctx context.Context, in *LabelDeleteReq, opts ...grpc.CallOption) (*LabelDeleteResp, error)
	LabelListByPri(ctx context.Context, in *LabelListByPriReq, opts ...grpc.CallOption) (*LabelListByPriResp, error)
	//resource rpc start
	ResourceAdd(ctx context.Context, in *AddResourceReq, opts ...grpc.CallOption) (*AddResourceResp, error)
	ResourceList(ctx context.Context, in *ListResourceReq, opts ...grpc.CallOption) (*ListResourceResp, error)
	ResourceDelete(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*DeleteResourceResp, error)
	ResourceObjectValueList(ctx context.Context, in *ResourceObjectValueListReq, opts ...grpc.CallOption) (*ResourceObjectValueListResp, error)
	//search rpc start
	SearchList(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddResp, error) {
	out := new(UserAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UserAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error) {
	out := new(UserUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error) {
	out := new(UserDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UserDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ReSetPassword(ctx context.Context, in *ReSetPasswordReq, opts ...grpc.CallOption) (*ReSetPasswordResp, error) {
	out := new(ReSetPasswordResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ReSetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateUserStatus(ctx context.Context, in *UserStatusReq, opts ...grpc.CallOption) (*UserStatusResp, error) {
	out := new(UserStatusResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UpdateUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdatePersonalInfo(ctx context.Context, in *UserUpdatePersonalInfoReq, opts ...grpc.CallOption) (*UserUpdatePersonalInfoResp, error) {
	out := new(UserUpdatePersonalInfoResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UpdatePersonalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdatePersonalPassword(ctx context.Context, in *UserUpdatePersonalPasswordReq, opts ...grpc.CallOption) (*UserUpdatePersonalPasswordResp, error) {
	out := new(UserUpdatePersonalPasswordResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UpdatePersonalPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UserStrategyList(ctx context.Context, in *UserStrategyInfoReq, opts ...grpc.CallOption) (*UserStrategyInfoResp, error) {
	out := new(UserStrategyInfoResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UserStrategyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserAssignmentPolicy(ctx context.Context, in *GetUserAssignmentPolicyReq, opts ...grpc.CallOption) (*GetUserAssignmentPolicyResp, error) {
	out := new(GetUserAssignmentPolicyResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/GetUserAssignmentPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UserAssignmentPolicy(ctx context.Context, in *UserAssignmentPolicyReq, opts ...grpc.CallOption) (*UserAssignmentPolicyResp, error) {
	out := new(UserAssignmentPolicyResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UserAssignmentPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UserBatchEditItems(ctx context.Context, in *UserBatchEditItemsReq, opts ...grpc.CallOption) (*UserBatchEditItemsResp, error) {
	out := new(UserBatchEditItemsResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UserBatchEditItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UgroupAdd(ctx context.Context, in *UgroupAddReq, opts ...grpc.CallOption) (*UgroupAddResp, error) {
	out := new(UgroupAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UgroupAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UgroupList(ctx context.Context, in *UgroupListReq, opts ...grpc.CallOption) (*UgroupListResp, error) {
	out := new(UgroupListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UgroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UgroupUpdate(ctx context.Context, in *UgroupUpdateReq, opts ...grpc.CallOption) (*UgroupUpdateResp, error) {
	out := new(UgroupUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UgroupUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UgroupDelete(ctx context.Context, in *UgroupDeleteReq, opts ...grpc.CallOption) (*UgroupDeleteResp, error) {
	out := new(UgroupDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UgroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UgroupInfo(ctx context.Context, in *UgroupInfoReq, opts ...grpc.CallOption) (*UgroupInfoResp, error) {
	out := new(UgroupInfoResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UgroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUgroupAssignmentPolicy(ctx context.Context, in *GetUgroupAssignmentPolicyReq, opts ...grpc.CallOption) (*GetUgroupAssignmentPolicyResp, error) {
	out := new(GetUgroupAssignmentPolicyResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/GetUgroupAssignmentPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UgroupAssignmentPolicy(ctx context.Context, in *UgroupAssignmentPolicyReq, opts ...grpc.CallOption) (*UgroupAssignmentPolicyResp, error) {
	out := new(UgroupAssignmentPolicyResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UgroupAssignmentPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUgroupAssignmentUser(ctx context.Context, in *GetUgroupAssignmentUserReq, opts ...grpc.CallOption) (*GetUgroupAssignmentUserResp, error) {
	out := new(GetUgroupAssignmentUserResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/GetUgroupAssignmentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UgroupAssignmentUser(ctx context.Context, in *UgroupAssignmentUserReq, opts ...grpc.CallOption) (*UgroupAssignmentUserResp, error) {
	out := new(UgroupAssignmentUserResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UgroupAssignmentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StgroupAdd(ctx context.Context, in *StgroupAddReq, opts ...grpc.CallOption) (*StgroupAddResp, error) {
	out := new(StgroupAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/StgroupAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StgroupList(ctx context.Context, in *StgroupListReq, opts ...grpc.CallOption) (*StgroupListResp, error) {
	out := new(StgroupListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/StgroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StgroupUpdate(ctx context.Context, in *StgroupUpdateReq, opts ...grpc.CallOption) (*StgroupUpdateResp, error) {
	out := new(StgroupUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/StgroupUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StgroupDelete(ctx context.Context, in *StgroupDeleteReq, opts ...grpc.CallOption) (*StgroupDeleteResp, error) {
	out := new(StgroupDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/StgroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StgroupInfo(ctx context.Context, in *StgroupInfoReq, opts ...grpc.CallOption) (*StgroupInfoResp, error) {
	out := new(StgroupInfoResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/StgroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) PolicyAssociatedUsers(ctx context.Context, in *PolicyAssociatedUsersReq, opts ...grpc.CallOption) (*PolicyAssociatedUsersResp, error) {
	out := new(PolicyAssociatedUsersResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/PolicyAssociatedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserCheckStategyInfo(ctx context.Context, in *StgroupUserCheckInfoReq, opts ...grpc.CallOption) (*StgroupUserCheckInfoResp, error) {
	out := new(StgroupUserCheckInfoResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/GetUserCheckStategyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StrategyList(ctx context.Context, in *StrategyListReq, opts ...grpc.CallOption) (*StrategyListResp, error) {
	out := new(StrategyListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/StrategyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RoleAdd(ctx context.Context, in *RoleAddReq, opts ...grpc.CallOption) (*RoleAddResp, error) {
	out := new(RoleAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/RoleAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	out := new(RoleListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/RoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*RoleUpdateResp, error) {
	out := new(RoleUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/RoleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RoleDelete(ctx context.Context, in *RoleDeleteReq, opts ...grpc.CallOption) (*RoleDeleteResp, error) {
	out := new(RoleDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/RoleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) QueryMenuByRoleId(ctx context.Context, in *QueryMenuByRoleIdReq, opts ...grpc.CallOption) (*QueryMenuByRoleIdResp, error) {
	out := new(QueryMenuByRoleIdResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/QueryMenuByRoleId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateMenuRole(ctx context.Context, in *UpdateMenuRoleReq, opts ...grpc.CallOption) (*UpdateMenuRoleResp, error) {
	out := new(UpdateMenuRoleResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UpdateMenuRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRoleAssignmentUser(ctx context.Context, in *GetRoleAssignmentUserReq, opts ...grpc.CallOption) (*GetRoleAssignmentUserResp, error) {
	out := new(GetRoleAssignmentUserResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/GetRoleAssignmentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RoleAssignmentUser(ctx context.Context, in *RoleAssignmentUserReq, opts ...grpc.CallOption) (*RoleAssignmentUserResp, error) {
	out := new(RoleAssignmentUserResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/RoleAssignmentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MenuAdd(ctx context.Context, in *MenuAddReq, opts ...grpc.CallOption) (*MenuAddResp, error) {
	out := new(MenuAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/MenuAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error) {
	out := new(MenuListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/MenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MenuUpdate(ctx context.Context, in *MenuUpdateReq, opts ...grpc.CallOption) (*MenuUpdateResp, error) {
	out := new(MenuUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/MenuUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*MenuDeleteResp, error) {
	out := new(MenuDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/MenuDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MenuOperationList(ctx context.Context, in *MenuOperationListReq, opts ...grpc.CallOption) (*MenuOperationListResp, error) {
	out := new(MenuOperationListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/MenuOperationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DictAdd(ctx context.Context, in *DictAddReq, opts ...grpc.CallOption) (*DictAddResp, error) {
	out := new(DictAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/DictAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DictList(ctx context.Context, in *DictListReq, opts ...grpc.CallOption) (*DictListResp, error) {
	out := new(DictListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/DictList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DictUpdate(ctx context.Context, in *DictUpdateReq, opts ...grpc.CallOption) (*DictUpdateResp, error) {
	out := new(DictUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/DictUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DictDelete(ctx context.Context, in *DictDeleteReq, opts ...grpc.CallOption) (*DictDeleteResp, error) {
	out := new(DictDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/DictDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeptAdd(ctx context.Context, in *DeptAddReq, opts ...grpc.CallOption) (*DeptAddResp, error) {
	out := new(DeptAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/DeptAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeptList(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListResp, error) {
	out := new(DeptListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/DeptList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeptUpdate(ctx context.Context, in *DeptUpdateReq, opts ...grpc.CallOption) (*DeptUpdateResp, error) {
	out := new(DeptUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/DeptUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeptDelete(ctx context.Context, in *DeptDeleteReq, opts ...grpc.CallOption) (*DeptDeleteResp, error) {
	out := new(DeptDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/DeptDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LoginLogAdd(ctx context.Context, in *LoginLogAddReq, opts ...grpc.CallOption) (*LoginLogAddResp, error) {
	out := new(LoginLogAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/LoginLogAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LoginLogUpdate(ctx context.Context, in *LoginLogUpdateReq, opts ...grpc.CallOption) (*LoginLogUpdateResp, error) {
	out := new(LoginLogUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/LoginLogUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LoginLogList(ctx context.Context, in *LoginLogListReq, opts ...grpc.CallOption) (*LoginLogListResp, error) {
	out := new(LoginLogListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/LoginLogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SysLogAdd(ctx context.Context, in *SysLogAddReq, opts ...grpc.CallOption) (*SysLogAddResp, error) {
	out := new(SysLogAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/SysLogAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SysLogList(ctx context.Context, in *SysLogListReq, opts ...grpc.CallOption) (*SysLogListResp, error) {
	out := new(SysLogListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/SysLogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CompanyAdd(ctx context.Context, in *CompanyAddReq, opts ...grpc.CallOption) (*CompanyAddResp, error) {
	out := new(CompanyAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/CompanyAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CompanyList(ctx context.Context, in *CompanyListReq, opts ...grpc.CallOption) (*CompanyListResp, error) {
	out := new(CompanyListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/CompanyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CompanyUpdate(ctx context.Context, in *CompanyUpdateReq, opts ...grpc.CallOption) (*CompanyUpdateResp, error) {
	out := new(CompanyUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/CompanyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CompanyDelete(ctx context.Context, in *CompanyDeleteReq, opts ...grpc.CallOption) (*CompanyDeleteResp, error) {
	out := new(CompanyDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/CompanyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateSupplyCompany(ctx context.Context, in *UpdateSupplyCompanyReq, opts ...grpc.CallOption) (*UpdateSupplyCompanyResp, error) {
	out := new(UpdateSupplyCompanyResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/UpdateSupplyCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ProjectAdd(ctx context.Context, in *ProjectAddReq, opts ...grpc.CallOption) (*ProjectAddResp, error) {
	out := new(ProjectAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ProjectAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ProjectList(ctx context.Context, in *ProjectListReq, opts ...grpc.CallOption) (*NewProjectListResp, error) {
	out := new(NewProjectListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ProjectUpdate(ctx context.Context, in *ProjectUpdateReq, opts ...grpc.CallOption) (*ProjectUpdateResp, error) {
	out := new(ProjectUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ProjectUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ProjectDelete(ctx context.Context, in *ProjectDeleteReq, opts ...grpc.CallOption) (*ProjectDeleteResp, error) {
	out := new(ProjectDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ProjectDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ProjectOwnerList(ctx context.Context, in *ProjectOwnerReq, opts ...grpc.CallOption) (*ProjectListResp, error) {
	out := new(ProjectListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ProjectOwnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ProjectGetOne(ctx context.Context, in *ProjectGetOneReq, opts ...grpc.CallOption) (*ProjectListData, error) {
	out := new(ProjectListData)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ProjectGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LabelAdd(ctx context.Context, in *LabelAddReq, opts ...grpc.CallOption) (*LabelAddResp, error) {
	out := new(LabelAddResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/LabelAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LabelList(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListResp, error) {
	out := new(LabelListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/LabelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LabelUpdate(ctx context.Context, in *LabelUpdateReq, opts ...grpc.CallOption) (*LabelUpdateResp, error) {
	out := new(LabelUpdateResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/LabelUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LabelDelete(ctx context.Context, in *LabelDeleteReq, opts ...grpc.CallOption) (*LabelDeleteResp, error) {
	out := new(LabelDeleteResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/LabelDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LabelListByPri(ctx context.Context, in *LabelListByPriReq, opts ...grpc.CallOption) (*LabelListByPriResp, error) {
	out := new(LabelListByPriResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/LabelListByPri", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ResourceAdd(ctx context.Context, in *AddResourceReq, opts ...grpc.CallOption) (*AddResourceResp, error) {
	out := new(AddResourceResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ResourceAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ResourceList(ctx context.Context, in *ListResourceReq, opts ...grpc.CallOption) (*ListResourceResp, error) {
	out := new(ListResourceResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ResourceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ResourceDelete(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*DeleteResourceResp, error) {
	out := new(DeleteResourceResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ResourceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ResourceObjectValueList(ctx context.Context, in *ResourceObjectValueListReq, opts ...grpc.CallOption) (*ResourceObjectValueListResp, error) {
	out := new(ResourceObjectValueListResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/ResourceObjectValueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchList(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/adminclient.Admin/SearchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	//user rpc start
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	UserInfo(context.Context, *InfoReq) (*InfoResp, error)
	UserAdd(context.Context, *UserAddReq) (*UserAddResp, error)
	UserList(context.Context, *UserListReq) (*UserListResp, error)
	UserUpdate(context.Context, *UserUpdateReq) (*UserUpdateResp, error)
	UserDelete(context.Context, *UserDeleteReq) (*UserDeleteResp, error)
	ReSetPassword(context.Context, *ReSetPasswordReq) (*ReSetPasswordResp, error)
	UpdateUserStatus(context.Context, *UserStatusReq) (*UserStatusResp, error)
	UpdatePersonalInfo(context.Context, *UserUpdatePersonalInfoReq) (*UserUpdatePersonalInfoResp, error)
	UpdatePersonalPassword(context.Context, *UserUpdatePersonalPasswordReq) (*UserUpdatePersonalPasswordResp, error)
	UserStrategyList(context.Context, *UserStrategyInfoReq) (*UserStrategyInfoResp, error)
	GetUserAssignmentPolicy(context.Context, *GetUserAssignmentPolicyReq) (*GetUserAssignmentPolicyResp, error)
	UserAssignmentPolicy(context.Context, *UserAssignmentPolicyReq) (*UserAssignmentPolicyResp, error)
	UserBatchEditItems(context.Context, *UserBatchEditItemsReq) (*UserBatchEditItemsResp, error)
	//ugroup rpc start
	UgroupAdd(context.Context, *UgroupAddReq) (*UgroupAddResp, error)
	UgroupList(context.Context, *UgroupListReq) (*UgroupListResp, error)
	UgroupUpdate(context.Context, *UgroupUpdateReq) (*UgroupUpdateResp, error)
	UgroupDelete(context.Context, *UgroupDeleteReq) (*UgroupDeleteResp, error)
	UgroupInfo(context.Context, *UgroupInfoReq) (*UgroupInfoResp, error)
	GetUgroupAssignmentPolicy(context.Context, *GetUgroupAssignmentPolicyReq) (*GetUgroupAssignmentPolicyResp, error)
	UgroupAssignmentPolicy(context.Context, *UgroupAssignmentPolicyReq) (*UgroupAssignmentPolicyResp, error)
	GetUgroupAssignmentUser(context.Context, *GetUgroupAssignmentUserReq) (*GetUgroupAssignmentUserResp, error)
	UgroupAssignmentUser(context.Context, *UgroupAssignmentUserReq) (*UgroupAssignmentUserResp, error)
	//stgroup rpc start
	StgroupAdd(context.Context, *StgroupAddReq) (*StgroupAddResp, error)
	StgroupList(context.Context, *StgroupListReq) (*StgroupListResp, error)
	StgroupUpdate(context.Context, *StgroupUpdateReq) (*StgroupUpdateResp, error)
	StgroupDelete(context.Context, *StgroupDeleteReq) (*StgroupDeleteResp, error)
	StgroupInfo(context.Context, *StgroupInfoReq) (*StgroupInfoResp, error)
	PolicyAssociatedUsers(context.Context, *PolicyAssociatedUsersReq) (*PolicyAssociatedUsersResp, error)
	GetUserCheckStategyInfo(context.Context, *StgroupUserCheckInfoReq) (*StgroupUserCheckInfoResp, error)
	//strategy rpc start
	StrategyList(context.Context, *StrategyListReq) (*StrategyListResp, error)
	//role rpc start
	RoleAdd(context.Context, *RoleAddReq) (*RoleAddResp, error)
	RoleList(context.Context, *RoleListReq) (*RoleListResp, error)
	RoleUpdate(context.Context, *RoleUpdateReq) (*RoleUpdateResp, error)
	RoleDelete(context.Context, *RoleDeleteReq) (*RoleDeleteResp, error)
	QueryMenuByRoleId(context.Context, *QueryMenuByRoleIdReq) (*QueryMenuByRoleIdResp, error)
	UpdateMenuRole(context.Context, *UpdateMenuRoleReq) (*UpdateMenuRoleResp, error)
	GetRoleAssignmentUser(context.Context, *GetRoleAssignmentUserReq) (*GetRoleAssignmentUserResp, error)
	RoleAssignmentUser(context.Context, *RoleAssignmentUserReq) (*RoleAssignmentUserResp, error)
	//menu rpc start
	MenuAdd(context.Context, *MenuAddReq) (*MenuAddResp, error)
	MenuList(context.Context, *MenuListReq) (*MenuListResp, error)
	MenuUpdate(context.Context, *MenuUpdateReq) (*MenuUpdateResp, error)
	MenuDelete(context.Context, *MenuDeleteReq) (*MenuDeleteResp, error)
	MenuOperationList(context.Context, *MenuOperationListReq) (*MenuOperationListResp, error)
	//dict rpc start
	DictAdd(context.Context, *DictAddReq) (*DictAddResp, error)
	DictList(context.Context, *DictListReq) (*DictListResp, error)
	DictUpdate(context.Context, *DictUpdateReq) (*DictUpdateResp, error)
	DictDelete(context.Context, *DictDeleteReq) (*DictDeleteResp, error)
	//dept rpc start
	DeptAdd(context.Context, *DeptAddReq) (*DeptAddResp, error)
	DeptList(context.Context, *DeptListReq) (*DeptListResp, error)
	DeptUpdate(context.Context, *DeptUpdateReq) (*DeptUpdateResp, error)
	DeptDelete(context.Context, *DeptDeleteReq) (*DeptDeleteResp, error)
	//loginlog rpc start
	LoginLogAdd(context.Context, *LoginLogAddReq) (*LoginLogAddResp, error)
	LoginLogUpdate(context.Context, *LoginLogUpdateReq) (*LoginLogUpdateResp, error)
	LoginLogList(context.Context, *LoginLogListReq) (*LoginLogListResp, error)
	//syslog rpc start
	SysLogAdd(context.Context, *SysLogAddReq) (*SysLogAddResp, error)
	SysLogList(context.Context, *SysLogListReq) (*SysLogListResp, error)
	//company rpc start
	CompanyAdd(context.Context, *CompanyAddReq) (*CompanyAddResp, error)
	CompanyList(context.Context, *CompanyListReq) (*CompanyListResp, error)
	CompanyUpdate(context.Context, *CompanyUpdateReq) (*CompanyUpdateResp, error)
	CompanyDelete(context.Context, *CompanyDeleteReq) (*CompanyDeleteResp, error)
	UpdateSupplyCompany(context.Context, *UpdateSupplyCompanyReq) (*UpdateSupplyCompanyResp, error)
	//project rpc start
	ProjectAdd(context.Context, *ProjectAddReq) (*ProjectAddResp, error)
	ProjectList(context.Context, *ProjectListReq) (*NewProjectListResp, error)
	ProjectUpdate(context.Context, *ProjectUpdateReq) (*ProjectUpdateResp, error)
	ProjectDelete(context.Context, *ProjectDeleteReq) (*ProjectDeleteResp, error)
	ProjectOwnerList(context.Context, *ProjectOwnerReq) (*ProjectListResp, error)
	ProjectGetOne(context.Context, *ProjectGetOneReq) (*ProjectListData, error)
	//label rpc start
	LabelAdd(context.Context, *LabelAddReq) (*LabelAddResp, error)
	LabelList(context.Context, *LabelListReq) (*LabelListResp, error)
	LabelUpdate(context.Context, *LabelUpdateReq) (*LabelUpdateResp, error)
	LabelDelete(context.Context, *LabelDeleteReq) (*LabelDeleteResp, error)
	LabelListByPri(context.Context, *LabelListByPriReq) (*LabelListByPriResp, error)
	//resource rpc start
	ResourceAdd(context.Context, *AddResourceReq) (*AddResourceResp, error)
	ResourceList(context.Context, *ListResourceReq) (*ListResourceResp, error)
	ResourceDelete(context.Context, *DeleteResourceReq) (*DeleteResourceResp, error)
	ResourceObjectValueList(context.Context, *ResourceObjectValueListReq) (*ResourceObjectValueListResp, error)
	//search rpc start
	SearchList(context.Context, *SearchReq) (*SearchResp, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAdminServer) UserInfo(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedAdminServer) UserAdd(context.Context, *UserAddReq) (*UserAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdd not implemented")
}
func (UnimplementedAdminServer) UserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedAdminServer) UserUpdate(context.Context, *UserUpdateReq) (*UserUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedAdminServer) UserDelete(context.Context, *UserDeleteReq) (*UserDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedAdminServer) ReSetPassword(context.Context, *ReSetPasswordReq) (*ReSetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReSetPassword not implemented")
}
func (UnimplementedAdminServer) UpdateUserStatus(context.Context, *UserStatusReq) (*UserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedAdminServer) UpdatePersonalInfo(context.Context, *UserUpdatePersonalInfoReq) (*UserUpdatePersonalInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonalInfo not implemented")
}
func (UnimplementedAdminServer) UpdatePersonalPassword(context.Context, *UserUpdatePersonalPasswordReq) (*UserUpdatePersonalPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonalPassword not implemented")
}
func (UnimplementedAdminServer) UserStrategyList(context.Context, *UserStrategyInfoReq) (*UserStrategyInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStrategyList not implemented")
}
func (UnimplementedAdminServer) GetUserAssignmentPolicy(context.Context, *GetUserAssignmentPolicyReq) (*GetUserAssignmentPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAssignmentPolicy not implemented")
}
func (UnimplementedAdminServer) UserAssignmentPolicy(context.Context, *UserAssignmentPolicyReq) (*UserAssignmentPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAssignmentPolicy not implemented")
}
func (UnimplementedAdminServer) UserBatchEditItems(context.Context, *UserBatchEditItemsReq) (*UserBatchEditItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBatchEditItems not implemented")
}
func (UnimplementedAdminServer) UgroupAdd(context.Context, *UgroupAddReq) (*UgroupAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgroupAdd not implemented")
}
func (UnimplementedAdminServer) UgroupList(context.Context, *UgroupListReq) (*UgroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgroupList not implemented")
}
func (UnimplementedAdminServer) UgroupUpdate(context.Context, *UgroupUpdateReq) (*UgroupUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgroupUpdate not implemented")
}
func (UnimplementedAdminServer) UgroupDelete(context.Context, *UgroupDeleteReq) (*UgroupDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgroupDelete not implemented")
}
func (UnimplementedAdminServer) UgroupInfo(context.Context, *UgroupInfoReq) (*UgroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgroupInfo not implemented")
}
func (UnimplementedAdminServer) GetUgroupAssignmentPolicy(context.Context, *GetUgroupAssignmentPolicyReq) (*GetUgroupAssignmentPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUgroupAssignmentPolicy not implemented")
}
func (UnimplementedAdminServer) UgroupAssignmentPolicy(context.Context, *UgroupAssignmentPolicyReq) (*UgroupAssignmentPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgroupAssignmentPolicy not implemented")
}
func (UnimplementedAdminServer) GetUgroupAssignmentUser(context.Context, *GetUgroupAssignmentUserReq) (*GetUgroupAssignmentUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUgroupAssignmentUser not implemented")
}
func (UnimplementedAdminServer) UgroupAssignmentUser(context.Context, *UgroupAssignmentUserReq) (*UgroupAssignmentUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgroupAssignmentUser not implemented")
}
func (UnimplementedAdminServer) StgroupAdd(context.Context, *StgroupAddReq) (*StgroupAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StgroupAdd not implemented")
}
func (UnimplementedAdminServer) StgroupList(context.Context, *StgroupListReq) (*StgroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StgroupList not implemented")
}
func (UnimplementedAdminServer) StgroupUpdate(context.Context, *StgroupUpdateReq) (*StgroupUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StgroupUpdate not implemented")
}
func (UnimplementedAdminServer) StgroupDelete(context.Context, *StgroupDeleteReq) (*StgroupDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StgroupDelete not implemented")
}
func (UnimplementedAdminServer) StgroupInfo(context.Context, *StgroupInfoReq) (*StgroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StgroupInfo not implemented")
}
func (UnimplementedAdminServer) PolicyAssociatedUsers(context.Context, *PolicyAssociatedUsersReq) (*PolicyAssociatedUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyAssociatedUsers not implemented")
}
func (UnimplementedAdminServer) GetUserCheckStategyInfo(context.Context, *StgroupUserCheckInfoReq) (*StgroupUserCheckInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCheckStategyInfo not implemented")
}
func (UnimplementedAdminServer) StrategyList(context.Context, *StrategyListReq) (*StrategyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrategyList not implemented")
}
func (UnimplementedAdminServer) RoleAdd(context.Context, *RoleAddReq) (*RoleAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAdd not implemented")
}
func (UnimplementedAdminServer) RoleList(context.Context, *RoleListReq) (*RoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedAdminServer) RoleUpdate(context.Context, *RoleUpdateReq) (*RoleUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleUpdate not implemented")
}
func (UnimplementedAdminServer) RoleDelete(context.Context, *RoleDeleteReq) (*RoleDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDelete not implemented")
}
func (UnimplementedAdminServer) QueryMenuByRoleId(context.Context, *QueryMenuByRoleIdReq) (*QueryMenuByRoleIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMenuByRoleId not implemented")
}
func (UnimplementedAdminServer) UpdateMenuRole(context.Context, *UpdateMenuRoleReq) (*UpdateMenuRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuRole not implemented")
}
func (UnimplementedAdminServer) GetRoleAssignmentUser(context.Context, *GetRoleAssignmentUserReq) (*GetRoleAssignmentUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleAssignmentUser not implemented")
}
func (UnimplementedAdminServer) RoleAssignmentUser(context.Context, *RoleAssignmentUserReq) (*RoleAssignmentUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAssignmentUser not implemented")
}
func (UnimplementedAdminServer) MenuAdd(context.Context, *MenuAddReq) (*MenuAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuAdd not implemented")
}
func (UnimplementedAdminServer) MenuList(context.Context, *MenuListReq) (*MenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}
func (UnimplementedAdminServer) MenuUpdate(context.Context, *MenuUpdateReq) (*MenuUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuUpdate not implemented")
}
func (UnimplementedAdminServer) MenuDelete(context.Context, *MenuDeleteReq) (*MenuDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuDelete not implemented")
}
func (UnimplementedAdminServer) MenuOperationList(context.Context, *MenuOperationListReq) (*MenuOperationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuOperationList not implemented")
}
func (UnimplementedAdminServer) DictAdd(context.Context, *DictAddReq) (*DictAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictAdd not implemented")
}
func (UnimplementedAdminServer) DictList(context.Context, *DictListReq) (*DictListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictList not implemented")
}
func (UnimplementedAdminServer) DictUpdate(context.Context, *DictUpdateReq) (*DictUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictUpdate not implemented")
}
func (UnimplementedAdminServer) DictDelete(context.Context, *DictDeleteReq) (*DictDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDelete not implemented")
}
func (UnimplementedAdminServer) DeptAdd(context.Context, *DeptAddReq) (*DeptAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptAdd not implemented")
}
func (UnimplementedAdminServer) DeptList(context.Context, *DeptListReq) (*DeptListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptList not implemented")
}
func (UnimplementedAdminServer) DeptUpdate(context.Context, *DeptUpdateReq) (*DeptUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptUpdate not implemented")
}
func (UnimplementedAdminServer) DeptDelete(context.Context, *DeptDeleteReq) (*DeptDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptDelete not implemented")
}
func (UnimplementedAdminServer) LoginLogAdd(context.Context, *LoginLogAddReq) (*LoginLogAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginLogAdd not implemented")
}
func (UnimplementedAdminServer) LoginLogUpdate(context.Context, *LoginLogUpdateReq) (*LoginLogUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginLogUpdate not implemented")
}
func (UnimplementedAdminServer) LoginLogList(context.Context, *LoginLogListReq) (*LoginLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginLogList not implemented")
}
func (UnimplementedAdminServer) SysLogAdd(context.Context, *SysLogAddReq) (*SysLogAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLogAdd not implemented")
}
func (UnimplementedAdminServer) SysLogList(context.Context, *SysLogListReq) (*SysLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLogList not implemented")
}
func (UnimplementedAdminServer) CompanyAdd(context.Context, *CompanyAddReq) (*CompanyAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyAdd not implemented")
}
func (UnimplementedAdminServer) CompanyList(context.Context, *CompanyListReq) (*CompanyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyList not implemented")
}
func (UnimplementedAdminServer) CompanyUpdate(context.Context, *CompanyUpdateReq) (*CompanyUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyUpdate not implemented")
}
func (UnimplementedAdminServer) CompanyDelete(context.Context, *CompanyDeleteReq) (*CompanyDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyDelete not implemented")
}
func (UnimplementedAdminServer) UpdateSupplyCompany(context.Context, *UpdateSupplyCompanyReq) (*UpdateSupplyCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplyCompany not implemented")
}
func (UnimplementedAdminServer) ProjectAdd(context.Context, *ProjectAddReq) (*ProjectAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectAdd not implemented")
}
func (UnimplementedAdminServer) ProjectList(context.Context, *ProjectListReq) (*NewProjectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectList not implemented")
}
func (UnimplementedAdminServer) ProjectUpdate(context.Context, *ProjectUpdateReq) (*ProjectUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectUpdate not implemented")
}
func (UnimplementedAdminServer) ProjectDelete(context.Context, *ProjectDeleteReq) (*ProjectDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectDelete not implemented")
}
func (UnimplementedAdminServer) ProjectOwnerList(context.Context, *ProjectOwnerReq) (*ProjectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectOwnerList not implemented")
}
func (UnimplementedAdminServer) ProjectGetOne(context.Context, *ProjectGetOneReq) (*ProjectListData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectGetOne not implemented")
}
func (UnimplementedAdminServer) LabelAdd(context.Context, *LabelAddReq) (*LabelAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelAdd not implemented")
}
func (UnimplementedAdminServer) LabelList(context.Context, *LabelListReq) (*LabelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelList not implemented")
}
func (UnimplementedAdminServer) LabelUpdate(context.Context, *LabelUpdateReq) (*LabelUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelUpdate not implemented")
}
func (UnimplementedAdminServer) LabelDelete(context.Context, *LabelDeleteReq) (*LabelDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelDelete not implemented")
}
func (UnimplementedAdminServer) LabelListByPri(context.Context, *LabelListByPriReq) (*LabelListByPriResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelListByPri not implemented")
}
func (UnimplementedAdminServer) ResourceAdd(context.Context, *AddResourceReq) (*AddResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceAdd not implemented")
}
func (UnimplementedAdminServer) ResourceList(context.Context, *ListResourceReq) (*ListResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceList not implemented")
}
func (UnimplementedAdminServer) ResourceDelete(context.Context, *DeleteResourceReq) (*DeleteResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceDelete not implemented")
}
func (UnimplementedAdminServer) ResourceObjectValueList(context.Context, *ResourceObjectValueListReq) (*ResourceObjectValueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceObjectValueList not implemented")
}
func (UnimplementedAdminServer) SearchList(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchList not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UserInfo(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UserAdd(ctx, req.(*UserAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UserUpdate(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UserDelete(ctx, req.(*UserDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ReSetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReSetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ReSetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ReSetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ReSetPassword(ctx, req.(*ReSetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UpdateUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateUserStatus(ctx, req.(*UserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdatePersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdatePersonalInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdatePersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UpdatePersonalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdatePersonalInfo(ctx, req.(*UserUpdatePersonalInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdatePersonalPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdatePersonalPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdatePersonalPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UpdatePersonalPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdatePersonalPassword(ctx, req.(*UserUpdatePersonalPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UserStrategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStrategyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UserStrategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UserStrategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UserStrategyList(ctx, req.(*UserStrategyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserAssignmentPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAssignmentPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserAssignmentPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/GetUserAssignmentPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserAssignmentPolicy(ctx, req.(*GetUserAssignmentPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UserAssignmentPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAssignmentPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UserAssignmentPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UserAssignmentPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UserAssignmentPolicy(ctx, req.(*UserAssignmentPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UserBatchEditItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBatchEditItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UserBatchEditItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UserBatchEditItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UserBatchEditItems(ctx, req.(*UserBatchEditItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UgroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgroupAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UgroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UgroupAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UgroupAdd(ctx, req.(*UgroupAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UgroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UgroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UgroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UgroupList(ctx, req.(*UgroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UgroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgroupUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UgroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UgroupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UgroupUpdate(ctx, req.(*UgroupUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UgroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgroupDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UgroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UgroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UgroupDelete(ctx, req.(*UgroupDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UgroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UgroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UgroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UgroupInfo(ctx, req.(*UgroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUgroupAssignmentPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUgroupAssignmentPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUgroupAssignmentPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/GetUgroupAssignmentPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUgroupAssignmentPolicy(ctx, req.(*GetUgroupAssignmentPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UgroupAssignmentPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgroupAssignmentPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UgroupAssignmentPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UgroupAssignmentPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UgroupAssignmentPolicy(ctx, req.(*UgroupAssignmentPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUgroupAssignmentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUgroupAssignmentUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUgroupAssignmentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/GetUgroupAssignmentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUgroupAssignmentUser(ctx, req.(*GetUgroupAssignmentUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UgroupAssignmentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgroupAssignmentUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UgroupAssignmentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UgroupAssignmentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UgroupAssignmentUser(ctx, req.(*UgroupAssignmentUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StgroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StgroupAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StgroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/StgroupAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StgroupAdd(ctx, req.(*StgroupAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StgroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StgroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StgroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/StgroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StgroupList(ctx, req.(*StgroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StgroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StgroupUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StgroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/StgroupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StgroupUpdate(ctx, req.(*StgroupUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StgroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StgroupDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StgroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/StgroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StgroupDelete(ctx, req.(*StgroupDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StgroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StgroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StgroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/StgroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StgroupInfo(ctx, req.(*StgroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_PolicyAssociatedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyAssociatedUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).PolicyAssociatedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/PolicyAssociatedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).PolicyAssociatedUsers(ctx, req.(*PolicyAssociatedUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserCheckStategyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StgroupUserCheckInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserCheckStategyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/GetUserCheckStategyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserCheckStategyInfo(ctx, req.(*StgroupUserCheckInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StrategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StrategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/StrategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StrategyList(ctx, req.(*StrategyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RoleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RoleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/RoleAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RoleAdd(ctx, req.(*RoleAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/RoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/RoleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RoleUpdate(ctx, req.(*RoleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/RoleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RoleDelete(ctx, req.(*RoleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_QueryMenuByRoleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMenuByRoleIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).QueryMenuByRoleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/QueryMenuByRoleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).QueryMenuByRoleId(ctx, req.(*QueryMenuByRoleIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateMenuRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateMenuRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UpdateMenuRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateMenuRole(ctx, req.(*UpdateMenuRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRoleAssignmentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleAssignmentUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRoleAssignmentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/GetRoleAssignmentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRoleAssignmentUser(ctx, req.(*GetRoleAssignmentUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RoleAssignmentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAssignmentUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RoleAssignmentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/RoleAssignmentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RoleAssignmentUser(ctx, req.(*RoleAssignmentUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MenuAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MenuAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/MenuAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MenuAdd(ctx, req.(*MenuAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/MenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MenuList(ctx, req.(*MenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MenuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MenuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/MenuUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MenuUpdate(ctx, req.(*MenuUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/MenuDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MenuDelete(ctx, req.(*MenuDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MenuOperationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuOperationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MenuOperationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/MenuOperationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MenuOperationList(ctx, req.(*MenuOperationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DictAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DictAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/DictAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DictAdd(ctx, req.(*DictAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DictList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DictList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/DictList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DictList(ctx, req.(*DictListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DictUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DictUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/DictUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DictUpdate(ctx, req.(*DictUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DictDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DictDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/DictDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DictDelete(ctx, req.(*DictDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeptAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeptAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/DeptAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeptAdd(ctx, req.(*DeptAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/DeptList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeptList(ctx, req.(*DeptListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/DeptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeptUpdate(ctx, req.(*DeptUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeptDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeptDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/DeptDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeptDelete(ctx, req.(*DeptDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LoginLogAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LoginLogAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/LoginLogAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LoginLogAdd(ctx, req.(*LoginLogAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LoginLogUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LoginLogUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/LoginLogUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LoginLogUpdate(ctx, req.(*LoginLogUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LoginLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LoginLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/LoginLogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LoginLogList(ctx, req.(*LoginLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SysLogAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLogAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SysLogAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/SysLogAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SysLogAdd(ctx, req.(*SysLogAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SysLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SysLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/SysLogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SysLogList(ctx, req.(*SysLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CompanyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CompanyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/CompanyAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CompanyAdd(ctx, req.(*CompanyAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CompanyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CompanyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/CompanyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CompanyList(ctx, req.(*CompanyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CompanyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CompanyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/CompanyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CompanyUpdate(ctx, req.(*CompanyUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CompanyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CompanyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/CompanyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CompanyDelete(ctx, req.(*CompanyDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateSupplyCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplyCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateSupplyCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/UpdateSupplyCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateSupplyCompany(ctx, req.(*UpdateSupplyCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ProjectAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ProjectAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ProjectAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ProjectAdd(ctx, req.(*ProjectAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ProjectList(ctx, req.(*ProjectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ProjectUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ProjectUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ProjectUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ProjectUpdate(ctx, req.(*ProjectUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ProjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ProjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ProjectDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ProjectDelete(ctx, req.(*ProjectDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ProjectOwnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ProjectOwnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ProjectOwnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ProjectOwnerList(ctx, req.(*ProjectOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ProjectGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectGetOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ProjectGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ProjectGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ProjectGetOne(ctx, req.(*ProjectGetOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LabelAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LabelAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/LabelAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LabelAdd(ctx, req.(*LabelAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LabelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LabelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/LabelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LabelList(ctx, req.(*LabelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LabelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LabelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/LabelUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LabelUpdate(ctx, req.(*LabelUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LabelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LabelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/LabelDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LabelDelete(ctx, req.(*LabelDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LabelListByPri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelListByPriReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LabelListByPri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/LabelListByPri",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LabelListByPri(ctx, req.(*LabelListByPriReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ResourceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ResourceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ResourceAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ResourceAdd(ctx, req.(*AddResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ResourceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ResourceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ResourceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ResourceList(ctx, req.(*ListResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ResourceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ResourceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ResourceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ResourceDelete(ctx, req.(*DeleteResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ResourceObjectValueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceObjectValueListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ResourceObjectValueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/ResourceObjectValueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ResourceObjectValueList(ctx, req.(*ResourceObjectValueListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminclient.Admin/SearchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchList(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adminclient.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Admin_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Admin_Logout_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _Admin_UserInfo_Handler,
		},
		{
			MethodName: "UserAdd",
			Handler:    _Admin_UserAdd_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _Admin_UserList_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _Admin_UserUpdate_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _Admin_UserDelete_Handler,
		},
		{
			MethodName: "ReSetPassword",
			Handler:    _Admin_ReSetPassword_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _Admin_UpdateUserStatus_Handler,
		},
		{
			MethodName: "UpdatePersonalInfo",
			Handler:    _Admin_UpdatePersonalInfo_Handler,
		},
		{
			MethodName: "UpdatePersonalPassword",
			Handler:    _Admin_UpdatePersonalPassword_Handler,
		},
		{
			MethodName: "UserStrategyList",
			Handler:    _Admin_UserStrategyList_Handler,
		},
		{
			MethodName: "GetUserAssignmentPolicy",
			Handler:    _Admin_GetUserAssignmentPolicy_Handler,
		},
		{
			MethodName: "UserAssignmentPolicy",
			Handler:    _Admin_UserAssignmentPolicy_Handler,
		},
		{
			MethodName: "UserBatchEditItems",
			Handler:    _Admin_UserBatchEditItems_Handler,
		},
		{
			MethodName: "UgroupAdd",
			Handler:    _Admin_UgroupAdd_Handler,
		},
		{
			MethodName: "UgroupList",
			Handler:    _Admin_UgroupList_Handler,
		},
		{
			MethodName: "UgroupUpdate",
			Handler:    _Admin_UgroupUpdate_Handler,
		},
		{
			MethodName: "UgroupDelete",
			Handler:    _Admin_UgroupDelete_Handler,
		},
		{
			MethodName: "UgroupInfo",
			Handler:    _Admin_UgroupInfo_Handler,
		},
		{
			MethodName: "GetUgroupAssignmentPolicy",
			Handler:    _Admin_GetUgroupAssignmentPolicy_Handler,
		},
		{
			MethodName: "UgroupAssignmentPolicy",
			Handler:    _Admin_UgroupAssignmentPolicy_Handler,
		},
		{
			MethodName: "GetUgroupAssignmentUser",
			Handler:    _Admin_GetUgroupAssignmentUser_Handler,
		},
		{
			MethodName: "UgroupAssignmentUser",
			Handler:    _Admin_UgroupAssignmentUser_Handler,
		},
		{
			MethodName: "StgroupAdd",
			Handler:    _Admin_StgroupAdd_Handler,
		},
		{
			MethodName: "StgroupList",
			Handler:    _Admin_StgroupList_Handler,
		},
		{
			MethodName: "StgroupUpdate",
			Handler:    _Admin_StgroupUpdate_Handler,
		},
		{
			MethodName: "StgroupDelete",
			Handler:    _Admin_StgroupDelete_Handler,
		},
		{
			MethodName: "StgroupInfo",
			Handler:    _Admin_StgroupInfo_Handler,
		},
		{
			MethodName: "PolicyAssociatedUsers",
			Handler:    _Admin_PolicyAssociatedUsers_Handler,
		},
		{
			MethodName: "GetUserCheckStategyInfo",
			Handler:    _Admin_GetUserCheckStategyInfo_Handler,
		},
		{
			MethodName: "StrategyList",
			Handler:    _Admin_StrategyList_Handler,
		},
		{
			MethodName: "RoleAdd",
			Handler:    _Admin_RoleAdd_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _Admin_RoleList_Handler,
		},
		{
			MethodName: "RoleUpdate",
			Handler:    _Admin_RoleUpdate_Handler,
		},
		{
			MethodName: "RoleDelete",
			Handler:    _Admin_RoleDelete_Handler,
		},
		{
			MethodName: "QueryMenuByRoleId",
			Handler:    _Admin_QueryMenuByRoleId_Handler,
		},
		{
			MethodName: "UpdateMenuRole",
			Handler:    _Admin_UpdateMenuRole_Handler,
		},
		{
			MethodName: "GetRoleAssignmentUser",
			Handler:    _Admin_GetRoleAssignmentUser_Handler,
		},
		{
			MethodName: "RoleAssignmentUser",
			Handler:    _Admin_RoleAssignmentUser_Handler,
		},
		{
			MethodName: "MenuAdd",
			Handler:    _Admin_MenuAdd_Handler,
		},
		{
			MethodName: "MenuList",
			Handler:    _Admin_MenuList_Handler,
		},
		{
			MethodName: "MenuUpdate",
			Handler:    _Admin_MenuUpdate_Handler,
		},
		{
			MethodName: "MenuDelete",
			Handler:    _Admin_MenuDelete_Handler,
		},
		{
			MethodName: "MenuOperationList",
			Handler:    _Admin_MenuOperationList_Handler,
		},
		{
			MethodName: "DictAdd",
			Handler:    _Admin_DictAdd_Handler,
		},
		{
			MethodName: "DictList",
			Handler:    _Admin_DictList_Handler,
		},
		{
			MethodName: "DictUpdate",
			Handler:    _Admin_DictUpdate_Handler,
		},
		{
			MethodName: "DictDelete",
			Handler:    _Admin_DictDelete_Handler,
		},
		{
			MethodName: "DeptAdd",
			Handler:    _Admin_DeptAdd_Handler,
		},
		{
			MethodName: "DeptList",
			Handler:    _Admin_DeptList_Handler,
		},
		{
			MethodName: "DeptUpdate",
			Handler:    _Admin_DeptUpdate_Handler,
		},
		{
			MethodName: "DeptDelete",
			Handler:    _Admin_DeptDelete_Handler,
		},
		{
			MethodName: "LoginLogAdd",
			Handler:    _Admin_LoginLogAdd_Handler,
		},
		{
			MethodName: "LoginLogUpdate",
			Handler:    _Admin_LoginLogUpdate_Handler,
		},
		{
			MethodName: "LoginLogList",
			Handler:    _Admin_LoginLogList_Handler,
		},
		{
			MethodName: "SysLogAdd",
			Handler:    _Admin_SysLogAdd_Handler,
		},
		{
			MethodName: "SysLogList",
			Handler:    _Admin_SysLogList_Handler,
		},
		{
			MethodName: "CompanyAdd",
			Handler:    _Admin_CompanyAdd_Handler,
		},
		{
			MethodName: "CompanyList",
			Handler:    _Admin_CompanyList_Handler,
		},
		{
			MethodName: "CompanyUpdate",
			Handler:    _Admin_CompanyUpdate_Handler,
		},
		{
			MethodName: "CompanyDelete",
			Handler:    _Admin_CompanyDelete_Handler,
		},
		{
			MethodName: "UpdateSupplyCompany",
			Handler:    _Admin_UpdateSupplyCompany_Handler,
		},
		{
			MethodName: "ProjectAdd",
			Handler:    _Admin_ProjectAdd_Handler,
		},
		{
			MethodName: "ProjectList",
			Handler:    _Admin_ProjectList_Handler,
		},
		{
			MethodName: "ProjectUpdate",
			Handler:    _Admin_ProjectUpdate_Handler,
		},
		{
			MethodName: "ProjectDelete",
			Handler:    _Admin_ProjectDelete_Handler,
		},
		{
			MethodName: "ProjectOwnerList",
			Handler:    _Admin_ProjectOwnerList_Handler,
		},
		{
			MethodName: "ProjectGetOne",
			Handler:    _Admin_ProjectGetOne_Handler,
		},
		{
			MethodName: "LabelAdd",
			Handler:    _Admin_LabelAdd_Handler,
		},
		{
			MethodName: "LabelList",
			Handler:    _Admin_LabelList_Handler,
		},
		{
			MethodName: "LabelUpdate",
			Handler:    _Admin_LabelUpdate_Handler,
		},
		{
			MethodName: "LabelDelete",
			Handler:    _Admin_LabelDelete_Handler,
		},
		{
			MethodName: "LabelListByPri",
			Handler:    _Admin_LabelListByPri_Handler,
		},
		{
			MethodName: "ResourceAdd",
			Handler:    _Admin_ResourceAdd_Handler,
		},
		{
			MethodName: "ResourceList",
			Handler:    _Admin_ResourceList_Handler,
		},
		{
			MethodName: "ResourceDelete",
			Handler:    _Admin_ResourceDelete_Handler,
		},
		{
			MethodName: "ResourceObjectValueList",
			Handler:    _Admin_ResourceObjectValueList_Handler,
		},
		{
			MethodName: "SearchList",
			Handler:    _Admin_SearchList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
