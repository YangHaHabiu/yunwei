// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	captcha "ywadmin-v3/service/admin/api/internal/handler/captcha"
	company "ywadmin-v3/service/admin/api/internal/handler/company"
	dept "ywadmin-v3/service/admin/api/internal/handler/dept"
	dict "ywadmin-v3/service/admin/api/internal/handler/dict"
	file "ywadmin-v3/service/admin/api/internal/handler/file"
	label "ywadmin-v3/service/admin/api/internal/handler/label"
	log "ywadmin-v3/service/admin/api/internal/handler/log"
	menu "ywadmin-v3/service/admin/api/internal/handler/menu"
	project "ywadmin-v3/service/admin/api/internal/handler/project"
	resource "ywadmin-v3/service/admin/api/internal/handler/resource"
	role "ywadmin-v3/service/admin/api/internal/handler/role"
	search "ywadmin-v3/service/admin/api/internal/handler/search"
	stgroup "ywadmin-v3/service/admin/api/internal/handler/stgroup"
	strategy "ywadmin-v3/service/admin/api/internal/handler/strategy"
	ugroup "ywadmin-v3/service/admin/api/internal/handler/ugroup"
	user "ywadmin-v3/service/admin/api/internal/handler/user"
	"ywadmin-v3/service/admin/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/currentUser",
				Handler: user.UserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/logout",
				Handler: user.LogoutHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: user.UserAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: user.UserListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: user.UserUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: user.UserDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/reSetPassword",
				Handler: user.ReSetPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/updateUserStatus",
				Handler: user.UpdateUserStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/selectAllData",
				Handler: user.SelectAllDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/edit/:userId",
				Handler: user.GetUserByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/updatePersonalData",
				Handler: user.UpdatePersonalDataHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/updatePersonalPasswordData",
				Handler: user.UpdatePersonalPasswordDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getRouters",
				Handler: user.GetRoutersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUserAssignmentPolicy/:userId",
				Handler: user.GetUserAssignmentPolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userAssignmentPolicy",
				Handler: user.UserAssignmentPolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userBatchEditItems",
				Handler: user.UserBatchEditItemsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: user.UserLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: menu.MenuAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: menu.MenuListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: menu.MenuUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:menuId",
				Handler: menu.MenuDeleteHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/menu"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/treeselect",
				Handler: dept.TreeselectHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: dept.DeptAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: dept.DeptListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: dept.DeptUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:deptId",
				Handler: dept.DeptDeleteHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/dept"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/type/:dictType",
				Handler: dict.DictGetByTypeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: dict.DictAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: dict.DictListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: dict.DictUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:dictId",
				Handler: dict.DictDeleteHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/dict"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/loginlog",
				Handler: log.LoginLogListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/log"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: role.RoleAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: role.RoleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: role.RoleUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:roleId",
				Handler: role.RoleDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryMenuByRoleId/:roleId",
				Handler: role.QueryMenuByRoleIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/updateRoleMenu",
				Handler: role.UpdateRoleMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getRoleAssignmentUser/:roleId",
				Handler: role.GetRoleAssignmentUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/roleAssignmentUser",
				Handler: role.RoleAssignmentUserHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/role"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/syslog",
				Handler: log.SysLogListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/log"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/edit/:stgroupId",
				Handler: stgroup.GetStgrouInfoTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: stgroup.StgroupAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: stgroup.StgroupListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: stgroup.StgroupUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:stgroupId",
				Handler: stgroup.StgroupDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/policyAssociatedUsers",
				Handler: stgroup.PolicyAssociatedUsersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getDistributionConfig/:stgroupId",
				Handler: stgroup.GetDistributionConfigHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/stgroup"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: strategy.StrategyListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/strategy"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: ugroup.UgroupAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: ugroup.UgroupListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: ugroup.UgroupUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:ugroupId",
				Handler: ugroup.UgroupDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUgroupAssignmentPolicy/:ugroupId",
				Handler: ugroup.GetUgroupAssignmentPolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ugroupAssignmentPolicy",
				Handler: ugroup.UgroupAssignmentPolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUgroupAssignmentUser/:ugroupId",
				Handler: ugroup.GetUgroupAssignmentUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/ugroupAssignmentUser",
				Handler: ugroup.UgroupAssignmentUserHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/ugroup"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: project.ProjectAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: project.ProjectListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: project.ProjectUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:projectId",
				Handler: project.ProjectDeleteHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/project"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: company.CompanyAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: company.CompanyListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: company.CompanyUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:companyId",
				Handler: company.CompanyDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/updateSupplyCompany/:companyId",
				Handler: company.UpdateSupplyCompanyHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/company"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: label.LabelAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: label.LabelListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: label.LabelUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:labelId",
				Handler: label.LabelDeleteHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/label"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/upload",
				Handler: file.FileUploadHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/download/:file",
				Handler: file.FileDownloadHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/file"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: resource.ResourceAddHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/batchDelete",
				Handler: resource.ResourceDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: resource.ResourceListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/rsourceObjectValueList",
				Handler: resource.ResourceObjectValueListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/resource"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/article",
				Handler: search.SearchArticleHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/search"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/terminallog",
				Handler: log.TerminalListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/download",
				Handler: log.TerminalDownloadHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/log"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getCaptcha",
				Handler: captcha.GetCaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getWordCaptcha",
				Handler: captcha.GetWordCaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/checkCaptcha",
				Handler: captcha.CheckCaptchaHandler(serverCtx),
			},
		},
		rest.WithPrefix("/admin/captcha"),
	)
}
