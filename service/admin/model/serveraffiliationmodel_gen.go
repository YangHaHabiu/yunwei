// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	serverAffiliationFieldNames          = builder.RawFieldNames(&ServerAffiliation{})
	serverAffiliationRows                = strings.Join(serverAffiliationFieldNames, ",")
	serverAffiliationRowsExpectAutoSet   = strings.Join(stringx.Remove(serverAffiliationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	serverAffiliationRowsWithPlaceHolder = strings.Join(stringx.Remove(serverAffiliationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	serverAffiliationModel interface {
		Insert(ctx context.Context, data *ServerAffiliation) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ServerAffiliation, error)
		FindOneByAssetId(ctx context.Context, assetId uint64) (*ServerAffiliation, error)
		Update(ctx context.Context, data *ServerAffiliation) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context, filters ...interface{}) (*[]ServerAffiliation, error)
	}

	defaultServerAffiliationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ServerAffiliation struct {
		Id        uint64 `db:"id"`         // ID
		PrId      uint64 `db:"pr_id"`      // 公司项目关系ID
		CompanyId uint64 `db:"company_id"` // 公司ID
		AssetId   uint64 `db:"asset_id"`   // 资产ID
		DelFlag   uint64 `db:"del_flag"`   // 删除状态：2:未删除(数据使用中);1:已删除(回收)
	}
)

func newServerAffiliationModel(conn sqlx.SqlConn) *defaultServerAffiliationModel {
	return &defaultServerAffiliationModel{
		conn:  conn,
		table: "`server_affiliation`",
	}
}

func (m *defaultServerAffiliationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultServerAffiliationModel) FindOne(ctx context.Context, id uint64) (*ServerAffiliation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", serverAffiliationRows, m.table)
	var resp ServerAffiliation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultServerAffiliationModel) FindOneByAssetId(ctx context.Context, assetId uint64) (*ServerAffiliation, error) {
	var resp ServerAffiliation
	query := fmt.Sprintf("select %s from %s where `asset_id` = ? limit 1", serverAffiliationRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, assetId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultServerAffiliationModel) Insert(ctx context.Context, data *ServerAffiliation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, serverAffiliationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PrId, data.CompanyId, data.AssetId, data.DelFlag)
	return ret, err
}

func (m *defaultServerAffiliationModel) Update(ctx context.Context, newData *ServerAffiliation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, serverAffiliationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.PrId, newData.CompanyId, newData.AssetId, newData.DelFlag, newData.Id)
	return err
}

func (m *defaultServerAffiliationModel) tableName() string {
	return m.table
}

func (m *defaultServerAffiliationModel) FindAll(ctx context.Context, filters ...interface{}) (*[]ServerAffiliation, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query := fmt.Sprintf("select * from %s %s", m.table, condition)
	var resp []ServerAffiliation
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
