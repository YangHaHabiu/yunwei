// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserProjectFieldNames          = builder.RawFieldNames(&SysUserProject{})
	sysUserProjectRows                = strings.Join(sysUserProjectFieldNames, ",")
	sysUserProjectRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserProjectFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	sysUserProjectRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserProjectFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	sysUserProjectModel interface {
		Insert(ctx context.Context, data *SysUserProject) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysUserProject, error)
		Update(ctx context.Context, data *SysUserProject) error
		Delete(ctx context.Context, id int64) error
		DeleteByCustomFiled(ctx context.Context, filters ...interface{}) error
		BulkInserter(data []*SysUserProject) error
		FindAll(ctx context.Context, filters ...interface{}) (*[]SysUserProject, error)
	}

	defaultSysUserProjectModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysUserProject struct {
		Id        int64 `db:"id"`
		UserId    int64 `db:"user_id"`    // 用户id
		ProjectId int64 `db:"project_id"` // 项目id
	}
)

func newSysUserProjectModel(conn sqlx.SqlConn) *defaultSysUserProjectModel {
	return &defaultSysUserProjectModel{
		conn:  conn,
		table: "`sys_user_project`",
	}
}

func (m *defaultSysUserProjectModel) FindAll(ctx context.Context, filters ...interface{}) (*[]SysUserProject, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query := fmt.Sprintf("select %s from %s %s ", sysUgroupRows, m.table, condition)
	var resp []SysUserProject
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserProjectModel) Insert(ctx context.Context, data *SysUserProject) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, sysUserProjectRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ProjectId)
	return ret, err
}

func (m *defaultSysUserProjectModel) FindOne(ctx context.Context, id int64) (*SysUserProject, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserProjectRows, m.table)
	var resp SysUserProject
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserProjectModel) Update(ctx context.Context, data *SysUserProject) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysUserProjectRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ProjectId, data.Id)
	return err
}

func (m *defaultSysUserProjectModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysUserProjectModel) tableName() string {
	return m.table
}

func (m *defaultSysUserProjectModel) DeleteByCustomFiled(ctx context.Context, filters ...interface{}) error {
	query := fmt.Sprintf("delete from %s where 1=1 and %s", m.table, xfilters.Xfilters(filters...))
	_, err := m.conn.ExecCtx(ctx, query)
	return err
}

func (m *defaultSysUserProjectModel) BulkInserter(data []*SysUserProject) error {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, sysUserProjectRowsExpectAutoSet)
	bulkInserter, err := sqlx.NewBulkInserter(m.conn, query)
	if err != nil {
		return err
	}
	for _, v := range data {
		if err = bulkInserter.Insert(v.UserId, v.ProjectId); err != nil {
			return err
		}
	}
	bulkInserter.Flush()
	return err
}
