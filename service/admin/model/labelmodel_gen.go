// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	labelFieldNames          = builder.RawFieldNames(&Label{})
	labelRows                = strings.Join(labelFieldNames, ",")
	labelRowsExpectAutoSet   = strings.Join(stringx.Remove(labelFieldNames, "`label_id`", "`create_time`", "`update_time`"), ",")
	labelRowsWithPlaceHolder = strings.Join(stringx.Remove(labelFieldNames, "`label_id`", "`create_time`", "`update_time`", "`del_flag`", "`create_by`"), "=?,") + "=?"
)

type (
	labelModel interface {
		Insert(ctx context.Context, data *Label) (sql.Result, error)
		FindOne(ctx context.Context, labelId int64) (*Label, error)
		Update(ctx context.Context, data *Label) error
		Delete(ctx context.Context, labelId int64) error
		DeleteSoft(ctx context.Context, labelId int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]LabelView, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]LabelView, error)
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAllClusterByPri(ctx context.Context, filters ...interface{}) (*[]LabelViewNew, error)
	}

	defaultLabelModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Label struct {
		LabelId     int64     `db:"label_id"`
		LabelName   string    `db:"label_name"`   // 名称
		LabelValues string    `db:"label_values"` // json值
		LabelType   string    `db:"label_type"`   // json值
		LabelRemark string    `db:"label_remark"` // json值
		CreateBy    string    `db:"create_by"`    // 创建人
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		DelFlag     int64     `db:"del_flag"`     // 删除标识 0：未删除 1：删除
	}

	LabelView struct {
		ViewLabelId     int64  `db:"view_label_id"`
		ViewLabelName   string `db:"view_label_name"`   // 名称
		ViewLabelValues string `db:"view_label_values"` // json值
		ViewLabelType   string `db:"view_label_type"`   // json值
		ViewLabelRemark string `db:"view_label_remark"` // json值
		ViewStopStatus  string `db:"view_stop_status"`  // 删除标识 0：未删除 1：删除
	}

	LabelViewNew struct {
		ViewLabelId   int64  `db:"view_label_id"`
		ViewLabelName string `db:"view_label_name"` // 名称
	}
)

func newLabelModel(conn sqlx.SqlConn) *defaultLabelModel {
	return &defaultLabelModel{
		conn:  conn,
		table: "`label`",
	}
}

func (m *defaultLabelModel) Insert(ctx context.Context, data *Label) (sql.Result, error) {
	l, err := m.FindOneNotDel(ctx, data.LabelValues, data.LabelType)
	if err !=nil{
		return nil,err
	}
	if len(*l)>0{
		return nil,errors.New("存在相同的标签值")
	}
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?,?, ?,?)", m.table, labelRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.LabelName, data.LabelValues, data.LabelType, data.LabelRemark, data.CreateBy, data.DelFlag)
	return ret, err
}

func (m *defaultLabelModel) FindOneNotDel(ctx context.Context, labelVlalues,labelType string) (*[]Label, error) {
	query := fmt.Sprintf("select %s from %s where `label_values` = ? and del_flag = 0 and label_type = ?", labelRows, m.table)
	fmt.Println(query)
	var resp []Label
	err := m.conn.QueryRowsCtx(ctx, &resp, query,labelVlalues,labelType)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultLabelModel) FindOne(ctx context.Context, labelId int64) (*Label, error) {
	query := fmt.Sprintf("select %s from %s where `label_id` = ? limit 1", labelRows, m.table)
	var resp Label
	err := m.conn.QueryRowCtx(ctx, &resp, query, labelId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLabelModel) Update(ctx context.Context, data *Label) error {
	query := fmt.Sprintf("update %s set %s where `label_id` = ?", m.table, labelRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.LabelName, data.LabelValues, data.LabelType, data.LabelRemark, data.LabelId)
	return err
}

func (m *defaultLabelModel) Delete(ctx context.Context, labelId int64) error {
	query := fmt.Sprintf("delete from %s where `label_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, labelId)
	return err
}

func (m *defaultLabelModel) tableName() string {
	return m.table
}

//根据页码分页查询数据
func (m *defaultLabelModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]LabelView, error) {

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select * from view_label_info  %s  order by view_stop_status desc,instr('1,3,2,4',view_label_type),view_label_id limit ? offset ?", condition)

	var resp []LabelView
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//根据页码分页查询数据
func (m *defaultLabelModel) FindAll(ctx context.Context, filters ...interface{}) (*[]LabelView, error) {

	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select * from view_label_info  %s", condition)

	var resp []LabelView
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//软删除
func (m *defaultLabelModel) DeleteSoft(ctx context.Context, labelId int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `label_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, labelId)
	return err
}

func (m *defaultLabelModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select count(*) as count from view_label_info %s", condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//根据项目查询集群信息
func (m *defaultLabelModel) FindAllClusterByPri(ctx context.Context, filters ...interface{}) (*[]LabelViewNew, error) {

	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select DISTINCT (view_label_name) view_label_name,view_label_id from view_platform_label WHERE  view_label_type=1 %s", condition)
	fmt.Println(query)
	var resp []LabelViewNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
