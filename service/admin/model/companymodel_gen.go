// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	companyFieldNames          = builder.RawFieldNames(&Company{})
	companyRows                = strings.Join(companyFieldNames, ",")
	companyRowsExpectAutoSet   = strings.Join(stringx.Remove(companyFieldNames, "`company_id`", "`create_time`", "`update_time`", "`supply_company_status`"), ",")
	companyRowsWithPlaceHolder = strings.Join(stringx.Remove(companyFieldNames, "`company_id`", "`create_time`", "`update_time`", "`del_flag`", "`supply_company_status`"), "=?,") + "=?"
)

type (
	companyModel interface {
		Insert(ctx context.Context, data *Company) (sql.Result, error)
		FindOne(ctx context.Context, companyId int64) (*Company, error)
		Update(ctx context.Context, data *Company) error
		Delete(ctx context.Context, companyId int64) error
		DeleteSoft(ctx context.Context, companyId int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]Company, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]Company, error)
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		UpdateSupplyCompany(ctx context.Context, companyId int64) error
	}

	defaultCompanyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Company struct {
		CompanyId           int64  `db:"company_id"` // 公司ID
		CompanyCn           string `db:"company_cn"` // 公司中文名
		CompanyEn           string `db:"company_en"` // 公司英文名
		DelFlag             int64  `db:"del_flag"`   // 删除状态：0:未删除(数据使用中);1:已删除(回收)
		SupplyCompanyStatus int64  `db:"supply_company_status"`
	}
)

func newCompanyModel(conn sqlx.SqlConn) *defaultCompanyModel {
	return &defaultCompanyModel{
		conn:  conn,
		table: "`company`",
	}
}

func (m *defaultCompanyModel) Insert(ctx context.Context, data *Company) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, companyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyCn, data.CompanyEn, data.DelFlag)
	return ret, err
}

func (m *defaultCompanyModel) FindOne(ctx context.Context, companyId int64) (*Company, error) {
	query := fmt.Sprintf("select %s from %s where `company_id` = ? limit 1", companyRows, m.table)
	var resp Company
	err := m.conn.QueryRowCtx(ctx, &resp, query, companyId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCompanyModel) UpdateSupplyCompany(ctx context.Context, companyId int64) error {
	var status int64
	one, err := m.FindOne(ctx, companyId)
	if err != nil {
		return err
	}
	if one.SupplyCompanyStatus == 1 {
		status = 2
	} else {
		status = 1
	}
	query := fmt.Sprintf("update %s set supply_company_status = ? where `company_id` = ?", m.table)
	_, err = m.conn.ExecCtx(ctx, query, status, companyId)
	return err

}

func (m *defaultCompanyModel) Update(ctx context.Context, data *Company) error {
	query := fmt.Sprintf("update %s set %s where `company_id` = ?", m.table, companyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyCn, data.CompanyEn, data.CompanyId)
	return err
}

func (m *defaultCompanyModel) Delete(ctx context.Context, companyId int64) error {
	query := fmt.Sprintf("delete from %s where `company_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, companyId)
	return err
}

func (m *defaultCompanyModel) tableName() string {
	return m.table
}

//根据页码分页查询数据
func (m *defaultCompanyModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]Company, error) {

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select %s from %s where del_flag = %d %s limit ? offset ?", companyRows, m.table, globalkey.DelStateNo, condition)
	var resp []Company
	fmt.Println(pageSize, offset)
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCompanyModel) FindAll(ctx context.Context, filters ...interface{}) (*[]Company, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select %s from %s where del_flag = %d %s", companyRows, m.table, globalkey.DelStateNo, condition)
	var resp []Company

	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//软删除
func (m *defaultCompanyModel) DeleteSoft(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `company_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, id)
	return err
}

func (m *defaultCompanyModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select count(*) as count from %s where del_flag=%d %s", m.table, globalkey.DelStateNo, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}
