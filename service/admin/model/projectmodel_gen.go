// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/pkg/errors"
	"google.golang.org/grpc/metadata"
	"net/url"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	projectFieldNames          = builder.RawFieldNames(&Project{})
	projectRows                = strings.Join(projectFieldNames, ",")
	projectRowsExpectAutoSet   = strings.Join(stringx.Remove(projectFieldNames, "`project_id`", "`create_time`", "`update_time`"), ",")
	projectRowsWithPlaceHolder = strings.Join(stringx.Remove(projectFieldNames, "`project_id`", "`create_time`", "`update_time`", "`del_flag`"), "=?,") + "=?"
)

type (
	projectModel interface {
		Insert(ctx context.Context, data *Project) (sql.Result, error)
		FindOne(ctx context.Context, projectId int64) (*Project, error)
		Update(ctx context.Context, data *Project) error
		Delete(ctx context.Context, projectId int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]ViewCompanyProject, error)
		DeleteSoft(ctx context.Context, projectId, delFlag int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]ViewCompanyProject, error)
		FindListByUserId(ctx context.Context, userId int64, projectType string) (*[]Project, error)
	}

	defaultProjectModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Project struct {
		ProjectId   int64  `db:"project_id"`   // 项目ID
		ProjectCn   string `db:"project_cn"`   // 项目中文名
		ProjectEn   string `db:"project_en"`   // 项目英文名
		ProjectTeam int64  `db:"project_team"` // 项目组
		ProjectType int64  `db:"project_type"` // 项目类型(1:自研;2:发行)
		GroupQq     string `db:"group_qq"`     // 群qq号
		GroupType   string `db:"group_type"`   // 消息群类型：group，discuss
		GroupDevQq  string `db:"group_dev_qq"` // 通知开发qq组，多个用逗号分割
		DelFlag     int64  `db:"del_flag"`     // 删除状态：0:未删除(数据使用中);1:已删除(回收)
	}

	ViewCompanyProject struct {
		ViewCompanyId      sql.NullInt64  `db:"view_company_id"`
		ViewCompanyCn      sql.NullString `db:"view_company_cn"`
		ViewCompanyEn      sql.NullString `db:"view_company_en"`
		ViewCompanyDelFlag sql.NullInt64  `db:"view_company_del_flag"`
		ViewPrId           sql.NullInt64  `db:"view_pr_id"`
		ViewProjectId      sql.NullInt64  `db:"view_project_id"`
		ViewProjectCn      sql.NullString `db:"view_project_cn"`
		ViewProjectEn      sql.NullString `db:"view_project_en"`
		ViewDeptId         sql.NullInt64  `db:"view_dept_id"`
		ViewDeptName       sql.NullString `db:"view_dept_name"`
		ViewProjectType    sql.NullString `db:"view_project_type"`
		ViewGroupQq        sql.NullString `db:"view_group_qq"`
		ViewGroupTypeCn    sql.NullString `db:"view_group_type_cn"`
		ViewGroupTypeEn    sql.NullString `db:"view_group_type_en"`
		ViewGroupDevQq     sql.NullString `db:"view_group_dev_qq"`
		ViewProjectDelFlag sql.NullString `db:"view_project_del_flag"`
		ViewProjectTypeCn  sql.NullString `db:"view_project_type_cn"`
	}
)

func newProjectModel(conn sqlx.SqlConn) *defaultProjectModel {
	return &defaultProjectModel{
		conn:  conn,
		table: "`project`",
	}
}

func (m *defaultProjectModel) Insert(ctx context.Context, data *Project) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, projectRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectCn, data.ProjectEn, data.ProjectTeam, data.ProjectType, data.GroupQq, data.GroupType, data.GroupDevQq, data.DelFlag)
	return ret, err
}

func (m *defaultProjectModel) FindOne(ctx context.Context, projectId int64) (*Project, error) {
	query := fmt.Sprintf("select %s from %s where `project_id` = ? limit 1", projectRows, m.table)
	var resp Project
	err := m.conn.QueryRowCtx(ctx, &resp, query, projectId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProjectModel) Update(ctx context.Context, data *Project) error {
	query := fmt.Sprintf("update %s set %s where `project_id` = ?", m.table, projectRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectCn, data.ProjectEn, data.ProjectTeam, data.ProjectType, data.GroupQq, data.GroupType, data.GroupDevQq, data.ProjectId)
	return err
}

func (m *defaultProjectModel) Delete(ctx context.Context, projectId int64) error {
	query := fmt.Sprintf("delete from %s where `project_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, projectId)
	return err
}

func (m *defaultProjectModel) tableName() string {
	return m.table
}

//根据页码分页查询数据
func (m *defaultProjectModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]ViewCompanyProject, error) {

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf(`SELECT * from view_company_project where view_company_del_flag = %d and view_project_cn != "" %s  ORDER BY view_project_del_flag,view_project_id desc limit ? offset ?`, globalkey.DelStateNo, condition)
	var resp []ViewCompanyProject
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//根据用户id查询数据
func (m *defaultProjectModel) FindListByUserId(ctx context.Context, userId int64, projectType string) (*[]Project, error) {
	var (
		uname     string
		condition string
	)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		uname = md.Get("uname")[0]
		uname, _ = url.QueryUnescape(uname)
	}
	if uname != globalkey.SuperUserName {
		condition = fmt.Sprintf(" and su.id =%d", userId)
	}
	if projectType != "all" {
		condition += fmt.Sprintf(" and p.del_flag=0")
	}
	query := `SELECT
	p.* 
FROM
	project  p
	LEFT JOIN sys_user_project sup ON p.project_id = sup.project_id
	LEFT JOIN (select * from sys_user where del_flag=0) su ON sup.user_id = su.id 
where 1=1
%s
GROUP BY p.project_id
`
	query = fmt.Sprintf(query, condition)
	var resp []Project
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//软删除
func (m *defaultProjectModel) DeleteSoft(ctx context.Context, projectId, delFlag int64) error {

	if delFlag == 1 {

		var count []int64
		sql := `SELECT count(*) as count FROM view_assets WHERE view_user_project_id=%d and view_recycle_type=2
UNION ALL
SELECT count(*) as count FROM platform WHERE project_id=%d and del_flag=0
`
		sql = fmt.Sprintf(sql, projectId, projectId)
		err := m.conn.QueryRowsCtx(ctx, &count, sql)
		if err != nil {
			return err
		}
		tips := map[int]string{
			0: "存在线上资产，禁止停用此项目",
			1: "存在线上平台，禁止停用此项目",
		}
		for i, v := range count {
			if v != 0 {
				return errors.New(tips[i])
			}
		}

	}
	query := fmt.Sprintf("update %s set `del_flag`=? where `project_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, delFlag, projectId)
	if err != nil {
		return err
	}
	//_, err = m.conn.ExecCtx(ctx, "delete from sys_user_project where `project_id` = ?", projectId)
	return nil
}

func (m *defaultProjectModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select count(*) as count from view_company_project where view_company_del_flag = %d and view_project_cn != \"\" %s", globalkey.DelStateNo, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultProjectModel) FindAll(ctx context.Context, filters ...interface{}) (*[]ViewCompanyProject, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	if condition == "" {
		condition = "and view_company_del_flag = 0"
	}
	query := fmt.Sprintf(`SELECT * from view_company_project where view_project_cn != "" %s`, condition)
	var resp []ViewCompanyProject
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
