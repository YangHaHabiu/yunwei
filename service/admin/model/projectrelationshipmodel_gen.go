// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"
	"ywadmin-v3/service/yunwei/model"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	projectRelationshipFieldNames          = builder.RawFieldNames(&ProjectRelationship{})
	projectRelationshipRows                = strings.Join(projectRelationshipFieldNames, ",")
	projectRelationshipRowsExpectAutoSet   = strings.Join(stringx.Remove(projectRelationshipFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	projectRelationshipRowsWithPlaceHolder = strings.Join(stringx.Remove(projectRelationshipFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	projectRelationshipModel interface {
		Insert(ctx context.Context, data *ProjectRelationship) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProjectRelationship, error)
		Update(ctx context.Context, data *ProjectRelationship) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context, filters ...interface{}) (*[]ProjectRelationship, error)
		FindOneByPrId(ctx context.Context, id int64) (*ProjectRelationship, error)
	}

	defaultProjectRelationshipModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProjectRelationship struct {
		Id        int64 `db:"id"`         // ID
		CompanyId int64 `db:"company_id"` // 公司ID
		ProjectId int64 `db:"project_id"` // 项目ID
	}
)

func newProjectRelationshipModel(conn sqlx.SqlConn) *defaultProjectRelationshipModel {
	return &defaultProjectRelationshipModel{
		conn:  conn,
		table: "`project_relationship`",
	}
}

func (m *defaultProjectRelationshipModel) Insert(ctx context.Context, data *ProjectRelationship) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, projectRelationshipRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.ProjectId)
	return ret, err
}

func (m *defaultProjectRelationshipModel) FindOne(ctx context.Context, id int64) (*ProjectRelationship, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", projectRelationshipRows, m.table)
	var resp ProjectRelationship
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProjectRelationshipModel) FindOneByPrId(ctx context.Context, id int64) (*ProjectRelationship, error) {
	query := fmt.Sprintf("select * from %s where `project_id` = ? limit 1", m.table)
	var resp ProjectRelationship
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProjectRelationshipModel) Update(ctx context.Context, data *ProjectRelationship) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, projectRelationshipRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.ProjectId, data.Id)
	return err
}

func (m *defaultProjectRelationshipModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `project_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProjectRelationshipModel) tableName() string {
	return m.table
}

func (m *defaultProjectRelationshipModel) FindAll(ctx context.Context, filters ...interface{}) (*[]ProjectRelationship, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query := fmt.Sprintf("select * from %s %s", m.table, condition)

	var resp []ProjectRelationship
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
