// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskLogHistroyFieldNames          = builder.RawFieldNames(&TaskLogHistroy{})
	taskLogHistroyRows                = strings.Join(taskLogHistroyFieldNames, ",")
	taskLogHistroyRowsExpectAutoSet   = strings.Join(stringx.Remove(taskLogHistroyFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	taskLogHistroyRowsWithPlaceHolder = strings.Join(stringx.Remove(taskLogHistroyFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	taskLogHistroyModel interface {
		Insert(ctx context.Context, data *TaskLogHistroy) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TaskLogHistroy, error)
		Update(ctx context.Context, data *TaskLogHistroy) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context, filters ...interface{}) (*[]TaskLogHistroyList, error)
	}

	defaultTaskLogHistroyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TaskLogHistroy struct {
		Id        int64  `db:"id"`         // 日志id
		TasksId   int64  `db:"tasks_id"`   // 任务id
		TasksTime int64  `db:"tasks_time"` // 时间戳
		TasksLogs string `db:"tasks_logs"` // 任务日志
	}
	TaskLogHistroyList struct {
		LogInfo string `db:"log_info"`
		Pid     int64  `db:"pid"`
	}
)

func newTaskLogHistroyModel(conn sqlx.SqlConn) *defaultTaskLogHistroyModel {
	return &defaultTaskLogHistroyModel{
		conn:  conn,
		table: "`task_log_histroy`",
	}
}

func (m *defaultTaskLogHistroyModel) Insert(ctx context.Context, data *TaskLogHistroy) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, taskLogHistroyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TasksId, data.TasksTime, data.TasksLogs)
	return ret, err
}

func (m *defaultTaskLogHistroyModel) FindOne(ctx context.Context, id int64) (*TaskLogHistroy, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskLogHistroyRows, m.table)
	var resp TaskLogHistroy
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultTaskLogHistroyModel) FindAll(ctx context.Context, filters ...interface{}) (*[]TaskLogHistroyList, error) {
	query := `
select concat('{"log_info":[',group_concat(log_inner order by E.id),']}') log_info,E.pid
from (
	select concat('{"label":"',substring_index(tasks.name,"(",1),'","is_open":1',',"children":[',D.log_inner,']}') as log_inner,tasks.pid,tasks.id
	from tasks,(
		select group_concat(v_log_inner order by v_step asc,v_id asc) as log_inner,v_pid as pid
		from view_task_logs_relationship_with_id
		group by pid
	) D
	where tasks.id=D.pid
) E
%s
group by pid;
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}

	query = fmt.Sprintf(query, condition)

	var resp []TaskLogHistroyList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskLogHistroyModel) Update(ctx context.Context, data *TaskLogHistroy) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taskLogHistroyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TasksId, data.TasksTime, data.TasksLogs, data.Id)
	return err
}

func (m *defaultTaskLogHistroyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTaskLogHistroyModel) tableName() string {
	return m.table
}
