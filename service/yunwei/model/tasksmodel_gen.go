// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"github.com/gogf/gf/util/gconv"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"google.golang.org/grpc/metadata"
	"strings"
	"time"
	"ywadmin-v3/common/send_message"
	"ywadmin-v3/common/xerr"
	"ywadmin-v3/common/xfilters"
	"ywadmin-v3/common/xtime"
	"ywadmin-v3/service/yunwei/rpc/yunweiclient"
)

var (
	tasksFieldNames          = builder.RawFieldNames(&Tasks{})
	tasksRows                = strings.Join(tasksFieldNames, ",")
	tasksRowsExpectAutoSet   = strings.Join(stringx.Remove(tasksFieldNames, "`id`", "`create_time`", "`update_time`", "`update_by`"), ",")
	tasksRowsWithPlaceHolder = strings.Join(stringx.Remove(tasksFieldNames, "`id`", "`create_time`", "`update_time`", "`create_by`"), "=?,") + "=?"
)

type (
	tasksModel interface {
		Insert(ctx context.Context, data *yunweiclient.AddTasksReq, ywQQ string) error
		FindOne(ctx context.Context, id int64) (*Tasks, error)
		Update(ctx context.Context, data *yunweiclient.UpdateTasksReq) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]TasksList, error)
		DeleteSoft(ctx context.Context, id, status int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]TasksList, error)
		GetOperationList(ctx context.Context, uid int64) (*[]OperationList, error)
		UpdateByField(ctx context.Context, fieldList []string, args ...interface{}) error
		SelectRunningTaskById(ctx context.Context, id int64) (*TasksList, error)
		FindProjectById(ctx context.Context, PrId int64) (*Project, error)
	}

	defaultTasksModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Tasks struct {
		Id             int64     `db:"id"`              // 任务id
		ProjectId      int64     `db:"project_id"`      // 项目id
		ClusterId      string    `db:"cluster_id"`      // 集群ids
		TaskType       string    `db:"task_type"`       // 任务类型 1：临时维护 2：日常维护
		Level          int64     `db:"level"`           // 任务层级
		MaintainId     int64     `db:"maintain_id"`     // 关联日常维护计划表
		Name           string    `db:"name"`            // 任务名称
		Types          string    `db:"types"`           // 任务操作类型
		Pid            int64     `db:"pid"`             // 任务pid
		TaskStartTime  int64     `db:"task_start_time"` // 任务开始时间
		TaskEndTime    int64     `db:"task_end_time"`   // 任务结束时间
		TaskExecTime   int64     `db:"task_exec_time"`  // 任务执行时间
		Cmd            string    `db:"cmd"`             // 任务命令
		Content        string    `db:"content"`         // 任务执行日志
		TaskStatus     int64     `db:"task_status"`     // 任务状态 0：未开始 1：执行中 2：执行失败 3：执行成功 4：取消任务 [ 5：失败删除 6：删除 ]
		TaskStep       int64     `db:"task_step"`       // 任务步骤
		OuterIp        string    `db:"outer_ip"`        // 外网源IP
		CreateBy       string    `db:"create_by"`       // 创建者
		CreateTime     time.Time `db:"create_time"`
		UpdateBy       string    `db:"update_by"` // 修改者
		UpdateTime     time.Time `db:"update_time"`
		ExportFileName string    `db:"export_file_name"` // 导出文件名
		Remark         string    `db:"remark"`           // 任务备注
	}

	TasksList struct {
		Id             int64          `db:"id"`         // 任务id
		ProjectId      int64          `db:"project_id"` // 项目id
		ProjectCn      string         `db:"project_cn"`
		ProjectEn      string         `db:"project_en"`
		ClusterId      string         `db:"cluster_id"`      // 集群ids
		TaskType       string         `db:"task_type"`       // 任务类型 1：临时维护 2：日常维护
		Level          int64          `db:"level"`           // 任务层级
		MaintainId     int64          `db:"maintain_id"`     // 关联日常维护计划表
		Name           string         `db:"name"`            // 任务名称
		Types          string         `db:"types"`           // 任务操作类型
		Pid            int64          `db:"pid"`             // 任务pid
		TaskStartTime  int64          `db:"task_start_time"` // 任务开始时间
		TaskEndTime    int64          `db:"task_end_time"`   // 任务结束时间
		TaskExecTime   int64          `db:"task_exec_time"`  // 任务执行时间
		Cmd            string         `db:"cmd"`             // 任务命令
		Content        string         `db:"content"`         // 任务执行日志
		TaskStatus     int64          `db:"task_status"`     // 任务状态 0：未开始 1：执行中 2：执行失败 3：执行成功 4：取消任务 [ 5：失败删除 6：删除 ]
		TaskStep       int64          `db:"task_step"`       // 任务步骤
		OuterIp        string         `db:"outer_ip"`        // 外网源IP
		CreateBy       string         `db:"create_by"`       // 创建者
		CreateTime     time.Time      `db:"create_time"`
		UpdateBy       string         `db:"update_by"` // 修改者
		UpdateTime     time.Time      `db:"update_time"`
		ExportFileName string         `db:"export_file_name"` // 导出文件名
		Remark         string         `db:"remark"`           // 任务备注
		CreateNameEn   string         `db:"create_name_en"`
		CreateNameCn   string         `db:"create_name_cn"`
		UpdateNameEn   string         `db:"update_name_en"`
		UpdateNameCn   string         `db:"update_name_cn"`
		TaskTypeCn     sql.NullString `db:"task_type_cn"`
		TaskStatusCn   sql.NullString `db:"task_status_cn"`
	}

	OperationList struct {
		Id       int64  `db:"id"`
		Name     string `db:"name"`
		Url      string `db:"url"`
		ParentId int64  `db:"parent_id"`
		OrderNum int64  `db:"order_num"`
		Tp       int64  `db:"tp"`
		RoleId   int64  `db:"role_id"`
		UserId   int64  `db:"user_id"`
	}

	Project struct {
		ProjectId   int64  `db:"project_id"`   // 项目ID
		ProjectCn   string `db:"project_cn"`   // 项目中文名
		ProjectEn   string `db:"project_en"`   // 项目英文名
		ProjectTeam int64  `db:"project_team"` // 项目组
		ProjectType string `db:"project_type"` // 项目类型(1:自研;2:发行)
		GroupQq     string `db:"group_qq"`     // 群qq号
		GroupType   string `db:"group_type"`   // 消息群类型：group，discuss
		GroupDevQq  string `db:"group_dev_qq"` // 通知开发qq组，多个用逗号分割
		DelFlag     int64  `db:"del_flag"`     // 删除状态：0:未删除(数据使用中);1:已删除(回收)
	}

	SysUser struct {
		Id             int64  `db:"id"`               // 编号
		Name           string `db:"name"`             // 用户名
		NickName       string `db:"nick_name"`        // 昵称
		Avatar         string `db:"avatar"`           // 头像
		Password       string `db:"password"`         // 密码
		Salt           string `db:"salt"`             // 加密盐
		Email          string `db:"email"`            // 邮箱
		Mobile         string `db:"mobile"`           // 手机号
		Status         int64  `db:"status"`           // 状态 1：正常 2：禁用
		DeptId         int64  `db:"dept_id"`          // 机构ID
		CreateBy       string `db:"create_by"`        // 创建人
		CreateTime     string `db:"create_time"`      // 创建时间
		LastUpdateBy   string `db:"last_update_by"`   // 更新人
		LastUpdateTime string `db:"last_update_time"` // 更新时间
		DelFlag        int64  `db:"del_flag"`         // 是否删除  1：已删除  0：正常

	}

	// 解析前端json
	OperationListJson struct {
		OperationListForm []TaskCommonJson `json:"operationListForm"`
	}

	// 解析统一结构-对应下面内容
	TaskCommonJson struct {
		Id             int64  `json:"id,omitempty"`
		Operation      string `json:"operation,omitempty"`
		Stable         string `json:"stable,omitempty"`
		OuterIp        string `json:"outerIp,omitempty"`
		DbUpdate       string `json:"dbUpdate,omitempty"`
		FileList       string `json:"fileList,omitempty"`
		MaintainRange  string `json:"maintainRange,omitempty"`
		CmdList        string `json:"cmdList,omitempty"`
		DbType         string `json:"dbType,omitempty"`
		SQLCmd         string `json:"SQLCmd,omitempty"`
		Merge          string `json:"merge,omitempty"`
		ExportFileName string `json:"exportFileName,omitempty"`
		PlatName       string `json:"platName,omitempty"`
		CheckSt        string `json:"checkSt,omitempty"`
		//OperationCn    string   `json:"operationCn,omitempty"`
		InitSetTime    string `json:"initSetTime,omitempty"`
		ExecuteSQL     string `json:"executeSQL,omitempty"`
		ExecuteFlag    string `json:"executeFlag,omitempty"`
		AddRestartGame string `json:"addRestartGame,omitempty"`
	}
)

func newTasksModel(conn sqlx.SqlConn) *defaultTasksModel {
	return &defaultTasksModel{
		conn:  conn,
		table: "`tasks`",
	}
}

//事务新增
func (m *defaultTasksModel) Insert(ctx context.Context, data *yunweiclient.AddTasksReq, ywQQ string) error {
	var uid string
	if data.Uid == "" {
		if md, ok := metadata.FromIncomingContext(ctx); ok {
			uid = md.Get("uid")[0]
		}
	} else {
		uid = data.Uid
	}

	var insertSql = fmt.Sprintf("insert into %s (%s) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", m.table, tasksRowsExpectAutoSet)
	err := m.conn.Transact(func(session sqlx.Session) error {
		if gconv.Int64(data.StartTime) < (time.Now().Unix() - 300) {
			return errors.New("开始时间小于当前时间")
		}
		stmt, err := session.Prepare(insertSql)
		if err != nil {
			return err
		}
		defer stmt.Close()
		var (
			TaskType string
		)
		if data.TaskType != "0" {
			TaskType = data.TaskType
		} else {
			TaskType = "1"
		}
		// 返回任何错误都会回滚事务
		lastObj, err := stmt.Exec(
			data.ProjectId,
			data.ClusterId,
			TaskType,
			1,
			data.MaintainId,
			data.Title,
			"",
			0,
			data.StartTime,
			0,
			0,
			data.TaskListForm,
			data.Content,
			-1,
			0,
			data.OuterIp,
			uid,
			"",
			"")
		if err != nil {
			return err
		}
		pid, err := lastObj.LastInsertId()
		if err != nil || pid == 0 {
			return errors.New("插入一级任务失败")
		}

		//循环添加子任务
		var taskListObj []OperationListJson
		err = json.Unmarshal([]byte(data.TaskListForm), &taskListObj)
		if err != nil {
			return err
		}
		splitContent := strings.Split(data.Content, "==>")
		for k, v := range taskListObj {
			lastObj, err := stmt.Exec(
				data.ProjectId,
				data.ClusterId,
				TaskType,
				2,
				data.MaintainId,
				fmt.Sprintf("子任务%d", k+1),
				"",
				pid,
				data.StartTime,
				0,
				0,
				"",
				splitContent[k],
				-1,
				int64(k+1),
				data.OuterIp,
				uid,
				"",
				"")
			if err != nil {
				return err
			}
			ppid, err := lastObj.LastInsertId()
			if err != nil || ppid == 0 {
				return errors.New("插入二级任务失败")
			}
			splitContent2 := strings.Split(splitContent[k], ">")

			for k1, v1 := range v.OperationListForm {
				updateObj := new(TaskCommonJson)
				updateObj.FileList = v1.FileList
				updateObj.MaintainRange = v1.MaintainRange
				updateObj.Stable = v1.Stable
				updateObj.OuterIp = v1.OuterIp
				updateObj.DbUpdate = v1.DbUpdate
				updateObj.SQLCmd = v1.SQLCmd
				updateObj.ExportFileName = v1.ExportFileName
				updateObj.Merge = v1.Merge
				updateObj.DbType = v1.DbType
				updateObj.CmdList = v1.CmdList
				updateObj.InitSetTime = v1.InitSetTime
				updateObj.PlatName = v1.PlatName
				updateObj.AddRestartGame = v1.AddRestartGame
				updateObj.CheckSt = v1.CheckSt
				updateObj.ExecuteSQL = v1.ExecuteSQL
				updateObj.ExecuteFlag = v1.ExecuteFlag
				cmd, _ := json.Marshal(updateObj)
				lastObj, err := stmt.Exec(
					data.ProjectId,
					data.ClusterId,
					TaskType,
					3,
					data.MaintainId,
					splitContent2[k1+1],
					v1.Operation,
					ppid,
					data.StartTime,
					0,
					0,
					string(cmd),
					splitContent[k],
					-1,
					int64(k1+1),
					data.OuterIp,
					uid,
					"",
					"")
				if err != nil {
					return err
				}
				pppid, err := lastObj.LastInsertId()
				if err != nil || ppid == 0 {
					return errors.New("插入三级任务失败")
				}
				fmt.Println(pppid)
			}
		}

		//查询项目并发送QQ消息
		go func() {
			var (
				projectObj Project
				userObj    SysUser
				qqgroupObj QqGroupList
			)
			sql := fmt.Sprintf("select * from project where project_id = %d", data.ProjectId)
			err = m.conn.QueryRow(&projectObj, sql)
			if err != nil {
				return
			}

			sql = fmt.Sprintf("select * from sys_user where id = %s", uid)
			err = m.conn.QueryRow(&userObj, sql)
			if err != nil {
				return
			}

			sql = fmt.Sprintf("SELECT * from qq_group.qq_load_balance where group_type= 'group' and is_master=1")
			err = m.conn.QueryRow(&qqgroupObj, sql)
			if err != nil {
				return
			}
			sendUrl := fmt.Sprintf("%s/send_group_msg", qqgroupObj.QqApi)
			//发送qq信息
			operator := fmt.Sprintf("%s-%s", userObj.NickName, userObj.Name)
			var msg send_message.MessageInterface
			msg = send_message.NewMessage(
				data.Title,
				operator,
				data.Content,
				xtime.GetTimetampByTimeMinu(gconv.Int64(data.StartTime)),
				"",
				"",
				projectObj.ProjectCn,
				"",
				0,
				pid,
				gconv.Int64(TaskType),
				"",
				sendUrl,
			)
			//更新仅发送给运维群，日常维护才发工作群

			msg.Send(ywQQ, "group")
			if projectObj.GroupQq != "" {
				if TaskType == "2" {
					msg.Send(projectObj.GroupQq, projectObj.GroupType)
				}
			}
			//发送结束
		}()
		//如果新增日常维护计划，修改维护计划的任务id
		if TaskType == "2" {
			sql := fmt.Sprintf("update maintain_plan set `task_id` = ? where `id` = ?")
			_, err = m.conn.Exec(sql, pid, data.MaintainId)
			if err != nil {
				return err
			}
		}

		return nil

	})
	if err != nil {
		return err
	}

	return nil
}

//根据项目id查询项目对象
func (m *defaultTasksModel) FindProjectById(ctx context.Context, PrId int64) (*Project, error) {
	var resp Project
	query := fmt.Sprintf("select * from project where project_id = ?")
	err := m.conn.QueryRowCtx(ctx, &resp, query, PrId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

//事务修改
func (m *defaultTasksModel) Update(ctx context.Context, data *yunweiclient.UpdateTasksReq) error {
	var uid string
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		uid = md.Get("uid")[0]
	}

	var insertSql = fmt.Sprintf("insert into %s (%s) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", m.table, tasksRowsExpectAutoSet)
	err := m.conn.Transact(func(session sqlx.Session) error {
		stmt, err := session.Prepare(insertSql)
		if err != nil {
			return err
		}
		defer stmt.Close()
		//获取主任务id的信息
		one, err := m.FindOne(ctx, data.Id)
		if err != nil {
			return xerr.NewErrMsg("查询失败")
		}

		for _, v := range []int64{
			1, 3, 4, 5, 6,
		} {
			if v == one.TaskStatus {
				return errors.New("只有失败和未开始的任务才允许修改")
			}
		}
		//修改需要删除的操作id
		if data.ErrDifferenceSet != "" {
			err = m.DeleteRecordByIds(ctx, data.ErrDifferenceSet, 5)
			if err != nil {
				return errors.New("修改[失败后删除状态操作]失败")
			}
		}
		if data.DifferenceSet != "" {
			err = m.DeleteRecordByIds(ctx, data.DifferenceSet, 6)
			if err != nil {
				return errors.New(" 修改[直接删除状态]失败")
			}
		}
		//var taskType string
		//if data.TaskType != "0" {
		//	taskType = data.TaskType
		//} else {
		taskType := one.TaskType
		//}
		//修改主任务
		err = m.UpdateByField(ctx, []string{
			"name",
			"outer_ip",
			"task_start_time",
			"content",
			"update_by",
			"cmd",
			"id",
		}, data.Title, data.OuterIp, data.StartTime, data.Content, uid, data.TaskListForm, data.Id)
		if err != nil {
			return errors.New(fmt.Sprintf("修改主任务ID[%d]失败，原因：+%v", data.Id, err))
		}
		var taskListObj []OperationListJson
		err = json.Unmarshal([]byte(data.TaskListForm), &taskListObj)
		if err != nil {
			return err
		}
		//查出子任务状态不为4,5，6的数据
		allSubData, err := m.FindAll(ctx, "task_status__in", "-1,1,2,3", "pid__=", data.Id)
		if err != nil {
			return errors.New(fmt.Sprintf("查询主任务ID[%d]的子任务失败，原因：+%v", data.Id, err))
		}
		splitContent := strings.Split(data.Content, "==>")
		for k, v := range taskListObj {

			if k+1 <= len(*allSubData) {
				//修改子任务
				subId := (*allSubData)[k].Id
				err = m.UpdateByField(ctx, []string{
					"content",
					"task_start_time",
					"id",
				}, splitContent[k], data.StartTime, subId)

				splitContent2 := strings.Split(splitContent[k], ">")
				for k1, v1 := range v.OperationListForm {
					if v1.Id != 0 {
						entity3, err := m.FindOne(ctx, v1.Id)
						if err != nil {
							return errors.New(fmt.Sprintf("查询主ID[%d]失败，原因：+%v", subId, err))
						}

						if entity3.TaskStatus == 3 || entity3.TaskStatus == 4 || entity3.TaskStatus == 6 {
							continue
						} else if entity3.TaskStatus == -1 || entity3.TaskStatus == 5 {
							//修改子任务的操作
							marshal, _ := json.Marshal(TaskCommonJson{
								FileList:       v1.FileList,
								MaintainRange:  v1.MaintainRange,
								Stable:         v1.Stable,
								OuterIp:        v1.OuterIp,
								DbUpdate:       v1.DbUpdate,
								DbType:         v1.DbType,
								CmdList:        v1.CmdList,
								SQLCmd:         v1.SQLCmd,
								InitSetTime:    v1.InitSetTime,
								AddRestartGame: v1.AddRestartGame,
								Merge:          v1.Merge,
								ExportFileName: v1.ExportFileName,
								ExecuteSQL:     v1.ExecuteSQL,
								ExecuteFlag:    v1.ExecuteFlag,
								PlatName:       v1.PlatName,
								CheckSt:        v1.CheckSt},
							)
							if data.IsEnable == 0 {
								//使用原范围失败列表，修改子任务数据
								var taskStatus int64
								if entity3.TaskStatus == 5 {
									taskStatus = 2
								} else {
									taskStatus = -1
								}
								err = m.UpdateByField(ctx, []string{
									"update_by",
									"cmd",
									"task_start_time",
									"outer_ip",
									"cluster_id",
									"project_id",
									"task_status",
									"types",
									"name",
									"id",
								}, uid, string(marshal), data.StartTime, data.OuterIp, data.ClusterId, data.ProjectId, taskStatus, v1.Operation, splitContent2[k1+1], v1.Id)
								if err != nil {
									return errors.New(fmt.Sprintf("修改ID[%d]失败，原因：+%v", v1.Id, err))
								}
							} else {
								//使用新范围列表，新增子任务数据
								lastObj, err := stmt.Exec(
									data.ProjectId,
									data.ClusterId,
									taskType,
									3,
									data.MaintainId,
									splitContent2[k1+1],
									v1.Operation,
									subId,
									data.StartTime,
									0,
									0,
									string(marshal),
									splitContent[k],
									-1,
									int64(k1+1),
									data.OuterIp,
									uid,
									"",
									"")
								id, err := lastObj.LastInsertId()
								if err != nil || id == 0 {
									return errors.New(fmt.Sprintf("新范围子任务新增ID[%d]失败，原因：+%v", id, err))
								}
							}
						}

					} else {
						//失败后的新增
						cmd, _ := json.Marshal(TaskCommonJson{
							FileList:       v1.FileList,
							MaintainRange:  v1.MaintainRange,
							Stable:         v1.Stable,
							OuterIp:        v1.OuterIp,
							DbUpdate:       v1.DbUpdate,
							DbType:         v1.DbType,
							CmdList:        v1.CmdList,
							SQLCmd:         v1.SQLCmd,
							ExportFileName: v1.ExportFileName,
							ExecuteSQL:     v1.ExecuteSQL,
							ExecuteFlag:    v1.ExecuteFlag,
							Merge:          v1.Merge,
							PlatName:       v1.PlatName,
							CheckSt:        v1.CheckSt},
						)
						lastObj, err := stmt.Exec(
							data.ProjectId,
							data.ClusterId,
							taskType,
							3,
							data.MaintainId,
							splitContent2[k1+1],
							v1.Operation,
							subId,
							data.StartTime,
							0,
							0,
							string(cmd),
							splitContent[k],
							-1,
							int64(k1+1),
							data.OuterIp,
							uid,
							"",
							"")
						id, err := lastObj.LastInsertId()
						if err != nil || id == 0 {
							return errors.New(fmt.Sprintf("失败子任务新增ID[%d]失败，原因：+%v", id, err))
						}
					}
				}
			} else {
				//未开始的新增子任务二级
				entity2, err := stmt.Exec(
					data.ProjectId,
					data.ClusterId,
					taskType,
					2,
					data.MaintainId,
					fmt.Sprintf("子任务%d", k+1),
					"",
					data.Id,
					data.StartTime,
					0,
					0,
					"",
					splitContent[k],
					-1,
					int64(k+1),
					data.OuterIp,
					uid,
					"",
					"")
				entity2id, err := entity2.LastInsertId()
				if err != nil || entity2id == 0 {
					return errors.New(fmt.Sprintf("未开始二级任务新增ID[%d]失败，原因：+%v", entity2id, err))
				}
				splitContent2 := strings.Split(splitContent[k], ">")
				//未开始子任务三级
				for k1, v1 := range v.OperationListForm {
					updateObj := new(TaskCommonJson)
					updateObj.FileList = v1.FileList
					updateObj.MaintainRange = v1.MaintainRange
					updateObj.Stable = v1.Stable
					updateObj.OuterIp = v1.OuterIp
					updateObj.DbUpdate = v1.DbUpdate
					updateObj.DbType = v1.DbType
					updateObj.Merge = v1.Merge
					updateObj.SQLCmd = v1.SQLCmd
					updateObj.ExportFileName = v1.ExportFileName
					updateObj.ExecuteSQL = v1.ExecuteSQL
					updateObj.CmdList = v1.CmdList
					updateObj.InitSetTime = v1.InitSetTime
					updateObj.ExecuteFlag = v1.ExecuteFlag
					updateObj.PlatName = v1.PlatName
					updateObj.CheckSt = v1.CheckSt
					cmd, _ := json.Marshal(updateObj)
					lastObj, err := stmt.Exec(
						data.ProjectId,
						data.ClusterId,
						taskType,
						3,
						data.MaintainId,
						splitContent2[k1+1],
						v1.Operation,
						entity2id,
						data.StartTime,
						0,
						0,
						string(cmd),
						splitContent[k],
						-1,
						int64(k1+1),
						data.OuterIp,
						uid,
						"",
						"")
					id, err := lastObj.LastInsertId()
					if err != nil || id == 0 {
						return errors.New(fmt.Sprintf("未开始三级子任务新增ID[%d]失败，原因：+%v", id, err))
					}
				}
			}
		}
		return err
	})

	return err
}

func (m *defaultTasksModel) DeleteRecordByIds(ctx context.Context, ids string, status int64) error {
	query := fmt.Sprintf("update %s set `task_status`= %d where `id` in (%s)", m.table, status, ids)
	_, err := m.conn.ExecCtx(ctx, query)
	return err
}

func (m *defaultTasksModel) FindOne(ctx context.Context, id int64) (*Tasks, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tasksRows, m.table)
	var resp Tasks
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTasksModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTasksModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultTasksModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]TasksList, error) {
	query := `SELECT * FROM (
SELECT n.*,IFNULL(o.label,'') AS task_status_cn   FROM (
SELECT
	g.*,
	IFNULL(m.label,'') AS task_type_cn 
FROM
	(
	SELECT
		e.*,
		IFNULL( f.name, '' ) AS update_name_en,
		IFNULL( f.nick_name, '' ) AS update_name_cn 
	FROM
		(
		SELECT
			c.*,
			d.NAME AS create_name_en,
			d.nick_name AS create_name_cn 
		FROM
			( SELECT a.*, b.project_cn,b.project_en FROM tasks a INNER JOIN project b ON a.project_id = b.project_id ) c
			LEFT JOIN sys_user d ON c.create_by = d.id 
		) e
		LEFT JOIN sys_user f ON e.update_by = f.id 
	) g
	LEFT JOIN ( SELECT * FROM sys_dict WHERE types = 'task_types' AND pid != - 1 ) m ON g.task_type = m.value
	) n
	LEFT JOIN ( SELECT * FROM sys_dict WHERE types = 'task_status' AND pid != - 1 ) o ON n.task_status = o.value
	) p
where pid=0
%s
ORDER BY task_status,task_exec_time desc,task_start_time desc
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}

	query = fmt.Sprintf(query, condition)
	//fmt.Println(query)
	var resp []TasksList
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultTasksModel) FindAll(ctx context.Context, filters ...interface{}) (*[]TasksList, error) {
	query := `SELECT * FROM (
SELECT n.*,IFNULL(o.label,'') AS task_status_cn   FROM (
SELECT
	g.*,
	IFNULL(m.label,'') AS task_type_cn 
FROM
	(
	SELECT
		e.*,
		IFNULL( f.name, '' ) AS update_name_en,
		IFNULL( f.nick_name, '' ) AS update_name_cn 
	FROM
		(
		SELECT
			c.*,
			d.NAME AS create_name_en,
			d.nick_name AS create_name_cn 
		FROM
			( SELECT a.*, b.project_cn,b.project_en FROM tasks a INNER JOIN project b ON a.project_id = b.project_id ) c
			LEFT JOIN sys_user d ON c.create_by = d.id 
		) e
		LEFT JOIN sys_user f ON e.update_by = f.id 
	) g
	LEFT JOIN ( SELECT * FROM sys_dict WHERE types = 'task_types' AND pid != - 1 ) m ON g.task_type = m.value
	) n
	LEFT JOIN ( SELECT * FROM sys_dict WHERE types = 'task_status' AND pid != - 1 ) o ON n.task_status = o.value
	) p
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}

	query = fmt.Sprintf(query, condition)
	//fmt.Println(query)
	var resp []TasksList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultTasksModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := `SELECT count(*) as count FROM (
SELECT n.*,IFNULL(o.label,'') AS task_status_cn   FROM (
SELECT
	g.*,
	IFNULL(m.label,'') AS task_type_cn 
FROM
	(
	SELECT
		e.*,
		IFNULL( f.name, '' ) AS update_name_en,
		IFNULL( f.nick_name, '' ) AS update_name_cn 
	FROM
		(
		SELECT
			c.*,
			d.NAME AS create_name_en,
			d.nick_name AS create_name_cn 
		FROM
			( SELECT a.*, b.project_cn FROM tasks a INNER JOIN project b ON a.project_id = b.project_id ) c
			LEFT JOIN sys_user d ON c.create_by = d.id 
		) e
		LEFT JOIN sys_user f ON e.update_by = f.id 
	) g
	LEFT JOIN ( SELECT * FROM sys_dict WHERE types = 'task_types' AND pid != - 1 ) m ON g.task_type = m.value
	) n
	LEFT JOIN ( SELECT * FROM sys_dict WHERE types = 'task_status' AND pid != - 1 ) o ON n.task_status = o.value
	) p
where pid=0
%s
`
	query = fmt.Sprintf(query, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultTasksModel) DeleteSoft(ctx context.Context, id, status int64) error {
	var uid string
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		uid = md.Get("uid")[0]
	}
	query := fmt.Sprintf("update %s set `task_status`=?,`update_by` = %s where `id` = ?", m.table, uid)

	_, err := m.conn.ExecCtx(ctx, query, status, id)
	return err
}

//指明字段更新 (列表最后一项是主键id名称)
func (m *defaultTasksModel) UpdateByField(ctx context.Context, fieldList []string, args ...interface{}) error {
	fieldListx := stringx.Remove(fieldList, fieldList[len(fieldList)-1])
	fields := strings.Join(fieldListx, "=?,") + "=?"
	query := fmt.Sprintf("update %s set  %s where `%s` = ?", m.table, fields, fieldList[len(fieldList)-1])
	_, err := m.conn.ExecCtx(ctx, query, args...)
	return err
}

//操作权限
func (m *defaultTasksModel) GetOperationList(ctx context.Context, uid int64) (*[]OperationList, error) {
	query := `SELECT
	* 
FROM
	(
	SELECT
		a.id,
		a.name,
		a.url,
		a.parent_id,
		a.order_num,
		a.tp,
		b.role_id,
		b.user_id 
	FROM
		sys_menu a
		INNER JOIN ( SELECT sys_role_menu.*, sys_user_role.user_id FROM sys_user_role, sys_role_menu WHERE sys_user_role.role_id = sys_role_menu.role_id ) b ON a.id = b.menu_id 
		AND a.tp IN ( 2, 3 ) 
	) c 
WHERE
	user_id = %d 
GROUP BY
	user_id,
	id
`

	query = fmt.Sprintf(query, uid)

	var resp []OperationList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

//根据正在执行的主任务id查询子任务id
func (m *defaultTasksModel) SelectRunningTaskById(ctx context.Context, id int64) (*TasksList, error) {
	all, err := m.FindAll(ctx, "id__=", id, "pid__=", int64(0))
	if err != nil {
		return nil, err
	}
	for _, v := range *all {
		second, err := m.FindAll(ctx, "pid__=", v.Id)
		if err != nil {
			return nil, err
		}
		for _, v2 := range *second {
			last, err := m.FindAll(ctx, "pid__=", v2.Id)
			if err != nil {
				return nil, err
			}
			for _, v3 := range *last {
				if v3.TaskStatus == 1 && v3.Level == 3 {
					return &v3, nil
				}
			}

		}
	}
	return nil, err
}
