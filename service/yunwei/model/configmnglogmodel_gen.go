// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"os"
	"path/filepath"
	"strings"
	"time"
	"ywadmin-v3/common/xfilters"
	"ywadmin-v3/service/yunwei/rpc/yunweiclient"
)

var (
	configMngLogFieldNames          = builder.RawFieldNames(&ConfigMngLog{})
	configMngLogRows                = strings.Join(configMngLogFieldNames, ",")
	configMngLogRowsExpectAutoSet   = strings.Join(stringx.Remove(configMngLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`remark`"), ",")
	configMngLogRowsWithPlaceHolder = strings.Join(stringx.Remove(configMngLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`remark`"), "=?,") + "=?"
)

type (
	configMngLogModel interface {
		FindAllList(ctx context.Context, filters ...interface{}) (*[]ConfigAllList, error)
		FindPageList(ctx context.Context, filters ...interface{}) (*[]ConfigFileDeyList, error)
		FindLogList(ctx context.Context, projectId int64) (*[]ConfigFileDeyListLog, error)
		TransactAdd(ctx context.Context, in *yunweiclient.AddConfigFileDeliveryReq, lockFilePath string) error
		FindShPlatformInfoList(ctx context.Context, filters ...interface{}) (*[]ShPlatFormInfo, error)
		FindShSplitIpAndRegionList(ctx context.Context, filters ...interface{}) (*[]ShSplitIpAndRegion, error)
	}

	defaultConfigMngLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ConfigMngLog struct {
		Id           int64     `db:"id"`
		AssetId      int64     `db:"asset_id"`
		ConfigFileId int64     `db:"config_file_id"`
		ConfigTime   int64     `db:"config_time"`
		CreateTime   time.Time `db:"create_time"`
		Remark       string    `db:"remark"`
	}
	NewConfigMngLog struct {
		Id           int64     `db:"id"`
		AssetId      int64     `db:"asset_id"`
		ConfigFileId int64     `db:"config_file_id"`
		ConfigTime   int64     `db:"config_time"`
		CreateTime   time.Time `db:"create_time"`
		Remark       string    `db:"remark"`
		FileModTime  int64     `db:"file_mod_time"`
	}

	ConfigAllList struct {
		AssetIps          string `db:"asset_ips"`
		ViewUserProjectId string `db:"view_user_project_id"`
		ViewUserProjectEn string `db:"view_user_project_en"`
	}

	ConfigFileDeyList struct {
		AssetIps          string `db:"asset_ips"`
		ViewUserProjectId string `db:"view_user_project_id"`
		ViewConfigFileId  string `db:"view_config_file_id"`
		ViewUserProjectEn string `db:"view_user_project_en"`
	}
	ConfigFileDeyListLog struct {
		ViewAssetDescribe  string `db:"view_asset_describe"`
		ViewConfigFileName string `db:"view_config_file_name"`
		ViewUserProjectCn  string `db:"view_user_project_cn"`
	}
	ShPlatFormInfo struct {
		ViewProjectId    sql.NullString `db:"view_project_id"`
		ViewProjectEn    sql.NullString `db:"view_project_en"`
		ViewProjectCn    sql.NullString `db:"view_project_cn"`
		ViewPlatformEn   sql.NullString `db:"view_platform_en"`
		ViewPlatformInfo sql.NullString `db:"view_platform_info"`
	}

	ShSplitIpAndRegion struct {
		ViewProjectId         sql.NullString `db:"view_project_id"`
		ViewProjectEn         sql.NullString `db:"view_project_en"`
		ViewProjectCn         sql.NullString `db:"view_project_cn"`
		ViewSingleIpPool      sql.NullString `db:"view_single_ip_pool"`
		ViewCrossIpPool       sql.NullString `db:"view_cross_ip_pool"`
		ViewSplitSingleRegion sql.NullString `db:"view_split_single_region"`
		ViewSplitCrossRegion  sql.NullString `db:"view_split_cross_region"`
	}
)

var (
	fileList = `#按文件:集群->机器分类->机器
select concat('{"list":[',group_concat(asset_ips order by view_cluster_name),']}') as asset_ips,
				view_user_project_id,view_config_file_id,view_user_project_en
from (
		#BEGIN B 集群分类列表
		select concat('{"children":[',group_concat(asset_ips order by view_host_sort),
				'],"label":"集群',view_cluster_name,'","value":"集群',view_cluster_name,'"}') as asset_ips,
				view_user_project_id,view_user_project_en,view_cluster_name,view_config_file_id,view_config_file_name,view_config_dest_path
		from (
				#BEGIN A 机器分类列表
				select concat('{"children":[',group_concat(concat('{"label":"',view_asset_describe,
						'","value":"',view_asset_id,':',view_outer_ip,':',view_ssh_port,'"}')
						order by view_asset_id desc),'],"label":"',view_host_sort,'","value":"',view_host_sort,'"}') as asset_ips,
						view_host_sort,view_user_project_id,view_user_project_en,view_cluster_name,
						view_config_file_id,view_config_file_name,view_config_dest_path
				from view_asset_config_file
				group by view_user_project_id,view_cluster_name,view_host_sort,view_config_file_id
				#END A
		) A
		group by view_user_project_id,view_cluster_name,view_config_file_id
		#END B
) B
#where view_user_project_id=1 and view_config_file_id=1
%s
group by view_user_project_id,view_config_file_id;
`
	allList = `#全:集群->机器分类->机器
select concat('{"list":[',group_concat(asset_ips order by view_cluster_name),']}') as asset_ips,
				view_user_project_id,view_user_project_en
from (
		#BEGIN B 集群分类列表
		select concat('{"children":[',group_concat(asset_ips order by view_host_sort),
				'],"label":"集群',view_cluster_name,'","value":"集群',view_cluster_name,'"}') as asset_ips,
				view_user_project_id,view_user_project_en,view_cluster_name
		from (
				#BEGIN A 机器分类列表
				select concat('{"children":[',group_concat(concat('{"label":"',view_asset_describe,
						'","value":"',view_asset_id,':',view_outer_ip,':',view_ssh_port,'"}')
						order by view_asset_id desc),'],"label":"',view_host_sort,'","value":"',view_host_sort,'"}') as asset_ips,
						view_host_sort,view_user_project_id,view_user_project_en,view_cluster_name
				from (#BEGIN view_asset_config_file
						select view_assets.view_asset_id,view_outer_ip,view_inner_ip,view_en_host_role,view_provider_name_cn,
								case view_en_host_role
										when 'game' then '游戏服'
										when 'cross' then '跨服'
										else '其他'
								end as view_host_sort,
								concat(view_outer_ip,'_',view_inner_ip,'_',view_provider_name_cn,'_',view_en_host_role) as view_asset_describe,view_ssh_port,
								view_user_project_id,view_user_project_cn,view_user_project_en,
								ifnull(view_user_asset.view_cluster_name,'') as view_cluster_name
						from view_assets left join view_user_asset on view_assets.view_asset_id=view_user_asset.view_asset_id
						where view_recycle_type=2 and view_asset_del_flag=0 and view_user_project_deleted=-1
						#END view_asset_config_file
				) view_asset_config_file
				group by view_user_project_id,view_cluster_name,view_host_sort
				#END A
		) A
		group by view_user_project_id,view_cluster_name
		#END B
) B
#where view_user_project_id=1
%s
group by view_user_project_id;
`
	getShPlatFormInfoRows = `SELECT
	view_project_id,
	view_project_en,
	view_project_cn,
	view_platform_en,
	IFNULL(view_platform_info,'') view_platform_info 
FROM
	view_sh_platform_info
%s
`
	getShSplitIpAndRegionRows = `SELECT
	view_project_id,
	view_project_en,
	view_project_cn,
	view_single_ip_pool,
	view_cross_ip_pool,
	view_split_single_region,
	view_split_cross_region 
FROM
	view_sh_split_ip_and_region
%s
`
)

func newConfigMngLogModel(conn sqlx.SqlConn) *defaultConfigMngLogModel {
	return &defaultConfigMngLogModel{
		conn:  conn,
		table: "`config_mng_log`",
	}
}

func (m *defaultConfigMngLogModel) tableName() string {
	return m.table
}

func (m *defaultConfigMngLogModel) FindShPlatformInfoList(ctx context.Context, filters ...interface{}) (*[]ShPlatFormInfo, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query := fmt.Sprintf(getShPlatFormInfoRows, condition)
	var resp []ShPlatFormInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultConfigMngLogModel) FindShSplitIpAndRegionList(ctx context.Context, filters ...interface{}) (*[]ShSplitIpAndRegion, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query := fmt.Sprintf(getShSplitIpAndRegionRows, condition)
	var resp []ShSplitIpAndRegion
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConfigMngLogModel) FindPageList(ctx context.Context, filters ...interface{}) (*[]ConfigFileDeyList, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query := fmt.Sprintf(fileList, condition)
	var resp []ConfigFileDeyList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConfigMngLogModel) FindAllList(ctx context.Context, filters ...interface{}) (*[]ConfigAllList, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query := fmt.Sprintf(allList, condition)
	var resp []ConfigAllList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConfigMngLogModel) FindLogList(ctx context.Context, projectId int64) (*[]ConfigFileDeyListLog, error) {
	query := `SELECT
	count(view_asset_describe) view_asset_describe,
	view_config_file_name ,
	view_user_project_cn 
FROM
	view_asset_config_file 
WHERE
	view_user_project_id = %d
GROUP BY
	view_config_file_name
`
	query = fmt.Sprintf(query, projectId)
	var resp []ConfigFileDeyListLog
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConfigMngLogModel) TransactAdd(ctx context.Context, in *yunweiclient.AddConfigFileDeliveryReq, lockFilePath string) error {

	err := m.conn.Transact(func(session sqlx.Session) error {

		for _, list := range in.ConfigFileData {
			queryList := make([]string, 0)
			lockFile := filepath.Join(lockFilePath, list.ProjectEn, "lock")
			for _, data := range list.List {
				queryList = append(queryList, fmt.Sprintf("(%d, %d, %d)", data.AssetId, data.ConfigFileId, data.ConfigTime))
			}

			query := fmt.Sprintf("REPLACE INTO %s (%s) values %s;", m.table, configMngLogRowsExpectAutoSet, strings.Join(queryList, ","))
			_, err := m.conn.Exec(query)
			if err != nil {
				os.Remove(lockFile)
				return err
			}
		}

		return nil
	})
	return err
}

func (m *defaultConfigMngLogModel) FindOne(ctx context.Context, fileId, assetId, projectId int64) (*NewConfigMngLog, error) {
	query := fmt.Sprintf("select A.*,B.file_mod_time from config_mng_log as A,config_file as B where A.config_file_id=B.id and `asset_id` = ? and `config_file_id` = ? and `project_id` = ? limit 1")
	var resp NewConfigMngLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, assetId, fileId, projectId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConfigMngLogModel) FindOneFile(ctx context.Context, projectId int64, fileName string) (*ConfigFile, error) {
	query := fmt.Sprintf("select * from config_file  where  `project_id` = ? and `name` = ? limit 1")
	var resp ConfigFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, projectId, fileName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
