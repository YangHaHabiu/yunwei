// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/pkg/errors"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"
	"ywadmin-v3/service/yunwei/rpc/yunweiclient"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	openPlanFieldNames          = builder.RawFieldNames(&OpenPlan{})
	openPlanRows                = strings.Join(openPlanFieldNames, ",")
	openPlanRowsExpectAutoSet   = strings.Join(stringx.Remove(openPlanFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	openPlanRowsWithPlaceHolder = strings.Join(stringx.Remove(openPlanFieldNames, "`id`", "`create_time`", "`update_time`", "`install_operator`", "`initdb_status`", "`initdb_operator`", "`del_flag`"), "=?,") + "=?"
)

type (
	openPlanModel interface {
		Insert(ctx context.Context, data *OpenPlan) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OpenPlan, error)
		FindOneByProjectIdPlatformIdServerId(ctx context.Context, projectId int64, platformId int64, serverId int64) (*OpenPlan, error)
		Update(ctx context.Context, data *OpenPlan) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, orderTmp string, filters ...interface{}) (*[]OpenPlanList, error)
		DeleteSoft(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]OpenPlanList, error)
		TransactInsert(ctx context.Context, list []*yunweiclient.OpenPlanCommon) error
		FindOneByPrIdAndPlIdAndSid(ctx context.Context, data *yunweiclient.OpenPlanCommon) (*OpenPlan, error)
		TransactBatchUpdateTime(ctx context.Context, list []*yunweiclient.OpenPlanBatchModifyOpenTimeData) error
		BatchUpdateStatus(ctx context.Context, ids string, status int64) error
	}

	defaultOpenPlanModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OpenPlan struct {
		Id              int64  `db:"id"`               // ID
		ProjectId       int64  `db:"project_id"`       // 项目ID
		PlatformId      int64  `db:"platform_id"`      // 平台ID
		ServerId        int64  `db:"server_id"`        // 服ID
		GameserverTitle string `db:"gameserver_title"` // 服务器名称
		OpenTime        string `db:"open_time"`        // 开服时间
		InstallStatus   string `db:"install_status"`   // 安装状态：0:未安装;1:已安装
		InstallOperator string `db:"install_operator"` // 安装人
		InitdbStatus    string `db:"initdb_status"`    // 清档状态：0:未清档;1:已清档
		InitdbOperator  string `db:"initdb_operator"`  // 清档人
		DelFlag         int64  `db:"del_flag"`         // 删除状态：0:未删除(数据使用中);1:已删除(回收)
		Remark          string `db:"remark"`
	}
	OpenPlanList struct {
		Id              int64  `db:"id"`               // ID
		ProjectId       int64  `db:"project_id"`       // 项目ID
		PlatformId      int64  `db:"platform_id"`      // 平台ID
		ServerId        int64  `db:"server_id"`        // 服ID
		GameserverTitle string `db:"gameserver_title"` // 服务器名称
		OpenTime        string `db:"open_time"`        // 开服时间
		InstallStatus   string `db:"install_status"`   // 安装状态：0:未安装;1:已安装
		InstallOperator string `db:"install_operator"` // 安装人
		InitdbStatus    string `db:"initdb_status"`    // 清档状态：0:未清档;1:已清档
		InitdbOperator  string `db:"initdb_operator"`  // 清档人
		DelFlag         int64  `db:"del_flag"`         // 删除状态：0:未删除(数据使用中);1:已删除(回收)
		ProjectCn       string `db:"project_cn"`
		PlatformCn      string `db:"platform_cn"`
		PlatformEn      string `db:"platform_en"`
		ClusterName     string `db:"cluster_name"`
		Remark          string `db:"remark"`
	}
)

func newOpenPlanModel(conn sqlx.SqlConn) *defaultOpenPlanModel {
	return &defaultOpenPlanModel{
		conn:  conn,
		table: "`open_plan`",
	}
}

func (m *defaultOpenPlanModel) FindOneByPrIdAndPlIdAndSid(ctx context.Context, data *yunweiclient.OpenPlanCommon) (*OpenPlan, error) {
	query := fmt.Sprintf("select %s from %s where `project_id` = ? and `platform_id` = ? and `server_id` = ? and `del_flag` = 0 limit 1", openPlanRows, m.table)
	var resp OpenPlan
	err := m.conn.QueryRowCtx(ctx, &resp, query, data.ProjectId, data.PlatformId, data.ServerId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

//事务插入数据
func (m *defaultOpenPlanModel) TransactInsert(ctx context.Context, list []*yunweiclient.OpenPlanCommon) error {
	insertsql := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, openPlanRowsExpectAutoSet)
	err := m.conn.Transact(func(session sqlx.Session) error {
		stmt, err := session.Prepare(insertsql)
		if err != nil {
			return err
		}
		defer stmt.Close()
		// 返回任何错误都会回滚事务
		for _, data := range list {
			sid, _ := m.FindOneByPrIdAndPlIdAndSid(ctx, data)
			if sid != nil {
				return errors.New("新增平台存在重复的信息，请检查")
			}
			data.InitdbStatus = "-1"
			data.InstallStatus = "-1"
			data.DelFlag = 0
			if _, err = stmt.ExecCtx(ctx, data.ProjectId, data.PlatformId, data.ServerId, data.GameserverTitle,
				data.OpenTime, data.InstallStatus, data.InstallOperator, data.InitdbStatus,
				data.InitdbOperator, data.DelFlag, data.Remark); err != nil {
				return err
			}
		}

		return nil
	})

	return err
}

//事务批量修改开服时间
func (m *defaultOpenPlanModel) TransactBatchUpdateTime(ctx context.Context, list []*yunweiclient.OpenPlanBatchModifyOpenTimeData) error {
	insertsql := fmt.Sprintf("update %s set `open_time` = ? where `id` = ?", m.table)
	err := m.conn.Transact(func(session sqlx.Session) error {
		stmt, err := session.Prepare(insertsql)
		if err != nil {
			return err
		}
		defer stmt.Close()
		// 返回任何错误都会回滚事务
		for _, data := range list {
			if _, err = stmt.ExecCtx(ctx, data.OpenTime, data.Id); err != nil {
				return err
			}
		}

		return nil
	})

	return err
}

func (m *defaultOpenPlanModel) Insert(ctx context.Context, data *OpenPlan) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, openPlanRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.PlatformId, data.ServerId, data.GameserverTitle, data.OpenTime, data.InstallStatus, data.InstallOperator, data.InitdbStatus, data.InitdbOperator, data.DelFlag)
	return ret, err
}

func (m *defaultOpenPlanModel) FindOne(ctx context.Context, id int64) (*OpenPlan, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? and `del_flag` = 0 limit 1", openPlanRows, m.table)
	var resp OpenPlan
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOpenPlanModel) FindOneByProjectIdPlatformIdServerId(ctx context.Context, projectId int64, platformId int64, serverId int64) (*OpenPlan, error) {
	var resp OpenPlan
	query := fmt.Sprintf("select %s from %s where `project_id` = ? and `platform_id` = ? and `server_id` = ? limit 1", openPlanRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, projectId, platformId, serverId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOpenPlanModel) Update(ctx context.Context, data *OpenPlan) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, openPlanRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.PlatformId, data.ServerId, data.GameserverTitle, data.OpenTime, data.InstallStatus, data.Remark, data.Id)
	return err
}

func (m *defaultOpenPlanModel) BatchUpdateStatus(ctx context.Context, ids string, status int64) error {
	query := fmt.Sprintf("update %s set install_status = %d where `id` in (%s)", m.table, status, ids)
	_, err := m.conn.ExecCtx(ctx, query)
	return err
}

func (m *defaultOpenPlanModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOpenPlanModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultOpenPlanModel) FindPageListByPage(ctx context.Context, page, pageSize int64, orderTmp string, filters ...interface{}) (*[]OpenPlanList, error) {
	query := `SELECT
	* 
FROM
	(
	SELECT
		open_plan.*,
		IFNULL( view_platform_label.view_platform_cn, '' ) platform_cn,
		IFNULL( view_platform_label.view_platform_en, '' ) platform_en,
		IFNULL( view_platform_label.view_project_cn, '' ) project_cn,
		IFNULL( CONCAT( view_platform_label.view_project_id, "_", view_platform_label.view_platform_id ), '' ) platform_ex,
		IFNULL( view_platform_label.view_label_id, '' ) cluster_id,
		IFNULL( view_platform_label.view_label_name, '' ) cluster_name 
	FROM
		open_plan
		LEFT JOIN view_platform_label ON open_plan.platform_id = view_platform_label.view_platform_id 
		AND open_plan.project_id = view_platform_label.view_project_id 
		AND view_platform_label.view_label_type = 1
	) A 
WHERE
	del_flag = 0 
%s
%s
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	if orderTmp == "" {
		orderTmp = "order by install_status,initdb_status,open_time desc,project_id desc,platform_id,server_id desc"
	}
	query = fmt.Sprintf(query, condition, orderTmp)

	var resp []OpenPlanList
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultOpenPlanModel) FindAll(ctx context.Context, filters ...interface{}) (*[]OpenPlanList, error) {
	query := `SELECT
	* 
FROM
	(
	SELECT
		open_plan.*,
		IFNULL( view_platform_label.view_platform_cn, '' ) platform_cn,
		IFNULL( view_platform_label.view_platform_en, '' ) platform_en,
		IFNULL( view_platform_label.view_project_cn, '' ) project_cn,
		IFNULL( CONCAT( view_platform_label.view_project_id, "_", view_platform_label.view_platform_id ), '' ) platform_ex,
		IFNULL( view_platform_label.view_label_id, '' ) cluster_id,
		IFNULL( view_platform_label.view_label_name, '' ) cluster_name  
	FROM
		open_plan
		LEFT JOIN view_platform_label ON open_plan.platform_id = view_platform_label.view_platform_id 
		AND open_plan.project_id = view_platform_label.view_project_id 
		AND view_platform_label.view_label_type = 1 
	) A 
WHERE
	del_flag = 0
%s
order by install_status,initdb_status,open_time desc,project_id desc,platform_id,server_id desc
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.table, condition)
	var resp []OpenPlanList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultOpenPlanModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := `SELECT
	count(*) count 
FROM
	(
	SELECT
		open_plan.*,
		IFNULL( view_platform_label.view_platform_cn, '' ) platform_cn,
		IFNULL( view_platform_label.view_platform_en, '' ) platform_en,
		IFNULL( view_platform_label.view_project_cn, '' ) project_cn,
		IFNULL( CONCAT( view_platform_label.view_project_id, "_", view_platform_label.view_platform_id ), '' ) platform_ex,
		IFNULL( view_platform_label.view_label_id, '' ) cluster_id,
		IFNULL( view_platform_label.view_label_name, '' ) cluster_name 
	FROM
		open_plan
		LEFT JOIN view_platform_label ON open_plan.platform_id = view_platform_label.view_platform_id 
		AND open_plan.project_id = view_platform_label.view_project_id 
		AND view_platform_label.view_label_type = 1 
	) A 
WHERE
	del_flag = 0
%s
order by install_status,initdb_status,open_time desc,project_id desc,platform_id,server_id desc
`
	query = fmt.Sprintf(query, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultOpenPlanModel) DeleteSoft(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, id)
	return err
}
