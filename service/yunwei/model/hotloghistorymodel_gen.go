// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"google.golang.org/grpc/metadata"
	"strings"
	"time"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hotLogHistoryFieldNames          = builder.RawFieldNames(&HotLogHistory{})
	hotLogHistoryRows                = strings.Join(hotLogHistoryFieldNames, ",")
	hotLogHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(hotLogHistoryFieldNames, "`id`", "`update_time`"), ",")
	hotLogHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(hotLogHistoryFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	hotLogHistoryModel interface {
		Insert(ctx context.Context, data *HotLogHistory, userId string) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HotLogHistory, error)
		Update(ctx context.Context, data *HotLogHistory) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context, filters ...interface{}) (*[]HotLogHistory, error)
	}

	defaultHotLogHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HotLogHistory struct {
		Id          int64  `db:"id"`
		HotTitle    string `db:"hot_title"`    // 热更标题
		ProjectId   int64  `db:"project_id"`   // 游戏名
		OperType    string `db:"oper_type"`    // 操作类型
		OperContent string `db:"oper_content"` // 操作日志
		OperStatus  int64  `db:"oper_status"`  // 操作状态 0 成功|1 失败
		CreateBy    string `db:"create_by"`    // 操作人
		CreateTime  int64  `db:"create_time"`  // 创建时间
	}
)

func newHotLogHistoryModel(conn sqlx.SqlConn) *defaultHotLogHistoryModel {
	return &defaultHotLogHistoryModel{
		conn:  conn,
		table: "`hot_log_history`",
	}
}

func (m *defaultHotLogHistoryModel) Insert(ctx context.Context, data *HotLogHistory, userId string) (sql.Result, error) {
	if userId == "" {
		if md, ok := metadata.FromIncomingContext(ctx); ok {
			data.CreateBy = md.Get("uid")[0]
		}
	} else {
		data.CreateBy = userId
	}

	data.CreateTime = time.Now().Unix()
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ? ,?)", m.table, hotLogHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.HotTitle, data.ProjectId, data.OperType, data.OperContent, data.OperStatus, data.CreateBy, data.CreateTime)
	return ret, err
}

//条件查询所有
func (m *defaultHotLogHistoryModel) FindAll(ctx context.Context, filters ...interface{}) (*[]HotLogHistory, error) {
	query := `SELECT * FROM %s %s order by create_time desc`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, m.table, condition)
	//fmt.Println(query)
	var resp []HotLogHistory
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHotLogHistoryModel) FindOne(ctx context.Context, id int64) (*HotLogHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", hotLogHistoryRows, m.table)
	var resp HotLogHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHotLogHistoryModel) Update(ctx context.Context, data *HotLogHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, hotLogHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.HotTitle, data.ProjectId, data.OperType, data.CreateBy, data.OperContent, data.OperStatus, data.Id)
	return err
}

func (m *defaultHotLogHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHotLogHistoryModel) tableName() string {
	return m.table
}
