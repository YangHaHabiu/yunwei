// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	configFileFieldNames          = builder.RawFieldNames(&ConfigFile{})
	configFileRows                = strings.Join(configFileFieldNames, ",")
	configFileRowsExpectAutoSet   = strings.Join(stringx.Remove(configFileFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	configFileRowsWithPlaceHolder = strings.Join(stringx.Remove(configFileFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	configFileModel interface {
		Insert(ctx context.Context, data *ConfigFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ConfigFile, error)
		Update(ctx context.Context, data *ConfigFile) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]ConfigFileList, error)
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]ConfigFileList, error)
		FindOneByNameAndPrId(ctx context.Context, id int64, name string) (*ConfigFile, error)
	}

	defaultConfigFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ConfigFile struct {
		Id          int64  `db:"id"`
		ProjectId   int64  `db:"project_id"`
		Name        string `db:"name"`
		DestPath    string `db:"dest_path"`
		FileModTime int64  `db:"file_mod_time"`
	}
	ConfigFileList struct {
		Id          int64  `db:"id"`
		ProjectId   int64  `db:"project_id"`
		Name        string `db:"name"`
		DestPath    string `db:"dest_path"`
		FileModTime int64  `db:"file_mod_time"`
		ProjectCn   string `db:"project_cn"`
		ProjectEn   string `db:"project_en"`
		AssetCounts int64  `db:"asset_counts"`
	}
)

func newConfigFileModel(conn sqlx.SqlConn) *defaultConfigFileModel {
	return &defaultConfigFileModel{
		conn:  conn,
		table: "`config_file`",
	}
}

func (m *defaultConfigFileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultConfigFileModel) FindOne(ctx context.Context, id int64) (*ConfigFile, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", configFileRows, m.table)
	var resp ConfigFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//根据名称和项目id查询单条
func (m *defaultConfigFileModel) FindOneByNameAndPrId(ctx context.Context, id int64, name string) (*ConfigFile, error) {
	query := fmt.Sprintf("select %s from %s where `project_id` = ? and `name` = ? limit 1", configFileRows, m.table)
	var resp ConfigFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConfigFileModel) Insert(ctx context.Context, data *ConfigFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, configFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.Name, data.DestPath, data.FileModTime)
	return ret, err
}

func (m *defaultConfigFileModel) Update(ctx context.Context, data *ConfigFile) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, configFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.Name, data.DestPath, data.FileModTime, data.Id)
	return err
}

func (m *defaultConfigFileModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultConfigFileModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]ConfigFileList, error) {
	query := `SELECT
	* 
FROM
	(
	SELECT
		cf.*,
		p.project_cn,
		p.project_en 
	FROM
		config_file cf
		INNER JOIN project p 
	WHERE
	cf.project_id = p.project_id 
	) A
%s
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, condition)
	var resp []ConfigFileList
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultConfigFileModel) FindAll(ctx context.Context, filters ...interface{}) (*[]ConfigFileList, error) {
	query := `SELECT
	A.*,IFNULL(B.asset_counts,0) asset_counts
FROM
	(
	SELECT
		cf.*,
		p.project_cn,
		p.project_en 
	FROM
		config_file cf
		INNER JOIN project p 
	WHERE
	cf.project_id = p.project_id 
	) A
	
	LEFT JOIN 
(
SELECT
	count(view_asset_describe) asset_counts,
	view_config_file_name,
	view_user_project_id,
	view_user_project_cn
FROM
	view_asset_config_file
GROUP BY
	view_user_project_id,view_config_file_name
) B
ON B.view_user_project_id=A.project_id and B.view_config_file_name=A.name
%s
ORDER BY project_id desc ,name
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, condition)
	//fmt.Println(query)
	var resp []ConfigFileList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultConfigFileModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := `SELECT
	count(*) count
FROM
	(
	SELECT
		cf.*,
		p.project_cn,
		p.project_en 
	FROM
		config_file cf
		INNER JOIN project p 
	WHERE
	cf.project_id = p.project_id 
	) A
%s
`
	query = fmt.Sprintf(query, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}
