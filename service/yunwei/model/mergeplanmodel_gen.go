// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/gogf/gf/util/gconv"
	"strings"
	"time"
	"ywadmin-v3/common/gconvx"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/server_range"
	"ywadmin-v3/common/tool"
	"ywadmin-v3/common/xerr"
	"ywadmin-v3/common/xfilters"
	"ywadmin-v3/service/yunwei/rpc/yunweiclient"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	mergePlanFieldNames          = builder.RawFieldNames(&MergePlan{})
	mergePlanRows                = strings.Join(mergePlanFieldNames, ",")
	mergePlanRowsExpectAutoSet   = strings.Join(stringx.Remove(mergePlanFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	mergePlanRowsWithPlaceHolder = strings.Join(stringx.Remove(mergePlanFieldNames, "`id`", "`create_time`", "`update_time`", "`merge_status`", "`merge_operator`", "`del_flag`"), "=?,") + "=?"
)

type (
	mergePlanModel interface {
		Insert(ctx context.Context, data *MergePlan) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MergePlan, error)
		FindOneByProjectIdPlatformIdServerIdCombineRangeDelFlag(ctx context.Context, projectId int64, platformId int64, serverId int64, combineRange string, delFlag int64) (*MergePlan, error)
		Update(ctx context.Context, data *yunweiclient.MergePlanCommon) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, orderTmp string, filters ...interface{}) (*[]MergePlanList, error)
		DeleteSoft(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]MergePlan, error)
		TransactInsert(ctx context.Context, list []*yunweiclient.MergePlanCommon) error
		FindAllRangeList(ctx context.Context, filters ...interface{}) (*[]MergePlanRangeList, error)
		SelectGameInfo(ctx context.Context, data *yunweiclient.MergePlanCommon) string
	}

	defaultMergePlanModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MergePlan struct {
		Id            int64  `db:"id"`             // ID
		ProjectId     int64  `db:"project_id"`     // 项目ID
		PlatformId    int64  `db:"platform_id"`    // 平台ID
		ServerId      int64  `db:"server_id"`      // 服ID
		InputRange    string `db:"input_range"`    //输入范围
		CombineRange  string `db:"combine_range"`  // 合服范围
		StartTime     string `db:"start_time"`     // 合服开始时间
		EndTime       string `db:"end_time"`       // 合服结束时间
		MergeStatus   int64  `db:"merge_status"`   // 合服状态：0:未合服;1:已合服
		MergeOperator string `db:"merge_operator"` // 合服人
		DelFlag       int64  `db:"del_flag"`       // 删除状态：0:未删除(数据使用中);1:已删除(回收)
	}
	MergePlanList struct {
		Id            int64  `db:"id"`          // ID
		ProjectId     int64  `db:"project_id"`  // 项目ID
		PlatformId    int64  `db:"platform_id"` // 平台ID
		ServerId      int64  `db:"server_id"`   // 服ID
		InputRange    string `db:"input_range"`
		CombineRange  string `db:"combine_range"`  // 合服范围
		StartTime     string `db:"start_time"`     // 合服开始时间
		EndTime       string `db:"end_time"`       // 合服结束时间
		MergeStatus   int64  `db:"merge_status"`   // 合服状态：0:未合服;1:已合服
		MergeOperator string `db:"merge_operator"` // 合服人
		DelFlag       int64  `db:"del_flag"`       // 删除状态：0:未删除(数据使用中);1:已删除(回收)
		ProjectCn     string `db:"project_cn"`
		PlatformCn    string `db:"platform_cn"`
		PlatformEn    string `db:"platform_en"`
		PlatformEx    string `db:"platform_ex"`
	}
	MergePlanRangeList struct {
		Data string `db:"data"`
	}

	ServerRangList struct {
		ProjectId    int64  `db:"project_id"`    // 项目ID
		PlatformId   int64  `db:"platform_id"`   // 平台ID
		ServerId     int64  `db:"server_id"`     // 服ID
		CombineRange string `db:"combine_range"` // 合服范围
	}
)

func newMergePlanModel(conn sqlx.SqlConn) *defaultMergePlanModel {
	return &defaultMergePlanModel{
		conn:  conn,
		table: "`merge_plan`",
	}
}

func (m *defaultMergePlanModel) SelectGameInfo(ctx context.Context, data *yunweiclient.MergePlanCommon) string {
	sql := `SELECT
	* 
FROM
	(
	SELECT
		game_server.project_id,
		game_server.platform_id,
		game_server.server_id,
	IF
		(
			length(
				trim(
				ifnull( combine_remark, '' )))= 0,
			game_server.server_id,
			substring(
				combine_remark,
				locate( '(', combine_remark )+ 2,
			char_length( combine_remark )- 3-locate ( '(', combine_remark ))) AS combine_remark 
	FROM
		game_server,
		open_plan 
	WHERE
		game_server.project_id = open_plan.project_id 
		AND game_server.platform_id = open_plan.platform_id 
		AND game_server.server_id = open_plan.server_id 
		AND game_server.server_status IN ( 1, 2 ) 
	) A 
WHERE
	project_id =%d
	and 
	platform_id = %d
	and
	server_id in (%s)
`
	tmp := make([]string, 0)
	idRange := strings.Join(gconvx.SliceStr(server_range.HandleServerIdRange(data.CombineRange)), ",")

	mergeSql := fmt.Sprintf(sql, data.ProjectId, data.PlatformId, idRange)
	var combineList = make([]struct {
		CombineRemark string `db:"combine_remark"`
	}, 0)
	err := m.conn.QueryRowsCtx(ctx, &combineList, mergeSql)
	if err != nil {
		return ""
	}
	for _, v := range combineList {
		if v.CombineRemark != "" {
			tmp = append(tmp, v.CombineRemark)
		}
	}
	if len(tmp) != 0 {
		str := gconvx.SliceInt(server_range.HandleServerIdRange(strings.Join(tmp, "/")))
		return gconv.String(server_range.HandleServerIdRange(str))
	}
	return ""
}

func (m *defaultMergePlanModel) TransactInsert(ctx context.Context, list []*yunweiclient.MergePlanCommon) error {
	insertsql := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?,?, ?, ?, ?, ?)", m.table, mergePlanRowsExpectAutoSet)

	err := m.conn.Transact(func(session sqlx.Session) error {
		stmt, err := session.Prepare(insertsql)
		if err != nil {
			return err
		}
		defer stmt.Close()

		// 返回任何错误都会回滚事务
		for index, data := range list {
			err = m.judgingValidity(ctx, data, index)
			if err != nil {
				return err
			}
			data.MergeStatus = -1
			//写入数据库
			if _, err = stmt.ExecCtx(ctx, data.ProjectId, data.PlatformId, data.ServerId, "", data.CombineRange,
				data.StartTime, data.EndTime, data.MergeStatus, data.MergeOperator, data.DelFlag,
			); err != nil {
				return err
			}
		}

		return nil
	})
	return err
}

func (m *defaultMergePlanModel) Insert(ctx context.Context, data *MergePlan) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?,?, ?, ?, ?, ?)", m.table, mergePlanRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.PlatformId, data.ServerId, data.InputRange, data.CombineRange, data.StartTime, data.EndTime, data.MergeStatus, data.MergeOperator, data.DelFlag)
	return ret, err
}

func (m *defaultMergePlanModel) FindOne(ctx context.Context, id int64) (*MergePlan, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", mergePlanRows, m.table)
	var resp MergePlan
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMergePlanModel) FindOneByProjectIdPlatformIdServerIdCombineRangeDelFlag(ctx context.Context, projectId int64, platformId int64, serverId int64, combineRange string, delFlag int64) (*MergePlan, error) {
	var resp MergePlan
	query := fmt.Sprintf("select %s from %s where `project_id` = ? and `platform_id` = ? and `server_id` = ? and `combine_range` = ? and `del_flag` = ? limit 1", mergePlanRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, projectId, platformId, serverId, combineRange, delFlag)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//判断合服范围及时间
func (m *defaultMergePlanModel) judgingValidity(ctx context.Context, data *yunweiclient.MergePlanCommon, index int) error {
	index = index + 1
	//校验范围
	//1、判断时间有效性
	if gconv.Int(data.StartTime) >= gconv.Int(data.EndTime) {
		return errors.New(fmt.Sprintf("第[%d]行错误，结束时间小于或等于开始时间", index))
	}
	//1.1 开始时间不能是以前的时间
	if gconv.Int64(data.StartTime) < time.Now().Unix() {
		return errors.New(fmt.Sprintf("第[%d]行错误，开始时间不能小于当前时间", index))
	}

	//2、判断当前时间点是否在多次相同合服范围
	mergeSql := fmt.Sprintf("SELECT combine_range,start_time,end_time FROM merge_plan WHERE  project_id=%d and platform_id=%d and merge_status=-1 and del_flag=0 and id != %d", data.ProjectId, data.PlatformId, data.Id)
	var combineList = make([]struct {
		StartTime    int    `db:"start_time"`
		EndTime      int    `db:"end_time"`
		CombineRange string `db:"combine_range"`
	}, 0)
	err := m.conn.QueryRowsCtx(ctx, &combineList, mergeSql)
	if err != nil {
		return err
	}
	allRange := make([]string, 0)
	allRange = gconv.SliceStr(server_range.HandleServerIdRange(data.CombineRange))
	for _, v := range combineList {
		idRange := server_range.HandleServerIdRange(v.CombineRange)
		intersection := server_range.ListIntersection(gconv.SliceInt(idRange), gconv.SliceInt(server_range.HandleServerIdRange(data.CombineRange)))
		//范围是否冲突
		if len(intersection) != 0 && !(v.StartTime > gconv.Int(data.EndTime) || v.EndTime < gconv.Int(data.StartTime)) {
			//时间是否冲突
			return errors.New(fmt.Sprintf("第[%d]行错误，当前时间点合服范围中的[%s]和输入的范围存在重合，请检查", index, v.CombineRange))
		}

	}
	//3、检测主服是否有效
	gameServerSql := fmt.Sprintf("select * from game_server WHERE server_id =%d and platform_id =%d and project_id =%d and server_status in (1,2)", data.ServerId, data.PlatformId, data.ProjectId)
	var gameServerList = make([]struct {
		ServerAlias   string `db:"server_alias"`
		ServerId      int    `db:"server_id"`
		CombineRemark string `db:"combine_remark"`
	}, 0)
	err = m.conn.QueryRowsCtx(ctx, &gameServerList, gameServerSql)
	if err != nil {
		return err
	}
	if len(gameServerList) != 1 {
		return xerr.NewErrMsg(fmt.Sprintf("第[%d]行错误，不存在的主服ID[%d]，请检查", index, data.ServerId))
	}
	//3.1、检测主服是否在被合服范围之内
	if !tool.StrInArr(gconv.String(data.ServerId), allRange) {
		return xerr.NewErrMsg(fmt.Sprintf("第[%d]行错误，主服ID[%d]不存在合服范围[%s]内，请检查", index, data.ServerId, data.CombineRange))
	}

	//4、判断当前范围是否存在game_server表（1，2）的中
	combineSql := fmt.Sprintf("SELECT count(*) as count FROM game_server WHERE project_id=%d and platform_id=%d and server_status in (1,2) and server_id in (%s) and del_flag=0", data.ProjectId, data.PlatformId, strings.Join(allRange, ","))
	var count int
	err = m.conn.QueryRowCtx(ctx, &count, combineSql)
	if err != nil {
		return err
	}
	if count < 2 {
		return errors.New(fmt.Sprintf("第[%d]行错误，只有一组合服，请检查", index))
	}
	//5、输入范围是否和合服备注一致
	info := m.SelectGameInfo(ctx, data)
	if info != data.CombineRange {
		return errors.New(fmt.Sprintf("第[%d]行错误，查询范围[%s]，输入范围与查询范围不一致，请检查", index, info))
	}
	return err
}

func (m *defaultMergePlanModel) Update(ctx context.Context, data *yunweiclient.MergePlanCommon) error {
	err := m.judgingValidity(ctx, data, 0)
	if err != nil {
		return err
	}

	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, mergePlanRowsWithPlaceHolder)
	_, err = m.conn.ExecCtx(ctx, query, data.ProjectId, data.PlatformId, data.ServerId, data.InputRange, data.CombineRange, data.StartTime, data.EndTime, data.Id)
	return err
}

func (m *defaultMergePlanModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMergePlanModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultMergePlanModel) FindPageListByPage(ctx context.Context, page, pageSize int64, orderTmp string, filters ...interface{}) (*[]MergePlanList, error) {
	query := `SELECT * FROM (
SELECT c.*,d.platform_cn,d.platform_en,CONCAT(c.project_id,'_',d.platform_id) platform_ex FROM (
SELECT a.*,b.project_cn FROM (
SELECT * from merge_plan where del_flag = 0
) a INNER JOIN project b ON a.project_id=b.project_id 
) c INNER JOIN (SELECT * from platform where del_flag=0 ) d ON c.platform_id=d.platform_id and c.project_id = d.project_id 
) e
WHERE del_flag=0
%s
%s
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	if orderTmp == "" {
		orderTmp = "ORDER BY merge_status,start_time desc,project_id desc,platform_id ,server_id"
	}
	query = fmt.Sprintf(query, condition, orderTmp)

	var resp []MergePlanList
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMergePlanModel) FindAllRangeList(ctx context.Context, filters ...interface{}) (*[]MergePlanRangeList, error) {
	query := `#合服计划
select concat('[',group_concat(level2),']') as data
from
(
		select project_id,platform_id,platform_en,platform_group,level,
		group_concat(concat('{',level1,'}') order by cast(substring_index(server_group,'-',1) as signed) asc) as level2
		from (
			select project_id,platform_id,platform_en,platform_group,level,server_group,
			concat('"children":[',group_concat(concat('{"label":"',server_title,'","value":"',server_id,'"}') order by server_id),'],"label":"',
			server_group,'","value":"',server_group,'"') as level1,count(server_id) as server_count
			from (
				select game_server.project_id,game_server.platform_id,game_server.server_id,platform_en,'' as platform_group,
				concat(game_server.server_id,if(length(trim(ifnull(open_plan.gameserver_title,' ')))=0,'',concat('_',open_plan.gameserver_title)),
				if(length(trim(ifnull(combine_remark,' ')))=0,'',concat('_',combine_remark))) as server_title,'3' as level,
				concat(floor((game_server.server_id-1)/20)*20+1,'-',floor((game_server.server_id-1)/20)*20+20) as server_group,open_plan.open_time
				from game_server,open_plan,platform
				where (game_server.project_id=open_plan.project_id and game_server.platform_id=open_plan.platform_id and game_server.server_id=open_plan.server_id)
				and game_server.server_status in (1,2)
				and (game_server.project_id=platform.project_id and game_server.platform_id=platform.platform_id)
				and platform.del_flag=0
				and open_plan.del_flag=0
				#and game_server.project_id=4 and game_server.platform_id=101
				%s
				order by game_server.project_id,game_server.platform_id,game_server.server_id
			) a
			group by project_id,platform_id,server_group
		) b
		group by project_id,platform_id
		order by platform_id		
) d
group by project_id;
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, condition)

	var resp []MergePlanRangeList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

//条件查询所有
func (m *defaultMergePlanModel) FindAll(ctx context.Context, filters ...interface{}) (*[]MergePlan, error) {
	query := "select * from %s where del_flag = %d %s"
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.table, globalkey.DelStateNo, condition)
	var resp []MergePlan
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultMergePlanModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	sql := `SELECT  count(*) as count FROM (
SELECT c.*,d.platform_cn,d.platform_en,CONCAT(c.project_id,'_',d.platform_id) platform_ex FROM (
SELECT a.*,b.project_cn FROM (
SELECT * from merge_plan where del_flag = 0
) a INNER JOIN project b ON a.project_id=b.project_id 
) c INNER JOIN (SELECT * from platform where del_flag=0 ) d ON c.platform_id=d.platform_id and c.project_id = d.project_id 
) e
WHERE del_flag=0
%s
`
	query := fmt.Sprintf(sql, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultMergePlanModel) DeleteSoft(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `id` = ? and del_flag=0", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, id)
	return err
}
