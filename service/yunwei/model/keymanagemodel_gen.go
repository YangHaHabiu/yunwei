// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	keyManageFieldNames          = builder.RawFieldNames(&KeyManage{})
	keyManageRows                = strings.Join(keyManageFieldNames, ",")
	keyManageRowsExpectAutoSet   = strings.Join(stringx.Remove(keyManageFieldNames, "`key_id`", "`create_time`", "`update_time`", "`del_flag`"), ",")
	keyManageRowsWithPlaceHolder = strings.Join(stringx.Remove(keyManageFieldNames, "`key_id`", "`create_time`", "`update_time`", "`del_flag`"), "=?,") + "=?"
)

type (
	keyManageModel interface {
		Insert(ctx context.Context, data *KeyManage) (sql.Result, error)
		FindOne(ctx context.Context, keyId int64) (*KeyManage, error)
		Update(ctx context.Context, data *KeyManage) error
		Delete(ctx context.Context, keyId int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]KeyManage, error)
		DeleteSoft(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]KeyManage, error)
	}

	defaultKeyManageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	KeyManage struct {
		KeyId   int64  `db:"key_id"`   // 密钥id
		KeyName string `db:"key_name"` // 密钥名称
		KeyPath string `db:"key_path"` // 密钥路径
		KeyPass string `db:"key_pass"` // 密钥密文
		KeyType string `db:"key_type"` // 密钥类型：1:临时key 2:个人key
		Remark  string `db:"remark"`   // 备注
		DelFlag int64  `db:"del_flag"` // 删除状态：0:未删除(数据使用中);1:已删除(回收)
	}
)

func newKeyManageModel(conn sqlx.SqlConn) *defaultKeyManageModel {
	return &defaultKeyManageModel{
		conn:  conn,
		table: "`key_manage`",
	}
}

func (m *defaultKeyManageModel) Insert(ctx context.Context, data *KeyManage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, keyManageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.KeyName, data.KeyPath, data.KeyPass, data.KeyType, data.Remark)
	return ret, err
}

func (m *defaultKeyManageModel) FindOne(ctx context.Context, keyId int64) (*KeyManage, error) {
	query := fmt.Sprintf("select %s from %s where `key_id` = ? limit 1", keyManageRows, m.table)
	var resp KeyManage
	err := m.conn.QueryRowCtx(ctx, &resp, query, keyId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultKeyManageModel) Update(ctx context.Context, data *KeyManage) error {
	query := fmt.Sprintf("update %s set %s where `key_id` = ?", m.table, keyManageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.KeyName, data.KeyPath, data.KeyPass, data.KeyType, data.Remark, data.KeyId)
	return err
}

func (m *defaultKeyManageModel) Delete(ctx context.Context, keyId int64) error {
	query := fmt.Sprintf("delete from %s where `key_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, keyId)
	return err
}

func (m *defaultKeyManageModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultKeyManageModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]KeyManage, error) {
	query := `SELECT * from %s where del_flag = %d
%s
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.table, globalkey.DelStateNo, condition)

	var resp []KeyManage
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultKeyManageModel) FindAll(ctx context.Context, filters ...interface{}) (*[]KeyManage, error) {
	query := "select * from %s where del_flag = %d %s"
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.table, globalkey.DelStateNo, condition)
	var resp []KeyManage
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultKeyManageModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select count(*) as count from %s where del_flag = %d %s", m.table, globalkey.DelStateNo, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultKeyManageModel) DeleteSoft(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `key_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, id)
	return err
}
