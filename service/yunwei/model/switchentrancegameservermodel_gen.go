// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	switchEntranceGameserverFieldNames          = builder.RawFieldNames(&SwitchEntranceGameserver{})
	switchEntranceGameserverRows                = strings.Join(switchEntranceGameserverFieldNames, ",")
	switchEntranceGameserverRowsExpectAutoSet   = strings.Join(stringx.Remove(switchEntranceGameserverFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	switchEntranceGameserverRowsWithPlaceHolder = strings.Join(stringx.Remove(switchEntranceGameserverFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`state`"), "=?,") + "=?"
)

type (
	switchEntranceGameserverModel interface {
		Insert(ctx context.Context, data *SwitchEntranceGameserver) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SwitchEntranceGameserver, error)
		Update(ctx context.Context, data *SwitchEntranceGameserver) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]SwitchEntranceGameserverNew, error)
		DeleteSoft(ctx context.Context, ids, option string) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]SwitchEntranceGameserverNew, error)
	}

	defaultSwitchEntranceGameserverModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SwitchEntranceGameserver struct {
		Id             int64  `db:"id"`               // 自增
		ProjectId      int64  `db:"project_id"`       // 项目
		PlatformId     int64  `db:"platform_id"`      // 平台
		ConfigJsonPath string `db:"config_json_path"` // config.json文件路径
		State          int64  `db:"state"`            // 状态值 1：开入口 2：关入口
	}

	SwitchEntranceGameserverNew struct {
		Id             int64  `db:"id"`               // 自增
		ProjectId      int64  `db:"project_id"`       // 项目
		PlatformId     int64  `db:"platform_id"`      // 平台
		ProjectCn      string `db:"project_cn"`       // 项目
		PlatformEn     string `db:"platform_en"`      // 平台
		ConfigJsonPath string `db:"config_json_path"` // config.json文件路径
		State          int64  `db:"state"`            // 状态值 1：开入口 2：关入口
	}
)

func newSwitchEntranceGameserverModel(conn sqlx.SqlConn) *defaultSwitchEntranceGameserverModel {
	return &defaultSwitchEntranceGameserverModel{
		conn:  conn,
		table: "`switch_entrance_gameserver`",
	}
}

func (m *defaultSwitchEntranceGameserverModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSwitchEntranceGameserverModel) FindOne(ctx context.Context, id int64) (*SwitchEntranceGameserver, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", switchEntranceGameserverRows, m.table)
	var resp SwitchEntranceGameserver
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSwitchEntranceGameserverModel) Insert(ctx context.Context, data *SwitchEntranceGameserver) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, switchEntranceGameserverRowsExpectAutoSet)
	data.State = 1
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.PlatformId, data.ConfigJsonPath, data.State)
	return ret, err
}

func (m *defaultSwitchEntranceGameserverModel) Update(ctx context.Context, data *SwitchEntranceGameserver) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, switchEntranceGameserverRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.PlatformId, data.ConfigJsonPath, data.Id)
	return err
}

func (m *defaultSwitchEntranceGameserverModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultSwitchEntranceGameserverModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]SwitchEntranceGameserverNew, error) {
	query := `SELECT * FROM (
SELECT
	switch_entrance_gameserver.*,
	project.project_cn,
	platform.platform_en 
FROM
	switch_entrance_gameserver
	LEFT JOIN project ON project.project_id = switch_entrance_gameserver.project_id
	LEFT JOIN platform ON platform.project_id = switch_entrance_gameserver.project_id 
	AND platform.platform_id = switch_entrance_gameserver.platform_id
) A
where 1=1
%s
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, condition)

	var resp []SwitchEntranceGameserverNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultSwitchEntranceGameserverModel) FindAll(ctx context.Context, filters ...interface{}) (*[]SwitchEntranceGameserverNew, error) {
	query := `SELECT * FROM (
SELECT
	switch_entrance_gameserver.*,
	project.project_cn,
	platform.platform_en 
FROM
	switch_entrance_gameserver
	LEFT JOIN project ON project.project_id = switch_entrance_gameserver.project_id
	LEFT JOIN platform ON platform.project_id = switch_entrance_gameserver.project_id 
	AND platform.platform_id = switch_entrance_gameserver.platform_id
) A
where 1=1
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.table, globalkey.DelStateNo, condition)
	var resp []SwitchEntranceGameserverNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultSwitchEntranceGameserverModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	sql := `SELECT count(*) FROM (
SELECT
	switch_entrance_gameserver.*,
	project.project_cn,
	platform.platform_en 
FROM
	switch_entrance_gameserver
	LEFT JOIN project ON project.project_id = switch_entrance_gameserver.project_id
	LEFT JOIN platform ON platform.project_id = switch_entrance_gameserver.project_id 
	AND platform.platform_id = switch_entrance_gameserver.platform_id
) A
where 1=1
%s
`
	query := fmt.Sprintf(sql, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultSwitchEntranceGameserverModel) DeleteSoft(ctx context.Context, ids, options string) error {
	state := 1
	if options == "stop" {
		state = 2
	}
	query := fmt.Sprintf("update %s set `state`=? where `id` in (%s)", m.table, ids)
	_, err := m.conn.ExecCtx(ctx, query, state)
	return err

}
