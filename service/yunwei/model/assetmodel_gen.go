// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"github.com/gogf/gf/util/gconv"
	"github.com/pkg/errors"
	"google.golang.org/grpc/metadata"
	"io/ioutil"
	"net/url"
	"path/filepath"
	"strings"
	"time"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/tool"
	"ywadmin-v3/common/xcmd"
	"ywadmin-v3/common/xfilters"
	"ywadmin-v3/service/yunwei/rpc/yunweiclient"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	assetFieldNames             = builder.RawFieldNames(&Asset{})
	assetRows                   = strings.Join(assetFieldNames, ",")
	assetRowsExpectAutoSet      = strings.Join(stringx.Remove(assetFieldNames, "`asset_id`", "`create_time`", "`update_time`", "`recycle_type`", "`del_flag`"), ",")
	assetRowsWithPlaceHolder    = strings.Join(stringx.Remove(assetFieldNames, "`asset_id`", "`create_time`", "`update_time`"), "=?,") + "=?"
	assetRowsWithPlaceNewHolder = strings.Join(stringx.Remove(assetFieldNames, "`asset_id`", "`create_time`", "`update_time`", "`change_status_remark`", "`init_login_info`", "`del_flag`", "`recycle_type`"), "=?,") + "=?"
)

type (
	assetModel interface {
		Insert(ctx context.Context, data *Asset) (sql.Result, error)
		FindOne(ctx context.Context, assetId int64) (*Asset, error)
		FindOneByOuterIpDelFlag(ctx context.Context, outerIp string, delFlag int64) (*Asset, error)
		Update(ctx context.Context, data *Asset) error
		Delete(ctx context.Context, assetId int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]ViewAssets, error)
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]ViewAssets, error)
		BulkInserter(ctx context.Context, in *yunweiclient.AssetAddReq) error
		UpdateNews(ctx context.Context, uname string, data *yunweiclient.AssetUpdateReq, InitScriptPath string) error
		DeleteSoft(ctx context.Context, assetId int64) error
		RecycleDeleteSoft(ctx context.Context, assetId, recycleType int64, uname string) error
		FindWebSshTreeList(ctx context.Context, userId string, filters ...interface{}) (*WebSshTree, error)
		TransactBatchUpdate(ctx context.Context, in *yunweiclient.BatchDistributeReq, initConfig string) error
	}

	defaultAssetModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Asset struct {
		AssetId            int64     `db:"asset_id"` // 资产ID
		OuterIp            string    `db:"outer_ip"` // 公网IP
		InnerIp            string    `db:"inner_ip"` // 内网IP
		AccelerateDomain   string    `db:"accelerate_domain"`
		HostRoleId         string    `db:"host_role_id"`         // 服务器用途ID
		ProviderId         string    `db:"provider_id"`          // 云商ID
		HardwareInfo       string    `db:"hardware_info"`        // 服务器硬件信息
		SshPort            string    `db:"ssh_port"`             // SSH端口
		InitType           string    `db:"init_type"`            // 初始化状态：2:未初始化;1:已初始化
		CleanType          string    `db:"clean_type"`           // 清理状态：2:未清理;1:已清理
		RecycleType        string    `db:"recycle_type"`         // 回收状态：2:未回收;1:已回收
		InitLoginInfo      string    `db:"init_login_info"`      // 初始登录信息(用户、密码/key路径等,只在未初始化时需要此)
		ChangeStatusRemark string    `db:"change_status_remark"` // 状态变更备注信息(如初始化、清理、归还等信息),记录该操作时间,操作人,操作备注
		Remark             string    `db:"remark"`               // 备注信息
		CreateTime         time.Time `db:"create_time"`          // 创建时间
		UpdateTime         time.Time `db:"update_time"`          // 修改时间
		DelFlag            int64     `db:"del_flag"`             // 删除状态：0:未删除;1:已删除
	}
	ViewAssets struct {
		ViewAssetId                      sql.NullInt64  `db:"view_asset_id"`
		ViewOuterIp                      sql.NullString `db:"view_outer_ip"`
		ViewInnerIp                      sql.NullString `db:"view_inner_ip"`
		ViewHostRoleId                   sql.NullString `db:"view_host_role_id"`
		ViewHostRoleCn                   sql.NullString `db:"view_host_role_cn"`
		ViewEnHostRole                   sql.NullString `db:"view_en_host_role"`
		ViewProviderId                   sql.NullString `db:"view_provider_id"`
		ViewProviderNameEn               sql.NullString `db:"view_provider_name_en"`
		ViewProviderNameCn               sql.NullString `db:"view_provider_name_cn"`
		ViewHardwareInfo                 sql.NullString `db:"view_hardware_info"`
		ViewSshPort                      sql.NullString `db:"view_ssh_port"`
		ViewInitType                     sql.NullString `db:"view_init_type"`
		ViewCleanType                    sql.NullString `db:"view_clean_type"`
		ViewRecycleType                  sql.NullString `db:"view_recycle_type"`
		ViewInitLoginInfo                sql.NullString `db:"view_init_login_info"`
		ViewChangeStatusRemark           sql.NullString `db:"view_change_status_remark"`
		ViewRemark                       sql.NullString `db:"view_remark"`
		ViewAssetCreateTime              sql.NullString `db:"view_asset_create_time"`
		ViewAssetUpdateTime              sql.NullString `db:"view_asset_update_time"`
		ViewAssetDelFlag                 sql.NullInt64  `db:"view_asset_del_flag"`
		ViewPrId                         sql.NullString `db:"view_pr_id"`
		ViewAssetOwnershipCompanyId      sql.NullInt64  `db:"view_asset_ownership_company_id"`
		ViewAssetOwnershipCompanyCn      sql.NullString `db:"view_asset_ownership_company_cn"`
		ViewAssetOwnershipCompanyEn      sql.NullString `db:"view_asset_ownership_company_en"`
		ViewAssetOwnershipCompanyDeleted sql.NullInt64  `db:"view_asset_ownership_company_deleted"`
		ViewServerAffiliationDeleted     sql.NullInt64  `db:"view_server_affiliation_deleted"`
		ViewUserCompanyId                sql.NullInt64  `db:"view_user_company_id"`
		ViewUserCompanyCn                sql.NullString `db:"view_user_company_cn"`
		ViewUserCompanyEn                sql.NullString `db:"view_user_company_en"`
		ViewUserCompanyDeleted           sql.NullInt64  `db:"view_user_company_deleted"`
		ViewUserProjectId                sql.NullInt64  `db:"view_user_project_id"`
		ViewUserProjectCn                sql.NullString `db:"view_user_project_cn"`
		ViewUserProjectEn                sql.NullString `db:"view_user_project_en"`
		ViewUserProjectDeleted           sql.NullInt64  `db:"view_user_project_deleted"`
		LabelNames                       sql.NullString `db:"label_names"`
		ViewAccelerateDomain             sql.NullString `db:"view_accelerate_domain"`
	}
	WebSshTree struct {
		CompanyHost sql.NullString `db:"company_host"`
	}

	ProjectRelationship struct {
		Id        int64 `db:"id"`         // ID
		CompanyId int64 `db:"company_id"` // 公司ID
		ProjectId int64 `db:"project_id"` // 资产ID
	}
	//定义初始化配置//{"ssh_port": 22, "ssh_user": "root", "ssh_key_id": 1, "ssh_password": "123456"}
	InitLoginInfoConfig struct {
		SshPort     string `json:"ssh_port"`
		SshUser     string `json:"ssh_user"`
		SshKeyId    int64  `json:"ssh_key_id"`
		SshPassword string `json:"ssh_password"`
	}
	AssetProjectInfo struct {
		ViewUserProjectEn string `db:"view_user_project_en"`
		ViewAssetId       int64  `db:"view_asset_id"`
		ViewInitLoginInfo string `db:"view_init_login_info"`
		ViewEnHostRole    string `db:"view_en_host_role"`
		ViewOuterIp       string `db:"view_outer_ip"`
		ViewClusterName   string `db:"view_cluster_name"`
	}
)

func newAssetModel(conn sqlx.SqlConn) *defaultAssetModel {
	return &defaultAssetModel{
		conn:  conn,
		table: "`asset`",
	}
}

func (m *defaultAssetModel) Insert(ctx context.Context, data *Asset) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, assetRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OuterIp, data.InnerIp, data.AccelerateDomain, data.HostRoleId, data.ProviderId, data.HardwareInfo, data.SshPort, data.InitType, data.CleanType, data.InitLoginInfo, data.ChangeStatusRemark, data.Remark)
	return ret, err
}

func (m *defaultAssetModel) FindOne(ctx context.Context, assetId int64) (*Asset, error) {
	query := fmt.Sprintf("select %s from %s where `asset_id` = ? limit 1", assetRows, m.table)
	var resp Asset
	err := m.conn.QueryRowCtx(ctx, &resp, query, assetId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetModel) FindOneByOuterIpDelFlag(ctx context.Context, outerIp string, delFlag int64) (*Asset, error) {
	var resp Asset
	query := fmt.Sprintf("select %s from %s where `outer_ip` = ? and `del_flag` = ? limit 1", assetRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, outerIp, delFlag)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetModel) Update(ctx context.Context, data *Asset) error {
	query := fmt.Sprintf("update %s set %s where `asset_id` = ?", m.table, assetRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OuterIp, data.InnerIp, data.HostRoleId, data.ProviderId, data.HardwareInfo, data.SshPort, data.InitType, data.CleanType, data.InitLoginInfo, data.ChangeStatusRemark, data.Remark, data.DelFlag, data.AssetId)
	return err
}

func (m *defaultAssetModel) UpdateNews(ctx context.Context, uname string, data *yunweiclient.AssetUpdateReq, InitScriptPath string) error {
	query := fmt.Sprintf("update %s set %s where `asset_id` = ?", m.table, assetRowsWithPlaceNewHolder)
	one, err2 := m.FindOne(ctx, data.Asset.AssetId)
	if err2 != nil {
		return err2
	}

	err := m.conn.Transact(func(session sqlx.Session) error {
		var (
			tmpx []ProjectRelationship
			prid int64
		)

		err := m.conn.QueryRowsCtx(ctx, &tmpx, "select * from project_relationship where project_id = ?", data.Asset.ProjectId)
		if err != nil {
			return err
		}
		if len(tmpx) != 1 {
			return errors.New("查询prid失败")
		} else {
			prid = tmpx[0].Id
		}
		updateSql := fmt.Sprintf("update server_affiliation set pr_id = %d,company_id = %d where asset_id = %d", prid, data.Asset.CompanyId, data.Asset.AssetId)
		_, err = m.conn.ExecCtx(ctx, updateSql)
		if err != nil {
			return err
		}

		if one.CleanType != "1" {
			if one.CleanType != data.Asset.CleanType {
				sql := fmt.Sprintf("update %s set change_status_remark=json_set(change_status_remark,'$.clean_info',JSON_OBJECT('clean_time','%s','clean_operator','%s')) where asset_id=%d", m.table, time.Now().Format("2006-01-02 15:04:05"), uname, data.Asset.AssetId)
				_, err = m.conn.ExecCtx(ctx, sql)
				if err != nil {
					return err
				}

			}
		} else {
			data.Asset.CleanType = "1"
		}
		if one.InitType != "1" {
			if one.InitType != data.Asset.InitType {
				sql := fmt.Sprintf(`update %s set change_status_remark=json_set(change_status_remark,"$.init_info",JSON_OBJECT("init_time","%s","init_operator","%s")) where asset_id=%d`, m.table, time.Now().Format("2006-01-02 15:04:05"), uname, data.Asset.AssetId)
				_, err = m.conn.ExecCtx(ctx, sql)
				if err != nil {
					return err
				}
				//生成文件
				err := m.initScriptCreate(gconv.String(one.AssetId), InitScriptPath)
				if err != nil {
					return err
				}

			}
		} else {
			//判断game_server 状态是否全为0,3，才能进行修改清理操作
			data.Asset.InitType = "1"
		}

		if data.Asset.CleanType == "1" {
			var count int64
			sql := fmt.Sprintf("SELECT count(*) as count FROM game_server WHERE asset_id=%d and server_status not in (0,3)", data.Asset.AssetId)
			err = m.conn.QueryRowCtx(ctx, &count, sql)
			if err != nil {
				return err
			}
			if count != 0 {
				return errors.New("存在线上服，禁止修改清理状态")
			}
		}

		stmt, err := session.Prepare(query)
		if err != nil {
			return err
		}
		_, err = stmt.ExecCtx(ctx, data.Asset.OuterIp, data.Asset.InnerIp, data.Asset.AccelerateDomain, data.Asset.HostRoleId, data.Asset.ProviderId, data.Asset.HardwareInfo, data.Asset.SshPort, data.Asset.InitType, data.Asset.CleanType, data.Asset.Remark, data.Asset.AssetId)
		if err != nil {
			return err
		}

		return err
	})
	if err != nil {
		return err
	}
	return nil

}

//执行生成初始化脚本
func (m *defaultAssetModel) initScriptCreate(assetIds string, initConfig string) error {
	sql := `SELECT
	view_user_project_en,
	view_assets.view_asset_id,
	view_init_login_info,
	view_en_host_role,
	view_outer_ip,
	view_cluster_name 
FROM
	view_assets
	INNER JOIN view_user_asset ON view_assets.view_asset_id = view_user_asset.view_asset_id 
WHERE
	view_assets.view_asset_id in (%s)
`
	sql = fmt.Sprintf(sql, assetIds)
	var assetProjectInfo []AssetProjectInfo
	err := m.conn.QueryRows(&assetProjectInfo, sql)
	if err != nil {
		return err
	}
	//fmt.Println(sql)
	//fmt.Println(assetProjectInfo)
	if len(assetProjectInfo) > 0 {
		result := make([]string, 0)
		for _, one := range assetProjectInfo {
			var (
				roleName   string
				phpVersion = "PHP7"
				loginType  = "key"
				sshPass    string
			)
			var loginInfo InitLoginInfoConfig
			err = json.Unmarshal([]byte(one.ViewInitLoginInfo), &loginInfo)
			if err != nil {
				return err
			}
			if strings.Contains(one.ViewEnHostRole, "center") {
				roleName = "center"
			} else if one.ViewEnHostRole == "login,pay" {
				roleName = "paylogin"
			} else {
				roleName = one.ViewEnHostRole
			}
			if one.ViewUserProjectEn == "wdzt2" || one.ViewUserProjectEn == "mr" {
				phpVersion = "PHP5"
			}
			if loginInfo.SshKeyId == 0 {
				loginType = "password"
				sshPass = loginInfo.SshPassword
			} else {
				query := "select * from key_manage where key_id = ? and del_flag=0"
				var sshMng KeyManage
				err := m.conn.QueryRow(&sshMng, query, loginInfo.SshKeyId)
				if err != nil {
					return err
				}
				sshPass = sshMng.KeyPath
			}

			//#IP 主机名 [PHP版本]  [SSH端口:SSH用户名:登录方式[key|passwd]:密钥路径|密码]
			line := fmt.Sprintf("gatfile %s %s_%s_%s %s %s:%s:%s:%s ",
				one.ViewOuterIp,
				one.ViewUserProjectEn,
				strings.ToLower(one.ViewClusterName),
				roleName,
				phpVersion,
				loginInfo.SshPort,
				loginInfo.SshUser,
				loginType,
				sshPass,
			)
			result = append(result, line)
		}
		str := strings.Join(result, "\n")
		err = ioutil.WriteFile(filepath.Join(initConfig, "web_create_list.txt"), []byte(str+"\n"), 0666)
		if err != nil {
			return err
		}
		//执行脚本
		scriptCmd := fmt.Sprintf("cd %s;sh 01_push.sh web_create_list.txt", initConfig)
		fmt.Println("------------------初始化脚本命令")
		fmt.Println(scriptCmd)
		go func() {
			job := xcmd.NewCommandJob(10*time.Minute, scriptCmd)
			if !job.IsOk {
				fmt.Println("初始化脚本执行失败：", job.ErrMsg)
			}
			if job.IsTimeout {
				fmt.Println("初始化脚本执行超时")
			}
			fmt.Println("初始化脚本执行成功...")
		}()

	} else {
		return errors.New("查询初始化信息失败")
	}
	return nil
}

func (m *defaultAssetModel) Delete(ctx context.Context, assetId int64) error {
	query := fmt.Sprintf("delete from %s where `asset_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, assetId)
	return err
}

func (m *defaultAssetModel) tableName() string {
	return m.table
}

func (m *defaultAssetModel) FindWebSshTreeList(ctx context.Context, userId string, filters ...interface{}) (*WebSshTree, error) {
	query := `#可根据不同用户，不同项目返回CRT列表
select concat('{"key":"公司","value":"公司","children":[',group_concat(all_host order by view_user_project_en),']}') as company_host
from (
		#BEGIN all_A
		select concat('{"key":"',view_user_project_en,'","value":"',view_user_project_en,'","children":[',group_concat(game order by sort_num asc),']}') as all_host,
				view_user_project_en
		from (
				#BEGIN game C
				select concat('{"key":"game","value":"game","children":[',group_concat(platform order by platform_en),']}') as game,
						view_user_project_en,'1' as sort_num,view_user_project_id
				from (
						#BEGIN game B
						select concat('{"key":"',platform_en,'","value":"',platform_en,'","children":[',group_concat(platform_server order by server_id),']}') as platform,
								view_user_project_en,platform_en,view_user_project_id
						from (
								#BEGIN game A
								select concat('{"key":"',server_alias,'_',view_outer_ip,'_',view_provider_name_en,if(length(trim(combine_remark))=0,'',concat('_',combine_remark)),
										'","hostname":"',view_outer_ip,'","sshPort":"',view_ssh_port,'","cluster":"',view_cluster_name,'"}') as platform_server,
										view_user_project_en,platform_en,server_id,view_user_project_id,view_user_id
								from (
										select view_asset_id,view_user_id,view_outer_ip,view_ssh_port,view_host_role_id,view_en_host_role,view_provider_name_cn,view_provider_name_en,
												view_asset_ownership_company_id,view_asset_ownership_company_en,view_cluster_name,
												view_user_project_id,view_user_project_en,
												game_server_autoid,platform_autoid,platform_en,server_id,server_alias,asset_id,combine_remark
										from (
												select view_assets.*,ifnull(view_user_asset.view_user_id,'') as view_user_id,ifnull(view_user_asset.view_cluster_name,'')as view_cluster_name
												from view_assets left join view_user_asset on view_assets.view_asset_id=view_user_asset.view_asset_id
										) view_assets,(
												select game_server.id as game_server_autoid,platform.id as platform_autoid,
												game_server.project_id,platform.platform_id,platform_en,server_id,
												server_alias,asset_id,combine_remark
												from game_server,platform
												where game_server.project_id=platform.project_id and game_server.platform_id=platform.platform_id
												and game_server.del_flag=0
												and platform.del_flag=0
												and game_server.server_status in (1,2,5)
										) new_game_server
										where view_assets.view_asset_id=new_game_server.asset_id
								) A
								where FIND_IN_SET(%s,view_user_id)>=1	#END game A
						) B
						group by view_user_project_en,platform_en	#END game B
				) C
				group by view_user_project_en	#END game C
				union
				#BEGIN other C
				select concat('{"key":"other","value":"other","children":[',group_concat(host order by view_asset_ownership_company_en),']}') as game,
						view_user_project_en,'2' as sort_num,view_user_project_id
				from (
						#BEGIN other B
						select concat('{"key":"',company_provider_name,'","value":"',company_provider_name,
								'","children":[',group_concat(host_server order by view_en_host_role),']}') as host,
								view_asset_ownership_company_en,view_user_project_en,view_user_project_id
						from (
								#BEGIN other A
								select concat('{"key":"',view_user_project_en,'_',view_en_host_role,'_',view_outer_ip,'_',view_remark,'","hostname":"',view_outer_ip,
										'","sshPort":"',view_ssh_port,'","cluster":"',view_cluster_name,'"}') as host_server,
										view_en_host_role,concat(view_asset_ownership_company_en,'_',view_provider_name_cn,'_',view_provider_name_en,'_',view_cluster_name) as company_provider_name,
										view_asset_ownership_company_en,
										view_user_project_en,view_user_project_id,view_user_id
								from (
										select view_outer_ip,view_ssh_port,view_en_host_role,view_provider_name_en,view_provider_name_cn,
												view_asset_ownership_company_en,view_asset_ownership_company_id,view_user_project_en,view_user_project_id,view_user_id,view_cluster_name,view_remark
										from (
												select view_assets.*,ifnull(view_user_asset.view_user_id,'') as view_user_id,ifnull(view_user_asset.view_cluster_name,'')as view_cluster_name
												from view_assets left join view_user_asset on view_assets.view_asset_id=view_user_asset.view_asset_id
												where view_user_project_deleted=-1 and view_recycle_type=2 and view_asset_del_flag=0
										) view_assets
								) A	
								where FIND_IN_SET(%s,view_user_id)>=1	#END other A
						) B
						group by view_user_project_en,company_provider_name	#END other B
				) C
				group by view_user_project_en	#END other C
		) all_A
		#where view_user_project_id in (4)     #条件语句
		%s
		group by view_user_project_en	#END all_A
) all_B;
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, userId, userId, condition)
	//fmt.Println(query)
	var resp WebSshTree
	err := m.conn.QueryRowCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]ViewAssets, error) {
	query := `select * 
from (#BEGIN A	#机器所绑定的标签
		SELECT a.*,GROUP_CONCAT(b.label_names order by label_type,label_id) as label_names
		FROM (
				select * from view_assets where view_asset_del_flag = %d
		) as a LEFT JOIN (
				SELECT lg.*,CONCAT(l.label_name,"(",l.label_values,")") label_names,label_type
				FROM label_global lg,label l
				WHERE lg.label_id=l.label_id
		) as b ON a.view_asset_id= b.binding_id AND b.resource_en="asset"
		GROUP BY a.view_asset_id
		ORDER BY view_init_type desc,view_asset_id desc,view_user_project_id desc#END A
) A
%s
limit ? offset ?
`

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, globalkey.DelStateNo, condition)
	var resp []ViewAssets
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetModel) FindAll(ctx context.Context, filters ...interface{}) (*[]ViewAssets, error) {
	query := `SELECT * from (
SELECT a.*,GROUP_CONCAT(b.label_names) as label_names FROM
(select * from view_assets where view_asset_del_flag = %d ) as a
LEFT JOIN (SELECT lg.*,CONCAT(l.label_name,"(",l.label_values,")") label_names FROM label_global lg,label l WHERE lg.label_id=l.label_id ) as b
ON a.view_asset_id= b.binding_id AND b.resource_en="asset"
GROUP BY a.view_asset_id
ORDER BY view_user_project_id,view_asset_id desc
) A
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, globalkey.DelStateNo, condition)
	var resp []ViewAssets
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf(`SELECT count(*) as count from (SELECT * from (
SELECT a.*,GROUP_CONCAT(b.label_names) as label_names FROM
(select * from view_assets where view_asset_del_flag = %d ) as a
LEFT JOIN (SELECT lg.*,CONCAT(l.label_name,"(",l.label_values,")") label_names FROM label_global lg,label l WHERE lg.label_id=l.label_id ) as b
ON a.view_asset_id= b.binding_id AND b.resource_en="asset"
GROUP BY a.view_asset_id
ORDER BY view_user_project_id,view_asset_id desc
) A
%s
) B
`, globalkey.DelStateNo, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultAssetModel) BulkInserter(ctx context.Context, in *yunweiclient.AssetAddReq) error {

	err := m.conn.Transact(func(session sqlx.Session) error {

		// 批量插入asset表
		for _, data := range in.Assetdata {
			var (
				assetTmp []Asset
				tmpx     []ProjectRelationship
			)
			err := m.conn.QueryRowsCtx(ctx, &assetTmp, "select * from asset where del_flag =0 and recycle_type = 2 and outer_ip = ?", data.OuterIp)
			if err != nil {
				return err
			}
			if len(assetTmp) != 0 {
				return errors.New("存在相同的ip" + data.OuterIp + "，请检查")
			}

			insertsql := fmt.Sprintf("insert into %s (%s) values (?,?,?,?,?,?,?,?,?,?,?,?)", m.table, assetRowsExpectAutoSet)

			stmt, err := session.Prepare(insertsql)
			if err != nil {
				return err
			}
			defer stmt.Close()

			result, err := stmt.Exec(data.OuterIp, data.InnerIp, data.AccelerateDomain, data.HostRoleId, data.ProviderId, data.HardwareInfo, data.SshPort, data.InitType, data.CleanType, data.InitLoginInfo, data.ChangeStatusRemark, data.Remark)
			if err != nil {
				return err
			}
			lastid, _ := result.LastInsertId()

			sqlpr := "select * from project_relationship where project_id= ?"
			err = m.conn.QueryRowsCtx(ctx, &tmpx, sqlpr, data.ProjectId)
			if err != nil {
				return err
			}
			var prid int64
			if len(tmpx) == 1 {
				prid = gconv.Int64(tmpx[0].Id)
			} else {
				return errors.New("查询关联prid错误")
			}
			//添加资产和出机方绑定
			sql := "INSERT INTO server_affiliation (pr_id,company_id,asset_id) values (?,?,?)"
			stmt, err = session.Prepare(sql)
			if err != nil {
				return err
			}
			_, err = stmt.ExecCtx(ctx, prid, data.CompanyId, lastid)
			if err != nil {
				return err
			}

			//添加集群关联
			if data.ClusterId != 0 {
				sql = "INSERT INTO label_global (label_id,resource_en,binding_id,project_id) values (?,?,?,?)"
				stmt, err = session.Prepare(sql)
				if err != nil {
					return err
				}
				_, err = stmt.ExecCtx(ctx, data.ClusterId, "asset", lastid, data.ProjectId)
				if err != nil {
					return err
				}
			}

		}

		return nil
	})
	if err != nil {
		return err
	}
	return nil
}

//资产软删除
func (m *defaultAssetModel) DeleteSoft(ctx context.Context, assetId int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `asset_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, assetId)
	if err != nil {
		return err
	}

	return err
}

//资产回收
func (m *defaultAssetModel) RecycleDeleteSoft(ctx context.Context, assetId, recycleType int64, uname string) error {
	query := fmt.Sprintf("update %s set `recycle_type`=? where `asset_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, recycleType, assetId)
	if err != nil {
		return err
	}
	query = fmt.Sprintf(`update %s set change_status_remark=json_set(change_status_remark,"$.recycle_info",JSON_OBJECT("recycle_time","%s","recycle_operator","%s")) where asset_id=?;`, m.table, time.Now().Format("2006-01-02 15:04:05"), uname)
	_, err = m.conn.ExecCtx(ctx, query, assetId)
	if err != nil {
		return err
	}
	return err
}

//事务批量修改
func (m *defaultAssetModel) TransactBatchUpdate(ctx context.Context, in *yunweiclient.BatchDistributeReq, initConfig string) error {
	// init_type clean_type recycle_type del_flag provider_id -- asset
	// project_id -- project_relationship 查询prid  server_affiliation 修改pr
	// company_id -- server_affiliation
	err := m.conn.Transact(func(session sqlx.Session) error {
		var (
			table     string
			prId      int64
			tmpx      []ProjectRelationship
			updateSql string
			uname     string
		)
		if in.Model == "project_id" {
			table = "server_affiliation"
			err := m.conn.QueryRowsCtx(ctx, &tmpx, "select * from project_relationship where project_id = ?", in.Value)
			if err != nil {
				return err
			}
			if len(tmpx) != 1 {
				return errors.New("查询项目关联公司prid失败")
			}
			prId = tmpx[0].Id
		} else if in.Model == "company_id" {
			table = "server_affiliation"
		} else if tool.StrInArr(in.Model, []string{
			"init_type",
			"clean_type",
			"recycle_type",
			"del_flag",
			"provider_id",
		}) {
			table = "asset"

		} else if in.Model == "host_role_id" {
			table = "asset"
		} else {
			return errors.New("model字段内容错误")
		}

		//定义需要初始化服务器ip列表
		initAssetList := make([]string, 0)
		for _, v := range strings.Split(in.AssetIds, ",") {
			one, _ := m.FindOne(ctx, gconv.Int64(v))
			if one == nil {
				return errors.New("资产不存在")
			}

			if one.InitType == "1" {
				if one.CleanType != "1" {
					if tool.StrInArr(in.Model, []string{
						"recycle_type", "project_id", "init_type", "del_flag",
					}) {
						return errors.New("已初始化，只能更改清理状态")
					}
				} else {
					if tool.StrInArr(in.Model, []string{
						"init_type", "project_id", "clean_type", "del_flag",
					}) {
						return errors.New("已初始化，已清理，只能更改回收状态")
					}
				}

			} else {
				if tool.StrInArr(in.Model, []string{
					"clean_type", "recycle_type",
				}) {
					return errors.New("未初始化，只能更改项目和初始化状态")
				}
			}

			if prId != 0 {
				updateSql = fmt.Sprintf("update %s set %s = %d where asset_id = %s", table, "pr_id", prId, v)
			} else {
				if tool.StrInArr(in.Model, []string{
					"clean_type", "recycle_type", "del_flag",
				}) {
					in.Value = "1"
				}
				updateSql = fmt.Sprintf("update %s set %s = '%s' where asset_id = %s", table, in.Model, in.Value, v)
			}
			if in.Model == "clean_type" && in.Value == "1" {
				var count int64
				sql := fmt.Sprintf("SELECT count(*) as count FROM game_server WHERE asset_id=%d and server_status not in (0,3)", gconv.Int64(v))
				err := m.conn.QueryRowCtx(ctx, &count, sql)
				if err != nil {
					return err
				}
				if count != 0 {
					return errors.New("存在线上服，禁止修改清理状态")
				}
			}
			if in.Model == "init_type" && in.Value == "1" {
				initAssetList = append(initAssetList, v)
			}

			_, err := m.conn.ExecCtx(ctx, updateSql)
			if err != nil {
				return err
			}

			if tool.StrInArr(in.Model, []string{
				"init_type",
				"clean_type",
				"recycle_type",
			}) {
				types := strings.Split(in.Model, "_")
				if md, ok := metadata.FromIncomingContext(ctx); ok {
					uname = md.Get("nickName")[0]
					uname, _ = url.QueryUnescape(uname)
				}

				query := fmt.Sprintf(`update %s set change_status_remark=json_set(change_status_remark,"$.%s_info",JSON_OBJECT("%s_time","%s","%s_operator","%s")) where asset_id=?;`, m.table, types[0], types[0], time.Now().Format("2006-01-02 15:04:05"), types[0], uname)
				_, err = m.conn.ExecCtx(ctx, query, v)
				if err != nil {
					return err
				}
			}

		}
		if len(initAssetList) != 0 {
			err := m.initScriptCreate(strings.Join(initAssetList, ","), initConfig)
			if err != nil {
				return err
			}
		}

		return nil
	})
	return err

}
