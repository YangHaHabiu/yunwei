// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	platformFieldNames          = builder.RawFieldNames(&Platform{})
	platformRows                = strings.Join(platformFieldNames, ",")
	platformRowsExpectAutoSet   = strings.Join(stringx.Remove(platformFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	platformRowsWithPlaceHolder = strings.Join(stringx.Remove(platformFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	platformModel interface {
		Insert(ctx context.Context, data *Platform) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Platform, error)
		FindOneByPlatformIdDelFlagProjectId(ctx context.Context, platformId int64, delFlag int64, projectId int64) (*Platform, error)
		Update(ctx context.Context, data *Platform) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]PlatformList, error)
		DeleteSoft(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]PlatformList, error)
		FindListByPlatformId(ctx context.Context, filters ...interface{}) (*[]PlatFormLabelList, error)
		FindListByClusterId(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]ClusterLabelList, error)
		CountCluster(ctx context.Context, filters ...interface{}) (int64, error)
		FindPlatformListByClusterId(ctx context.Context, filters ...interface{}) (*[]ClusterPlatformList, error)
		FindAssetListByClusterId(ctx context.Context, filters ...interface{}) (*[]ClusterAssetList, error)
		CountHosts(ctx context.Context, sname string, filters ...interface{}) (int64, error)
		FindPageHostsListByPage(ctx context.Context, page, pageSize int64, sname string, filters ...interface{}) (*[]HostsList, error)
		CountGameServer(ctx context.Context, filters ...interface{}) (int64, error)
		FindPageGameServerListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]GameServerList, error)
		FindClusterByPlatformEns(ctx context.Context, filters ...interface{}) (*[]ClusterPlatformInfo, error)
	}

	defaultPlatformModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Platform struct {
		Id           int64  `db:"id"`            // ID
		ProjectId    int64  `db:"project_id"`    // 项目ID
		PlatformId   int64  `db:"platform_id"`   // 平台ID
		PlatformEn   string `db:"platform_en"`   // 平台英文名
		PlatformCn   string `db:"platform_cn"`   // 平台中文名
		DomainFormat string `db:"domain_format"` // 单服域名格式
		Remark       string `db:"remark"`        // 备注信息
		DelFlag      int64  `db:"del_flag"`      // 删除状态：0:未删除(数据使用中);1:已删除(回收)
	}
	PlatformList struct {
		Id             int64          `db:"id"`          // ID
		ProjectId      int64          `db:"project_id"`  // 项目ID
		PlatformId     int64          `db:"platform_id"` // 平台ID
		PlatformEn     string         `db:"platform_en"` // 平台英文名
		PlatformCn     string         `db:"platform_cn"` // 平台中文名
		PlatformFormat string         `db:"platform_format"`
		DomainFormat   string         `db:"domain_format"` // 单服域名格式
		Remark         string         `db:"remark"`        // 备注信息
		DelFlag        int64          `db:"del_flag"`      // 删除状态：0:未删除(数据使用中);1:已删除(回收)
		ProjectCn      string         `db:"project_cn"`
		LabelNames     sql.NullString `db:"label_names"`
	}
	PlatFormLabelList struct {
		ViewPlatformAutoid sql.NullInt64  `db:"view_platform_autoid"`
		ViewPlatformId     sql.NullInt64  `db:"view_platform_id"`
		ViewPlatformEn     sql.NullString `db:"view_platform_en"`
		ViewPlatformCn     sql.NullString `db:"view_platform_cn"`
		ViewProjectId      sql.NullInt64  `db:"view_project_id"`
		ViewProjectCn      sql.NullString `db:"view_project_cn"`
		ViewProjectEn      sql.NullString `db:"view_project_en"`
		ViewPlatformRemark sql.NullString `db:"view_platform_remark"`
		ViewLabels         sql.NullString `db:"view_labels"`
		ViewFeatureInfo    sql.NullString `db:"view_feature_info"`
	}
	ClusterLabelList struct {
		ViewLabelId              sql.NullInt64  `db:"view_label_id"`
		ViewLabelName            sql.NullString `db:"view_label_name"`
		ViewLabelValues          sql.NullString `db:"view_label_values"`
		ViewLabelRemark          sql.NullString `db:"view_label_remark"`
		ViewProjectId            sql.NullInt64  `db:"view_project_id"`
		ViewProjectCn            sql.NullString `db:"view_project_cn"`
		ViewProjectEn            sql.NullString `db:"view_project_en"`
		ViewClusterFeatureInfo   sql.NullString `db:"view_cluster_feature_info"`
		ViewFeatureServerDelFlag sql.NullInt64  `db:"view_feature_server_del_flag"`
	}

	ClusterAssetList struct {
		LabelId     sql.NullInt64  `db:"label_id"`
		LabelName   sql.NullString `db:"label_name"`
		LabelValues sql.NullString `db:"label_values"`
		LabelRemark sql.NullString `db:"label_remark"`
		ProjectId   sql.NullInt64  `db:"project_id"`
		ProjectCn   sql.NullString `db:"project_cn"`
		ProjectEn   sql.NullString `db:"project_en"`
		ViewDataUrl sql.NullString `db:"view_data_url"`
		ViewJsonId  sql.NullString `db:"view_json_id"`
		AssetIp     sql.NullString `db:"asset_ip"`
	}
	ClusterPlatformList struct {
		LabelId      sql.NullInt64  `db:"label_id"`
		LabelName    sql.NullString `db:"label_name"`
		LabelValues  sql.NullString `db:"label_values"`
		LabelRemark  sql.NullString `db:"label_remark"`
		ProjectId    sql.NullInt64  `db:"project_id"`
		ProjectCn    sql.NullString `db:"project_cn"`
		ProjectEn    sql.NullString `db:"project_en"`
		ViewDataUrl  sql.NullString `db:"view_data_url"`
		ViewJsonId   sql.NullString `db:"view_json_id"`
		PlatformInfo sql.NullString `db:"platform_info"`
	}

	GameServerList struct {
		Id              sql.NullString `db:"id"`
		CenterId        sql.NullString `db:"center_id"`
		ProjectId       sql.NullString `db:"project_id"`
		PlatformId      sql.NullString `db:"platform_id"`
		ServerId        sql.NullString `db:"server_id"`
		ServerAlias     sql.NullString `db:"server_alias"`
		OpenTime        sql.NullString `db:"open_time"`
		AssetId         sql.NullString `db:"asset_id"`
		ServerStatus    sql.NullString `db:"server_status"`
		CombineRemark   sql.NullString `db:"combine_remark"`
		OperateInfo     sql.NullString `db:"operate_info"`
		DelFlag         sql.NullString `db:"del_flag"`
		ProjectCn       sql.NullString `db:"project_cn"`
		OuterIp         sql.NullString `db:"outer_ip"`
		InnerIp         sql.NullString `db:"inner_ip"`
		PlatformCn      sql.NullString `db:"platform_cn"`
		PlatformEn      sql.NullString `db:"platform_en"`
		Ip              sql.NullString `db:"ip"`
		NewPlatformInfo sql.NullString `db:"new_platform_info"`
		GameServerTitle sql.NullString `db:"game_server_title"`
	}

	HostsList struct {
		ViewAssetId        sql.NullString `db:"view_asset_id"`
		ViewUserCompanyCn  sql.NullString `db:"view_user_company_cn"`
		ViewUserProjectCn  sql.NullString `db:"view_user_project_cn"`
		ViewOuterIp        sql.NullString `db:"view_outer_ip"`
		ViewInnerIp        sql.NullString `db:"view_inner_ip"`
		ViewHardwareInfo   sql.NullString `db:"view_hardware_info"`
		ViewProviderNameCn sql.NullString `db:"view_provider_name_cn"`
		ViewProviderNameEn sql.NullString `db:"view_provider_name_en"`
		ViewHostRoleCn     sql.NullString `db:"view_host_role_cn"`
		Installed          sql.NullString `db:"installed"`
		ServerName         sql.NullString `db:"server_name"`
		NewSName           sql.NullString `db:"new_s_name"`
		LabelInfo          sql.NullString `db:"label_info"`
	}

	ClusterPlatformInfo struct {
		ProjectId      int64  `db:"project_id"`
		ProjectEn      string `db:"project_en"`
		OuterIp        string `db:"outerIp"`
		ClusterLabelId string `db:"cluster_label_id"`
	}
)

func newPlatformModel(conn sqlx.SqlConn) *defaultPlatformModel {
	return &defaultPlatformModel{
		conn:  conn,
		table: "`platform`",
	}
}

func (m *defaultPlatformModel) Insert(ctx context.Context, data *Platform) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, platformRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.PlatformId, data.PlatformEn, data.PlatformCn, data.DomainFormat, data.Remark, data.DelFlag)
	return ret, err
}

func (m *defaultPlatformModel) FindOne(ctx context.Context, id int64) (*Platform, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", platformRows, m.table)
	var resp Platform
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlatformModel) FindClusterByPlatformEns(ctx context.Context, filters ...interface{}) (*[]ClusterPlatformInfo, error) {

	query := `SELECT
		project_id,
		project_en,
		#GROUP_CONCAT(platform_en) platform_en,
		GROUP_CONCAT(distinct outer_ip) outer_ip,
		GROUP_CONCAT(distinct  cluster_label_id ) cluster_label_id
FROM
	(
	SELECT
		view_project_id project_id,
		view_platform_en platform_en,
		view_project_en project_en,
		IFNULL(JSON_UNQUOTE(JSON_EXTRACT( view_feature_info, '$.source[0].ip[0].outer_ip' )),'') outer_ip,
		view_cluster_label_id cluster_label_id
FROM
	view_platform_feature
	)A
	%s
	GROUP BY project_id,cluster_label_id
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}

	query = fmt.Sprintf(query, condition)
	var resp []ClusterPlatformInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

//标签信息-平台
func (m *defaultPlatformModel) FindListByPlatformId(ctx context.Context, filters ...interface{}) (*[]PlatFormLabelList, error) {

	query := `select * from view_platform_feature
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, condition)
	var resp []PlatFormLabelList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

//集群信息-平台
func (m *defaultPlatformModel) FindPlatformListByClusterId(ctx context.Context, filters ...interface{}) (*[]ClusterPlatformList, error) {
	query := `SELECT
	label_id,label_name,label_values,label_remark,project_id,project_cn,project_en,	
	view_data_url,view_json_id,CONCAT(d.platform_cn,":",d.platform_en,":",d.platform_id) as platform_info
FROM
	(
	SELECT
		c.*,
		p.project_en,
		p.project_cn 
	FROM
		(
		SELECT
			b.*,
			a.platform_en,a.platform_cn,a.platform_id
		FROM
			platform AS a,
			(
			SELECT
				l.*,
				lg.binding_id,
				lg.project_id,
				lg.resource_en 
			FROM
				label l,
				label_global lg 
			WHERE
				l.label_id = lg.label_id 
				AND l.label_type = 1 
				AND resource_en = "platform" 
			) AS b 
		WHERE
			 a.id = b.binding_id 
			AND a.del_flag = 0 
			AND b.del_flag = 0 
		) AS c
		INNER JOIN project AS p ON c.project_id = p.project_id 
	) AS d
	INNER JOIN ( SELECT * FROM view_search_label WHERE view_resource_en_name = 'platform' ) AS e ON d.binding_id = e.view_primary_key_value 
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, condition)

	var resp []ClusterPlatformList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//集群信息-服务器
func (m *defaultPlatformModel) FindAssetListByClusterId(ctx context.Context, filters ...interface{}) (*[]ClusterAssetList, error) {
	query := `SELECT
	label_id,label_name,label_values,label_remark,project_id,project_cn,project_en,	
	view_data_url,view_json_id,CONCAT(d.outer_ip,":",d.inner_ip,":",d.view_en_host_role) as asset_ip
FROM
	(
	SELECT
		c.*,
		p.project_en,
		p.project_cn 
	FROM
		(
		SELECT
			b.*,
			a.view_outer_ip as outer_ip,a.view_inner_ip as inner_ip,
			a.view_en_host_role
		FROM
			view_assets AS a,
			(
			SELECT
				l.*,
				lg.binding_id,
				lg.project_id,
				lg.resource_en 
			FROM
				label l,
				label_global lg 
			WHERE
				l.label_id = lg.label_id 
				AND l.label_type = 1 
				AND resource_en = "asset" 
			) AS b 
		WHERE
			 a.view_asset_id = b.binding_id 
			AND a.view_asset_del_flag = 0 
			AND a.view_recycle_type = 2
			AND b.del_flag = 0 
		) AS c
		INNER JOIN project AS p ON c.project_id = p.project_id 
	) AS d
	INNER JOIN ( SELECT * FROM view_search_label WHERE view_resource_en_name = 'asset' ) AS e ON d.binding_id = e.view_primary_key_value 
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, condition)

	var resp []ClusterAssetList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//信息标签-集群
func (m *defaultPlatformModel) FindListByClusterId(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]ClusterLabelList, error) {

	query := `SELECT * FROM view_project_cluster_info
%s
order by view_feature_server_del_flag desc,view_project_id desc,view_cluster_name
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, condition)
	var resp []ClusterLabelList
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)

	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//集群信息统计
func (m *defaultPlatformModel) CountCluster(ctx context.Context, filters ...interface{}) (int64, error) {
	query := `SELECT count(*) count FROM view_project_cluster_info
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultPlatformModel) FindOneByPlatformIdDelFlagProjectId(ctx context.Context, platformId int64, delFlag int64, projectId int64) (*Platform, error) {
	var resp Platform
	query := fmt.Sprintf("select %s from %s where `platform_id` = ? and `del_flag` = ? and `project_id` = ? limit 1", platformRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, platformId, delFlag, projectId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlatformModel) Update(ctx context.Context, data *Platform) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, platformRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.PlatformId, data.PlatformEn, data.PlatformCn, data.DomainFormat, data.Remark, data.DelFlag, data.Id)
	return err
}

func (m *defaultPlatformModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPlatformModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultPlatformModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]PlatformList, error) {
	query := `SELECT * FROM (
SELECT
	a1.*,
	CONCAT(a1.platform_en,"(",a1.platform_cn,")") platform_format,
	CONCAT(a1.project_id,"_",a1.platform_id) platform_ex,
	a2.project_cn 
FROM
	(
	SELECT
		p.*,
		GROUP_CONCAT( b.label_name, "(", b.label_values, ")" ORDER BY b.label_type,b.label_id ) AS label_names 
	FROM
		platform AS p
		LEFT JOIN (
		SELECT
			l.*,
			lg.binding_id,
			lg.project_id,
			lg.resource_en 
		FROM
			label l,
			label_global lg 
		WHERE
			l.label_id = lg.label_id 
			AND lg.resource_en = "platform" 
		) AS b ON p.project_id = b.project_id 
		AND b.binding_id = p.id 

	GROUP BY
		id 
	) a1
	INNER JOIN (select * from project where del_flag =0) a2 ON a1.project_id = a2.project_id
	) d
%s
ORDER BY del_flag,project_id,platform_id
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, condition)
	//fmt.Println(query)
	var resp []PlatformList
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultPlatformModel) FindAll(ctx context.Context, filters ...interface{}) (*[]PlatformList, error) {
	query := `SELECT * FROM (
SELECT
	a1.*,
	CONCAT(a1.platform_en,"(",a1.platform_cn,")") platform_format,
	CONCAT(a1.project_id,"_",a1.platform_id) platform_ex,
	a2.project_cn 
FROM
	(
	SELECT
		p.*,
		GROUP_CONCAT( b.label_name, "(", b.label_values, ")" ) AS label_names 
	FROM
		platform AS p
		LEFT JOIN (
		SELECT
			l.*,
			lg.binding_id,
			lg.project_id,
			lg.resource_en 
		FROM
			label l,
			label_global lg 
		WHERE
			l.label_id = lg.label_id 
			AND lg.resource_en = "platform" 
		) AS b ON p.project_id = b.project_id 
		AND b.binding_id = p.id
	GROUP BY
		id 
	) a1
	INNER JOIN (select * from project where del_flag =0) a2 ON a1.project_id = a2.project_id
	) d
%s
ORDER BY del_flag,project_id,platform_id

`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query = fmt.Sprintf(query, condition)

	var resp []PlatformList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultPlatformModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := `SELECT count(*) count FROM (
SELECT
	a1.*,
	CONCAT(a1.platform_en,"(",a1.platform_cn,")") platform_format,
	CONCAT(a1.project_id,"_",a1.platform_id) platform_ex,
	a2.project_cn 
FROM
	(
	SELECT
		p.*,
		GROUP_CONCAT( b.label_name, "(", b.label_values, ")" ) AS label_names 
	FROM
		platform AS p
		LEFT JOIN (
		SELECT
			l.*,
			lg.binding_id,
			lg.project_id,
			lg.resource_en 
		FROM
			label l,
			label_global lg 
		WHERE
			l.label_id = lg.label_id 
			AND lg.resource_en = "platform" 
		) AS b ON p.project_id = b.project_id 
		AND b.binding_id = p.id 

	GROUP BY
		id 
	) a1
	INNER JOIN (select * from project where del_flag =0) a2 ON a1.project_id = a2.project_id
	) d
%s
ORDER BY del_flag,project_id,platform_id
`

	query = fmt.Sprintf(query, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultPlatformModel) DeleteSoft(ctx context.Context, id int64) error {
	var (
		delFlag int64
		count   int64
	)
	one, err2 := m.FindOne(ctx, id)
	if err2 != nil {
		return err2
	}

	if one.DelFlag != 0 {
		delFlag = 0
	} else {
		delFlag = 1
	}

	if delFlag == 1 {
		sql := fmt.Sprintf("SELECT count(*) as count FROM game_server WHERE project_id=%d and platform_id=%d and server_status not in (0,3)", one.ProjectId, one.PlatformId)
		err := m.conn.QueryRowCtx(ctx, &count, sql)
		if err != nil {
			return err
		}
		if count != 0 {
			return errors.New("存在线上服，禁止停用此平台")
		}
	}
	query := fmt.Sprintf("update %s set `del_flag`=? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, delFlag, id)
	return err
}

//游戏服信息
func (m *defaultPlatformModel) FindPageGameServerListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]GameServerList, error) {
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := `SELECT
	* 
FROM
	(
	SELECT
		g.*,
		CONCAT( g.outer_ip, ":", g.inner_ip ) AS ip,
		CONCAT( g.project_id, "_", g.platform_id ) AS new_platform_info,
		IFNULL( CONCAT( g.server_alias, "(", h.gameserver_title, ")" ), g.server_alias ) AS game_server_title 
	FROM
		(
		SELECT
			e.*,
			f.platform_cn,
			f.platform_en 
		FROM
			(
			SELECT
				c.*,
				d.outer_ip,
				d.inner_ip 
			FROM
				( SELECT a.*, b.project_cn FROM game_server a INNER JOIN project b ON a.project_id = b.project_id ) c
				INNER JOIN asset d ON c.asset_id = d.asset_id 
			) e
			INNER JOIN platform f ON e.platform_id = f.platform_id 
			AND e.project_id = f.project_id 
		) g
		LEFT JOIN (select * from open_plan where del_flag = 0) h ON g.server_id = h.server_id 
		AND g.platform_id = h.platform_id 
	AND g.project_id = h.project_id 
	) l
	WHERE del_flag = %d
%s
ORDER BY  open_time desc,project_id desc,platform_id,server_id desc
limit ? offset ?
`
	query = fmt.Sprintf(query, globalkey.DelStateNo, condition)
	//fmt.Println(query)
	var resp []GameServerList
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//游戏服统计
func (m *defaultPlatformModel) CountGameServer(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := `SELECT
	count(*) as count 
FROM
	(
	SELECT
		g.*,
		CONCAT( g.outer_ip, ":", g.inner_ip ) AS ip,
		CONCAT( g.project_id, "_", g.platform_id ) AS new_platform_info,
		IFNULL( CONCAT( g.server_alias, "(", h.gameserver_title, ")" ), g.server_alias ) AS game_server_title 
	FROM
		(
		SELECT
			e.*,
			f.platform_cn,
			f.platform_en 
		FROM
			(
			SELECT
				c.*,
				d.outer_ip,
				d.inner_ip 
			FROM
				( SELECT a.*, b.project_cn FROM game_server a INNER JOIN project b ON a.project_id = b.project_id ) c
				INNER JOIN asset d ON c.asset_id = d.asset_id 
			) e
			INNER JOIN platform f ON e.platform_id = f.platform_id 
			AND e.project_id = f.project_id 
		) g
		LEFT JOIN (select * from open_plan where del_flag = 0) h ON g.server_id = h.server_id 
		AND g.platform_id = h.platform_id 
	AND g.project_id = h.project_id 
	) l
	WHERE del_flag = %d
%s
`
	query = fmt.Sprintf(query, globalkey.DelStateNo, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

var hostSql = `#服务器信息
SELECT view_asset_id,view_asset_ownership_company_cn as view_user_company_cn,view_user_project_cn,view_outer_ip,view_inner_ip,view_hardware_info,
		view_provider_id,view_provider_name_cn,view_provider_name_en,view_host_role_cn,
		installed,server_name,new_s_name,label_info
FROM (#BEGIN D
		SELECT C.*,sum( C.exit_num ) AS installed,GROUP_CONCAT(REPLACE(CONCAT( C.platform_en, "(", C.exit_sid, ")" ),",","/")) AS server_name,
		label_names as label_info,GROUP_CONCAT(C.s_name) as new_s_name
		FROM(#BEGIN C
				select * 
				from (#BEGIN A	#机器所绑定的标签
						SELECT a.*,GROUP_CONCAT(b.label_names order by label_type,label_id) as label_names
						FROM (
								select * from view_assets where view_asset_del_flag = 0
						) as a LEFT JOIN (
								SELECT lg.*,CONCAT(l.label_name,"(",l.label_values,")") label_names,label_type
								FROM label_global lg,label l
								WHERE lg.label_id=l.label_id
						) as b ON a.view_asset_id= b.binding_id AND b.resource_en="asset"
						GROUP BY a.view_asset_id
						ORDER BY view_user_project_id,view_asset_id desc #END A
				) A left join (#BEGIN B	#机器已装服及装服量
						SELECT b1.project_id,#b1.server_id,
						b1.asset_id,b2.platform_en,#if(length(ifnull(combine_remark,''))= 0,'', combine_remark ) AS combine_remark,
						GROUP_CONCAT(if(
								LENGTH(SUBSTRING_INDEX(combine_remark,"服", 1 ))> 0,(SUBSTRING_INDEX(combine_remark,"服",1)),server_id
						) ORDER BY server_id) AS exit_sid,
						count(*) AS exit_num,
						GROUP_CONCAT(CONCAT(b2.platform_en,'_s',server_id)) as s_name
						FROM game_server b1,platform b2 
						WHERE b1.project_id = b2.project_id AND b1.platform_id = b2.platform_id 
						AND b1.server_status IN ( 1, 2, 5 ) 
						GROUP BY asset_id,platform_en #END B
				) B on A.view_asset_id = B.asset_id
				WHERE A.view_recycle_type=2
		) AS C
		%s
		#where view_host_role_cn regexp '网关'
		#where view_user_project_id in (4)
		#where view_user_company_cn='巧玩'
		GROUP BY C.view_asset_id
		ORDER BY C.view_asset_id desc,C.view_user_project_id desc #END C
) D	#END D
`

//服务器信息
func (m *defaultPlatformModel) FindPageHostsListByPage(ctx context.Context, page, pageSize int64, sname string, filters ...interface{}) (*[]HostsList, error) {
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query := fmt.Sprintf(hostSql, condition)

	if sname != "" {
		//sql += fmt.Sprintf(` and s.s_name like '%%%s%%'`, gp.Sname)
		compile := regexp.MustCompile(`,|，|\|`)
		tmps := make([]string, 0)
		for _, v := range compile.Split(sname, -1) {
			tmps = append(tmps, fmt.Sprintf(" ( FIND_IN_SET('%s',new_s_name)>=1 ) ", v))
		}
		query += fmt.Sprintf("HAVING %s", strings.Join(tmps, "or"))
	}

	query += "\nlimit ? offset ?"
	//fmt.Println(query)
	var resp []HostsList
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//服务器统计
func (m *defaultPlatformModel) CountHosts(ctx context.Context, sname string, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := `SELECT count(*) FROM (
%s
`
	query = fmt.Sprintf(query, hostSql)
	query = fmt.Sprintf(query, condition)
	if sname != "" {
		//sql += fmt.Sprintf(` and s.s_name like '%%%s%%'`, gp.Sname)
		compile := regexp.MustCompile(`,|，|\|`)

		tmps := make([]string, 0)
		for _, v := range compile.Split(sname, -1) {
			tmps = append(tmps, fmt.Sprintf(" ( FIND_IN_SET('%s',new_s_name)>=1 ) ", v))
		}
		query += fmt.Sprintf("HAVING %s", strings.Join(tmps, "or"))
	}
	query += "\n) E"
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}
