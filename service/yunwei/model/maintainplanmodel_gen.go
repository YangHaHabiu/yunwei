// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	maintainPlanFieldNames          = builder.RawFieldNames(&MaintainPlan{})
	maintainPlanRows                = strings.Join(maintainPlanFieldNames, ",")
	maintainPlanRowsExpectAutoSet   = strings.Join(stringx.Remove(maintainPlanFieldNames, "`id`", "`create_time`", "`update_time`", "`update_by`", "`del_flag`"), ",")
	maintainPlanRowsWithPlaceHolder = strings.Join(stringx.Remove(maintainPlanFieldNames, "`id`", "`create_time`", "`update_time`", "`create_by`", "`del_flag`", "`task_id`"), "=?,") + "=?"
)

type (
	maintainPlanModel interface {
		Insert(ctx context.Context, data *MaintainPlan) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MaintainPlan, error)
		Update(ctx context.Context, data *MaintainPlan) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, orderTmp string, filters ...interface{}) (*[]MaintainPlanList, error)
		DeleteSoft(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]MaintainPlanList, error)
		FindAllRangeList(ctx context.Context, filters ...interface{}) (*[]MaintainPlanRangeList, error)
		FindAllClusterInfo(ctx context.Context, filters ...interface{}) (*[]MaintainPlanClusterInfo, error)
		UpdateTaskIdById(ctx context.Context, id, taskId int64) error
		UpdateByField(ctx context.Context, fieldList []string, args ...interface{}) error
	}

	defaultMaintainPlanModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MaintainPlan struct {
		Id               int64  `db:"id"`                // ID
		ProjectId        int64  `db:"project_id"`        // 项目ID
		MaintainType     string `db:"maintain_type"`     // 维护类型：1:例行维护;2:临时维护;3:关服计划;4:迁移计划
		StartTime        string `db:"start_time"`        // 维护开始时间
		EndTime          string `db:"end_time"`          // 维护结束时间
		MaintainRange    string `db:"maintain_range"`    // 维护范围
		Title            string `db:"title"`             // 标题
		Content          string `db:"content"`           // 维护内容
		CreateBy         string `db:"create_by"`         // 创建人
		CreateTime       string `db:"create_time"`       // 创建时间
		UpdateBy         string `db:"update_by"`         // 修改人
		UpdateTime       string `db:"update_time"`       // 修改时间
		MaintainOperator string `db:"maintain_operator"` // 操作人
		DelFlag          int64  `db:"del_flag"`          // 删除状态：0:未删除(数据使用中);1:已删除(回收)
		ClusterId        string `db:"cluster_id"`        // 集群id
		TaskId           int64  `db:"task_id"`           // 任务id
	}
	MaintainPlanRangeList struct {
		List sql.NullString `db:"list"`
	}

	MaintainPlanClusterInfo struct {
		LabelId     int64          `db:"label_id"`
		LabelName   string         `db:"label_name"`
		LabelValues string         `db:"label_values"`
		LabelRemark sql.NullString `db:"label_remark"`
		Labelx      string         `db:"labelx"`
		OuterIp     string         `db:"outer_ip"`
		BaseDir     string         `db:"base_dir"`
		ProjectId   int64          `db:"project_id"`
	}
	MaintainPlanList struct {
		Id               int64          `db:"id"`                // ID
		ProjectId        int64          `db:"project_id"`        // 项目ID
		MaintainType     string         `db:"maintain_type"`     // 维护类型：1:例行维护;2:临时维护;3:关服计划;4:迁移计划
		StartTime        string         `db:"start_time"`        // 维护开始时间
		EndTime          string         `db:"end_time"`          // 维护结束时间
		MaintainRange    string         `db:"maintain_range"`    // 维护范围
		Title            string         `db:"title"`             // 标题
		Content          string         `db:"content"`           // 维护内容
		CreateBy         string         `db:"create_by"`         // 创建人
		CreateTime       string         `db:"create_time"`       // 创建时间
		UpdateBy         string         `db:"update_by"`         // 修改人
		UpdateTime       string         `db:"update_time"`       // 修改时间
		MaintainOperator sql.NullString `db:"maintain_operator"` // 操作人
		DelFlag          int64          `db:"del_flag"`          // 删除状态：0:未删除(数据使用中);1:已删除(回收)
		ClusterId        string         `db:"cluster_id"`        // 集群id
		TaskId           int64          `db:"task_id"`           // 任务id
		ProjectCn        string         `db:"project_cn"`
		MaintainTypeCn   string         `db:"maintain_type_cn"`
		CreateNameEn     string         `db:"create_name_en"`
		CreateNameCn     string         `db:"create_name_cn"`
		UpdateNameEn     string         `db:"update_name_en"`
		UpdateNameCn     string         `db:"update_name_cn"`
	}
)

func newMaintainPlanModel(conn sqlx.SqlConn) *defaultMaintainPlanModel {
	return &defaultMaintainPlanModel{
		conn:  conn,
		table: "`maintain_plan`",
	}
}

func (m *defaultMaintainPlanModel) Insert(ctx context.Context, data *MaintainPlan) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?,?, ?, ?, ?, ?, ?, ?, ?, ? , ?)", m.table, maintainPlanRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.MaintainType, data.StartTime, data.EndTime, data.MaintainRange, data.Title, data.Content, data.CreateBy, data.MaintainOperator, data.ClusterId, -1)
	return ret, err
}

//指明字段更新 (列表最后一项是主键id名称)
func (m *defaultMaintainPlanModel) UpdateByField(ctx context.Context, fieldList []string, args ...interface{}) error {
	fieldListx := stringx.Remove(fieldList, fieldList[len(fieldList)-1])
	fields := strings.Join(fieldListx, "=?,") + "=?"
	query := fmt.Sprintf("update %s set  %s where `%s` = ?", m.table, fields, fieldList[len(fieldList)-1])
	//fmt.Println(query)
	_, err := m.conn.ExecCtx(ctx, query, args...)
	return err
}

func (m *defaultMaintainPlanModel) FindOne(ctx context.Context, id int64) (*MaintainPlan, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", maintainPlanRows, m.table)
	var resp MaintainPlan
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMaintainPlanModel) Update(ctx context.Context, data *MaintainPlan) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, maintainPlanRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.MaintainType, data.StartTime, data.EndTime, data.MaintainRange, data.Title, data.Content, data.UpdateBy, data.MaintainOperator, data.ClusterId, data.Id)
	return err
}

func (m *defaultMaintainPlanModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMaintainPlanModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultMaintainPlanModel) FindPageListByPage(ctx context.Context, page, pageSize int64, orderTmp string, filters ...interface{}) (*[]MaintainPlanList, error) {
	query := `SELECT * FROM (
SELECT
	g.*,
	IFNULL( h.name, '' ) AS update_name_en,
	IFNULL( h.nick_name, '' ) AS update_name_cn 
FROM
	(
	SELECT
		e.*,
		IFNULL( f.name, '' ) AS create_name_en,
		IFNULL( f.nick_name, '' ) AS create_name_cn 
	FROM
		(
		SELECT
			c.id,
			c.project_id,
			c.maintain_type,
			c.start_time,
			c.end_time,
			c.maintain_range,
			c.title,
			c.del_flag,
			c.content,
			c.create_by,
			c.project_cn,
			UNIX_TIMESTAMP( c.create_time ) create_time,
			c.update_by,
			UNIX_TIMESTAMP( c.update_time ) update_time,
			c.maintain_operator,
			c.task_id,
			c.cluster_id,
			d.label AS maintain_type_cn 
		FROM
			(
			SELECT
				a.*,
				b.project_cn 
			FROM
				maintain_plan a
				INNER JOIN project b ON a.project_id = b.project_id 
				AND a.del_flag = 0 
			) c
			INNER JOIN ( SELECT * FROM sys_dict WHERE pid = 73 ) d ON c.maintain_type = d.
		VALUE
			
		) e
		LEFT JOIN sys_user f ON e.create_by = f.id 
	) g
	LEFT JOIN sys_user h ON g.update_by = h.id
	) m
%s
%s
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	if orderTmp == "" {
		orderTmp = "ORDER BY start_time desc,project_id desc,maintain_type,del_flag"
	}
	query = fmt.Sprintf(query, condition, orderTmp)

	var resp []MaintainPlanList
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)

	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMaintainPlanModel) FindAllClusterInfo(ctx context.Context, filters ...interface{}) (*[]MaintainPlanClusterInfo, error) {

	query := `SELECT
	IFNULL(view_cluster_platform_group,'') AS labelx,
	view_project_id AS project_id,
	IFNULL(view_cluster_label_id,'') AS label_id,
	IFNULL(view_cluster_label_name,'') AS label_name,
	view_cluster_label_values AS label_values,
	REPLACE ( IFNULL( view_source_cluster_info -> '$.ip[0].outer_ip', '' ), '"', '' ) AS outer_ip,
	IFNULL( regexp_replace ( SUBSTRING_INDEX( view_source_cluster_info -> '$.base_dir', '_',- 1 ), '[ a-zA-Z/_"]', '' )+ 0, '' ) AS base_dir,
	'' AS label_remark 
FROM
	view_platform_feature
where view_cluster_platform_group <> ''
%s
GROUP BY
	view_project_id,
	view_cluster_label_id

`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, condition)
	//fmt.Println(query)
	var resp []MaintainPlanClusterInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

//树形结构的列表
func (m *defaultMaintainPlanModel) FindAllRangeList(ctx context.Context, filters ...interface{}) (*[]MaintainPlanRangeList, error) {
	query := `##维护计划
select concat('[',group_concat(level3),']') as list
from
(#BEGIN:c
		select project_id,
			case platform_group
				when '' then concat('{"children":[',group_concat(concat('{',level2,'}')),'],"label":"default","value":"default","level":"4"}')
				else concat('{"children":[',group_concat(concat('{',level2,'}')),'],"label":"',platform_group,'","value":"',platform_group,'","level":"',level,'"}')
			end level3
		from
		(#BEGIN:b
				select project_id,platform_id,platform_en,platform_group,level,
				concat('"children":[',group_concat(concat('{',level1,'}') order by cast(substring_index(server_group,'-',1) as signed) asc),
				'],"label":"',platform_en,'","value":"',platform_en,'","total":"',sum(server_count),'"') as level2
				from (#BEGIN:a
						select project_id,platform_id,platform_en,platform_group,level,server_group,
								concat(
										'"children":[',group_concat(concat('{"label":"',server_title,'","platform":"',new_platform_en,
										'","value":"',server_id,'","ips":"',ips,'"}') order by server_id),'],"label":"',server_group,'","value":"',server_group,'"') as level1,
								count(server_id) as server_count
						from (
								select game_server.project_id,game_server.platform_id,game_server.server_id,view_platform_en as new_platform_en,
								view_platform_group as platform_group,concat(outer_ip,':',inner_ip) as ips,
								concat(game_server.server_id,if(length(trim(ifnull(open_plan.gameserver_title,' ')))=0,'',concat('_',open_plan.gameserver_title)),
								if(length(trim(ifnull(combine_remark,' ')))=0,'',concat('_',combine_remark))) as server_title,
								if(length(trim(ifnull(view_platform_group,' ')))=0,'3','4') as level,
								concat(floor((game_server.server_id-1)/20)*20+1,'-',floor((game_server.server_id-1)/20)*20+20) as server_group,open_plan.open_time,
								###############
				--				case  
				--					when server_alias regexp 'jswar_jszzd_s0[0-1][0-9]' || server_alias regexp 'jswar_Jszzdcross_s10[1-9]a' || 
				--						server_alias in ('jswar_Jszzdmidcross_s2001a','jswar_Jszzdmidcross_s2002a','jswar_Jszzdcross_s110a',
				--						'jswar_jszzd_s020a','jswar_Jszzdbigcross_s3001a') 
				--					then CONCAT(left(view_platform_en,5),'1',right(view_platform_en,LENGTH(view_platform_en)-5))
				--				else view_platform_en
				--				end as platform_en
								view_platform_en as platform_en
								###############
								from (
										select game_server.*,outer_ip,inner_ip
										from game_server,asset
										where game_server.asset_id=asset.asset_id
								) game_server,open_plan,view_platform_label
								where (game_server.project_id=open_plan.project_id and game_server.platform_id=open_plan.platform_id and game_server.server_id=open_plan.server_id)
								and game_server.server_status in (1,2,5)
								and (game_server.project_id=view_platform_label.view_project_id and game_server.platform_id=view_platform_label.view_platform_id)
								and open_plan.del_flag=0
								and view_label_type=1
								#and game_server.project_id in (1,4)
								#and arg_platform_group in ('集群CN__cluster_cn','__')
								#and (open_plan.open_time between '2019-09-09' and '2040-02-20')
								%s
								order by game_server.project_id,game_server.platform_id,game_server.server_id			
						) a
						group by project_id,platform_en,server_group#END:a
				) b
				group by project_id,platform_en
				order by platform_id#END:b
		) c
		group by project_id,platform_group#END:c
) d
group by project_id;


`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, condition)
	fmt.Println(query)
	var resp []MaintainPlanRangeList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

//条件查询所有
func (m *defaultMaintainPlanModel) FindAll(ctx context.Context, filters ...interface{}) (*[]MaintainPlanList, error) {
	query := `SELECT * FROM (
SELECT
	g.*,
	IFNULL( h.name, '' ) AS update_name_en,
	IFNULL( h.nick_name, '' ) AS update_name_cn 
FROM
	(
	SELECT
		e.*,
		IFNULL( f.name, '' ) AS create_name_en,
		IFNULL( f.nick_name, '' ) AS create_name_cn 
	FROM
		(
		SELECT
			c.id,
			c.project_id,
			c.maintain_type,
			c.start_time,
			c.end_time,
			c.maintain_range,
			c.title,
			c.del_flag,
			c.content,
			c.create_by,
			c.project_cn,
			UNIX_TIMESTAMP( c.create_time ) create_time,
			c.update_by,
			UNIX_TIMESTAMP( c.update_time ) update_time,
			c.maintain_operator,
			c.task_id,
			c.cluster_id,
			d.label AS maintain_type_cn 
		FROM
			(
			SELECT
				a.*,
				b.project_cn 
			FROM
				maintain_plan a
				INNER JOIN project b ON a.project_id = b.project_id 
				AND a.del_flag = 0 
			) c
			INNER JOIN ( SELECT * FROM sys_dict WHERE pid = 73 ) d ON c.maintain_type = d.
		VALUE
			
		) e
		LEFT JOIN sys_user f ON e.create_by = f.id 
	) g
	LEFT JOIN sys_user h ON g.update_by = h.id
	) m
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}

	query = fmt.Sprintf(query, condition)
	//fmt.Println(query)
	var resp []MaintainPlanList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultMaintainPlanModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select count(*) as count from %s where del_flag = %d %s", m.table, globalkey.DelStateNo, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultMaintainPlanModel) DeleteSoft(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, id)
	return err
}

//修改任务id
func (m *defaultMaintainPlanModel) UpdateTaskIdById(ctx context.Context, id, taskId int64) error {
	query := fmt.Sprintf("update %s set `task_id`=? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, taskId, id)
	return err
}
