// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tasksTidPidFieldNames          = builder.RawFieldNames(&TasksTidPid{})
	tasksTidPidRows                = strings.Join(tasksTidPidFieldNames, ",")
	tasksTidPidRowsExpectAutoSet   = strings.Join(stringx.Remove(tasksTidPidFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	tasksTidPidRowsWithPlaceHolder = strings.Join(stringx.Remove(tasksTidPidFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	tasksTidPidModel interface {
			Insert(ctx context.Context, data *TasksTidPid) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TasksTidPid, error)
		Update(ctx context.Context, data *TasksTidPid) error
		Delete(ctx context.Context, id int64) error
		FindListByMasterId(ctx context.Context, filters ...interface{}) (*[]QqGroupList, error)
	}

	defaultTasksTidPidModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TasksTidPid struct {
		Id  int64 `db:"id"`
		Tid int64 `db:"tid"` // 任务id
		Pid int64 `db:"pid"` // 进程pid
	}
	QqGroupList struct {
		Id        int64  `db:"id"`
		Qq        string `db:"qq"`
		QqApi     string `db:"qq_api"`
		IsMaster  int64  `db:"is_master"`
		GroupType string `db:"group_type"`
	}
)

func newTasksTidPidModel(conn sqlx.SqlConn) *defaultTasksTidPidModel {
	return &defaultTasksTidPidModel{
		conn:  conn,
		table: "`tasks_tid_pid`",
	}
}

func (m *defaultTasksTidPidModel) Insert(ctx context.Context, data *TasksTidPid) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, tasksTidPidRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Tid, data.Pid)
	return ret, err
}

func (m *defaultTasksTidPidModel) FindOne(ctx context.Context, id int64) (*TasksTidPid, error) {
	query := fmt.Sprintf("select %s from %s where `tid` = ? limit 1", tasksTidPidRows, m.table)
	var resp TasksTidPid
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTasksTidPidModel) FindListByMasterId(ctx context.Context, filters ...interface{}) (*[]QqGroupList, error) {
	query := `SELECT * from qq_group.qq_load_balance 
%s`
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query = fmt.Sprintf(query, condition)
	//fmt.Println(query)
	var resp []QqGroupList
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTasksTidPidModel) Update(ctx context.Context, data *TasksTidPid) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tasksTidPidRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Tid, data.Pid, data.Id)
	return err
}

func (m *defaultTasksTidPidModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `tid` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTasksTidPidModel) tableName() string {
	return m.table
}
