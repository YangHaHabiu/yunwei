// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	autoOpengameRuleFieldNames          = builder.RawFieldNames(&AutoOpengameRule{})
	autoOpengameRuleRows                = strings.Join(autoOpengameRuleFieldNames, ",")
	autoOpengameRuleRowsExpectAutoSet   = strings.Join(stringx.Remove(autoOpengameRuleFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	autoOpengameRuleRowsWithPlaceHolder = strings.Join(stringx.Remove(autoOpengameRuleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`state`"), "=?,") + "=?"
)

type (
	autoOpengameRuleModel interface {
		Insert(ctx context.Context, data *AutoOpengameRule) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AutoOpengameRule, error)
		Update(ctx context.Context, data *AutoOpengameRule) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]AutoOpengameRuleNew, error)
		DeleteSoft(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]AutoOpengameRuleNew, error)
	}

	defaultAutoOpengameRuleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AutoOpengameRule struct {
		Id             int64  `db:"id"`               // 自增ID
		ProjectId      int64  `db:"project_id"`       // 项目ID
		PlatformId     int64  `db:"platform_id"`      // 平台ID
		StartOpenTime  string `db:"start_open_time"`  // 固定开服起始时间[HHMM]
		EndOpenTime    string `db:"end_open_time"`    // 固定开服结束时间[HHMM]
		IntervalDay    int64  `db:"interval_day"`     // 固定间隔天数
		ThresholdValue int64  `db:"threshold_value"`  // 阀值[注册人数]
		NumberOfServer int64  `db:"number_of_server"` // 单次开服数需求
		OpenTime       string `db:"open_time"`        // 服时间[HH@MM@SS]
		StartOpenMulti string `db:"start_open_multi"` // 开始一次开多服的时间点
		EndOpenMulti   string `db:"end_open_multi"`   // 结束一次开多服的时间点
		State          int64  `db:"state"`            // 启用状态[1:启用;2:禁用]
	}
	AutoOpengameRuleNew struct {
		Id             int64  `db:"id"`               // 自增ID
		ProjectId      int64  `db:"project_id"`       // 项目ID
		ProjectCn      string `db:"project_cn"`       // 项目ID
		PlatformId     int64  `db:"platform_id"`      // 平台ID
		PlatformEn     string `db:"platform_en"`      // 平台ID
		StartOpenTime  string `db:"start_open_time"`  // 固定开服起始时间[HHMM]
		EndOpenTime    string `db:"end_open_time"`    // 固定开服结束时间[HHMM]
		IntervalDay    int64  `db:"interval_day"`     // 固定间隔天数
		ThresholdValue int64  `db:"threshold_value"`  // 阀值[注册人数]
		NumberOfServer int64  `db:"number_of_server"` // 单次开服数需求
		OpenTime       string `db:"open_time"`        // 服时间[HH@MM@SS]
		StartOpenMulti string `db:"start_open_multi"` // 开始一次开多服的时间点
		EndOpenMulti   string `db:"end_open_multi"`   // 结束一次开多服的时间点
		State          int64  `db:"state"`            // 启用状态[1:启用;2:禁用]
	}
)

func newAutoOpengameRuleModel(conn sqlx.SqlConn) *defaultAutoOpengameRuleModel {
	return &defaultAutoOpengameRuleModel{
		conn:  conn,
		table: "`auto_opengame_rule`",
	}
}

func (m *defaultAutoOpengameRuleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAutoOpengameRuleModel) FindOne(ctx context.Context, id int64) (*AutoOpengameRule, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", autoOpengameRuleRows, m.table)
	var resp AutoOpengameRule
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAutoOpengameRuleModel) Insert(ctx context.Context, data *AutoOpengameRule) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, autoOpengameRuleRowsExpectAutoSet)
	data.State = 1
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ProjectId, data.PlatformId, data.StartOpenTime, data.EndOpenTime, data.IntervalDay, data.ThresholdValue, data.NumberOfServer, data.OpenTime, data.StartOpenMulti, data.EndOpenMulti, data.State)
	return ret, err
}

func (m *defaultAutoOpengameRuleModel) Update(ctx context.Context, data *AutoOpengameRule) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, autoOpengameRuleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.PlatformId, data.StartOpenTime, data.EndOpenTime, data.IntervalDay, data.ThresholdValue, data.NumberOfServer, data.OpenTime, data.StartOpenMulti, data.EndOpenMulti, data.Id)
	return err
}

func (m *defaultAutoOpengameRuleModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultAutoOpengameRuleModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]AutoOpengameRuleNew, error) {
	query := `SELECT * FROM (
SELECT
	auto_opengame_rule.*,
	project.project_cn,
	platform.platform_en 
FROM
	auto_opengame_rule
	LEFT JOIN project ON auto_opengame_rule.project_id = project.project_id
	LEFT JOIN platform ON platform.platform_id = auto_opengame_rule.platform_id
	AND auto_opengame_rule.project_id = platform.project_id 
) A
where 1=1
%s
ORDER BY project_id desc,platform_id desc,start_open_time desc
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, condition)

	var resp []AutoOpengameRuleNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultAutoOpengameRuleModel) FindAll(ctx context.Context, filters ...interface{}) (*[]AutoOpengameRuleNew, error) {
	query := `SELECT * FROM (
SELECT
	auto_opengame_rule.*,
	project.project_cn,
	platform.platform_en 
FROM
	auto_opengame_rule
	LEFT JOIN project ON auto_opengame_rule.project_id = project.project_id
	LEFT JOIN platform ON platform.platform_id = auto_opengame_rule.platform_id
AND auto_opengame_rule.project_id = platform.project_id 
) A
where 1=1
%s
ORDER BY project_id desc,platform_id desc,start_open_time desc
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, condition)
	var resp []AutoOpengameRuleNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultAutoOpengameRuleModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	sql := `SELECT count(*) FROM (
SELECT
	auto_opengame_rule.*,
	project.project_cn,
	platform.platform_en 
FROM
	auto_opengame_rule
	LEFT JOIN project ON auto_opengame_rule.project_id = project.project_id
	LEFT JOIN platform ON platform.platform_id = auto_opengame_rule.platform_id
AND auto_opengame_rule.project_id = platform.project_id 
) A
where 1=1
%s
`
	query := fmt.Sprintf(sql, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultAutoOpengameRuleModel) DeleteSoft(ctx context.Context, id int64) error {
	state := 1
	one, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}
	if one.State == 1 {
		state = 2
	}
	query := fmt.Sprintf("update %s set `state`=? where `id` = ?", m.table)
	_, err = m.conn.ExecCtx(ctx, query, state, id)
	return err
}
