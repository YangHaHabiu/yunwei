// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	statServerGameInfoFieldNames          = builder.RawFieldNames(&StatServerGameInfo{})
	statServerGameInfoRows                = strings.Join(statServerGameInfoFieldNames, ",")
	statServerGameInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(statServerGameInfoFieldNames, "`update_time`", "`create_at`", "`update_at`"), ",")
	statServerGameInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(statServerGameInfoFieldNames, "`id`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	statServerGameInfoModel interface {
		Insert(ctx context.Context, data *StatServerGameInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StatServerGameInfo, error)
		Update(ctx context.Context, data *StatServerGameInfo) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, filters ...interface{}) (*[]StatServerGameInfo, error)
		FindPageListByPageGetBaseInfo(ctx context.Context, filters ...interface{}) (*[]GetSumOfCurrentInfo, error)
		FindPageListByPageTrend(ctx context.Context, types string, filters ...interface{}) (*[]GetTrendInfo, error)
	}

	defaultStatServerGameInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StatServerGameInfo struct {
		Id         int64  `db:"id"` // 自增id
		ProjectId  int64  `db:"project_id"`
		ProjectEn  string `db:"project_en"`
		Counts     int64  `db:"counts"`
		Detail     string `db:"detail"`
		CreateTime int64  `db:"create_time"`
		CountType  string `db:"count_type"` // 服务器server游戏服game
	}

	GetSumOfCurrentInfo struct {
		ProjectEn string `db:"project_en"`
		Cluster   string `db:"cluster"`
		HostRole  string `db:"host_role"`
		ServerNum int64  `db:"server_num"`
		GameNum   int64  `db:"game_num"`
	}

	GetTrendInfo struct {
		ProjectId int64  `db:"project_id"`
		ProjectEn string `db:"project_en"`
		Counts    int64  `db:"counts"`
		Detail    string `db:"detail"`
	}
)

var (
	getInfoBaseSql = `SELECT
	IFNULL(project_en,'') project_en,
	IFNULL(cluster,'其他') cluster,
	host_role,
	sum(game_num) as game_num,
	count( host_role ) AS server_num 
FROM
	(
	SELECT
		A.view_asset_id,
		A.view_user_project_id as project_id,
		A.view_user_project_en AS project_en,
		host_role,
		view_cluster_name AS cluster,
		count( server_alias ) AS game_num 
	FROM
		(
		SELECT
			view_assets.view_asset_id,
			view_user_project_id,
			view_user_project_en,
			view_en_host_role,
			view_cluster_name,
			server_alias,
		-- CASE
		--		WHEN FIND_IN_SET( 1, view_host_role_id )>= 1 THEN
		--		'game' 
		--		WHEN FIND_IN_SET( 2, view_host_role_id )>= 1 THEN
		--		'cross' ELSE 'other' 
		--	END AS host_role 
		CASE
			view_host_role_id
			WHEN '1' THEN
			'game'
			WHEN '2' THEN
			'cross' ELSE 'other'
		END AS host_role
		FROM
			view_assets
			LEFT JOIN view_user_asset ON view_assets.view_asset_id = view_user_asset.view_asset_id
			LEFT JOIN (select * from game_server where server_status in (1,2,5) ) game_server ON game_server.asset_id = view_assets.view_asset_id 
			WHERE view_assets.view_recycle_type = 2
				
		) A 
	GROUP BY
		view_user_project_id,
		view_asset_id 
	) B 
%s
GROUP BY
	project_id,
	host_role,
	cluster

`

	serverTrend = `SELECT
	project_id,
	project_en,
	sum( server_counts ) counts,
	IFNULL(GROUP_CONCAT( cluster_info ),'') detail
FROM
	(
	SELECT
		project_id,
		project_en,
		CONCAT(
			cluster,
			':',
		sum( server_num )) cluster_info,
		sum( server_num ) server_counts 
	FROM
		(
		SELECT
			project_id,
			project_en,
			cluster,
			host_role,
			sum( game_num ) AS game_num,
			count( host_role ) AS server_num 
		FROM
			(
			SELECT
				A.view_asset_id,
				A.view_user_project_id AS project_id,
				A.view_user_project_en AS project_en,
				host_role,
				view_cluster_name AS cluster,
				count( server_alias ) AS game_num 
			FROM
				(
				SELECT
					view_assets.view_asset_id,
					view_user_project_id,
					view_user_project_en,
					view_en_host_role,
					view_cluster_name,
					server_alias,
				CASE
						
						WHEN FIND_IN_SET( 1, view_host_role_id )>= 1 THEN
						'game' 
						WHEN FIND_IN_SET( 2, view_host_role_id )>= 1 THEN
						'cross' ELSE 'other' 
					END AS host_role 
				FROM
					view_assets
					LEFT JOIN view_user_asset ON view_assets.view_asset_id = view_user_asset.view_asset_id
					LEFT JOIN ( SELECT * FROM game_server WHERE server_status IN ( 1, 2, 5 ) ) game_server ON game_server.asset_id = view_assets.view_asset_id 
				WHERE
					view_assets.view_recycle_type = 2 
				) A 
			GROUP BY
				view_user_project_id,
				view_asset_id 
			) B 
		GROUP BY
			project_id,
			host_role,
			cluster 
		) C 
	GROUP BY
		project_id,
		cluster 
	) D 
%s
GROUP BY
	project_id
`
	gameTrend = `SELECT
	project_id,
	project_en,
	sum( game_counts ) counts,
	IFNULL(GROUP_CONCAT( cluster_info ),'') detail
FROM
	(
	SELECT
		project_id,
		project_en,
		CONCAT(
			cluster,
			':',
		sum( game_num )) cluster_info,
		sum( game_num ) game_counts 
	FROM
		(
		SELECT
			project_id,
			project_en,
			cluster,
			host_role,
			sum( game_num ) AS game_num,
			count( host_role ) AS server_num 
		FROM
			(
			SELECT
				A.view_asset_id,
				A.view_user_project_id AS project_id,
				A.view_user_project_en AS project_en,
				host_role,
				view_cluster_name AS cluster,
				count( server_alias ) AS game_num 
			FROM
				(
				SELECT
					view_assets.view_asset_id,
					view_user_project_id,
					view_user_project_en,
					view_en_host_role,
					view_cluster_name,
					server_alias,
				CASE
						
						WHEN FIND_IN_SET( 1, view_host_role_id )>= 1 THEN
						'game' 
						WHEN FIND_IN_SET( 2, view_host_role_id )>= 1 THEN
						'cross' ELSE 'other' 
					END AS host_role 
				FROM
					view_assets
					LEFT JOIN view_user_asset ON view_assets.view_asset_id = view_user_asset.view_asset_id
					LEFT JOIN ( SELECT * FROM game_server WHERE server_status IN ( 1, 2 ) ) game_server ON game_server.asset_id = view_assets.view_asset_id 
				WHERE
					view_assets.view_recycle_type = 2 
				) A 
			GROUP BY
				view_user_project_id,
				view_asset_id 
			) B 
		GROUP BY
			project_id,
			host_role,
			cluster 
		) C 
	GROUP BY
		project_id,
		cluster 
	) D
%s
GROUP BY
	project_id
`
)

func newStatServerGameInfoModel(conn sqlx.SqlConn) *defaultStatServerGameInfoModel {
	return &defaultStatServerGameInfoModel{
		conn:  conn,
		table: "`stat_server_game_info`",
	}
}

func (m *defaultStatServerGameInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStatServerGameInfoModel) FindOne(ctx context.Context, id int64) (*StatServerGameInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", statServerGameInfoRows, m.table)
	var resp StatServerGameInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStatServerGameInfoModel) Insert(ctx context.Context, data *StatServerGameInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?,?)", m.table, statServerGameInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ProjectId, data.ProjectEn, data.Counts, data.Detail, data.CreateTime, data.CountType)
	return ret, err
}

func (m *defaultStatServerGameInfoModel) Update(ctx context.Context, data *StatServerGameInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, statServerGameInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.ProjectEn, data.Counts, data.Detail, data.CreateTime, data.CountType, data.Id)
	return err
}

func (m *defaultStatServerGameInfoModel) tableName() string {
	return m.table
}

//当前信息汇总
func (m *defaultStatServerGameInfoModel) FindPageListByPageGetBaseInfo(ctx context.Context, filters ...interface{}) (*[]GetSumOfCurrentInfo, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	query := fmt.Sprintf(getInfoBaseSql, condition)
	var resp []GetSumOfCurrentInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//服务器-游戏服 趋势
func (m *defaultStatServerGameInfoModel) FindPageListByPageTrend(ctx context.Context, types string, filters ...interface{}) (*[]GetTrendInfo, error) {
	var (
		condition string
		sql       string
	)
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " where " + filter
	}
	if types == "server" {
		sql = serverTrend
	} else {
		sql = gameTrend
	}
	query := fmt.Sprintf(sql, condition)
	var resp []GetTrendInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//查询所有
func (m *defaultStatServerGameInfoModel) FindPageListByPage(ctx context.Context, filters ...interface{}) (*[]StatServerGameInfo, error) {
	var (
		condition string
		sql       string
	)
	sql = `SELECT * FROM stat_server_game_info WHERE create_time >= (unix_timestamp(now()) - unix_timestamp(str_to_date(CONCAT(DATE_SUB(CURDATE(), INTERVAL 1 YEAR) ," ","23:59:59"),'%%Y-%%m-%%d %%H:%%i:%%s')) ) %s`
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(sql, condition)
	var resp []StatServerGameInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
