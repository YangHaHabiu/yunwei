// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: yunwei.proto

package yunweiclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YunWeiClient is the client API for YunWei service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YunWeiClient interface {
	//Asset Rpc Start
	AssetAdd(ctx context.Context, in *AssetAddReq, opts ...grpc.CallOption) (*AssetAddResp, error)
	AssetList(ctx context.Context, in *AssetListReq, opts ...grpc.CallOption) (*AssetListResp, error)
	AssetUpdate(ctx context.Context, in *AssetUpdateReq, opts ...grpc.CallOption) (*AssetUpdateResp, error)
	AssetDelete(ctx context.Context, in *AssetDeleteReq, opts ...grpc.CallOption) (*AssetDeleteResp, error)
	AssetRecycleDelete(ctx context.Context, in *AssetRecycleDeleteReq, opts ...grpc.CallOption) (*AssetRecycleDeleteResp, error)
	GetWebSshTree(ctx context.Context, in *GetWebSshReq, opts ...grpc.CallOption) (*GetWebSshResp, error)
	AssetBatchDistribute(ctx context.Context, in *BatchDistributeReq, opts ...grpc.CallOption) (*BatchDistributeResp, error)
	//Asset Rpc End
	//FeatureServer Rpc Start
	FeatureServerAdd(ctx context.Context, in *AddFeatureServerReq, opts ...grpc.CallOption) (*FeatureServerCommonResp, error)
	FeatureServerUpdate(ctx context.Context, in *UpdateFeatureServerReq, opts ...grpc.CallOption) (*FeatureServerCommonResp, error)
	FeatureServerDelete(ctx context.Context, in *DeleteFeatureServerReq, opts ...grpc.CallOption) (*FeatureServerCommonResp, error)
	FeatureServerInfoGet(ctx context.Context, in *GetFeatureServerReq, opts ...grpc.CallOption) (*ListFeatureServerData, error)
	FeatureServerList(ctx context.Context, in *ListFeatureServerReq, opts ...grpc.CallOption) (*ListFeatureServerResp, error)
	//FeatureServer Rpc End
	//Platform Rpc Start
	PlatformAdd(ctx context.Context, in *AddPlatformReq, opts ...grpc.CallOption) (*PlatformCommonResp, error)
	PlatformUpdate(ctx context.Context, in *UpdatePlatformReq, opts ...grpc.CallOption) (*PlatformCommonResp, error)
	PlatformDelete(ctx context.Context, in *DeletePlatformReq, opts ...grpc.CallOption) (*PlatformCommonResp, error)
	PlatformGet(ctx context.Context, in *GetPlatformReq, opts ...grpc.CallOption) (*ListPlatformData, error)
	PlatformDetail(ctx context.Context, in *DetailPlatformReq, opts ...grpc.CallOption) (*DetailPlatformResp, error)
	PlatformList(ctx context.Context, in *ListPlatformReq, opts ...grpc.CallOption) (*ListPlatformResp, error)
	PlatformGetClusterInfo(ctx context.Context, in *GetClusterByPlatformReq, opts ...grpc.CallOption) (*GetClusterByPlatformResp, error)
	//Platform Rpc End
	//Cluster Rpc Start
	ClusterList(ctx context.Context, in *ListClusterReq, opts ...grpc.CallOption) (*ListClusterResp, error)
	//KeyManage Rpc Start
	KeyManageAdd(ctx context.Context, in *AddKeyManageReq, opts ...grpc.CallOption) (*KeyManageCommonResp, error)
	KeyManageUpdate(ctx context.Context, in *UpdateKeyManageReq, opts ...grpc.CallOption) (*KeyManageCommonResp, error)
	KeyManageDelete(ctx context.Context, in *DeleteKeyManageReq, opts ...grpc.CallOption) (*KeyManageCommonResp, error)
	KeyManageGet(ctx context.Context, in *GetKeyManageReq, opts ...grpc.CallOption) (*ListKeyManageData, error)
	KeyManageList(ctx context.Context, in *ListKeyManageReq, opts ...grpc.CallOption) (*ListKeyManageResp, error)
	//KeyManage Rpc End
	//MaintainPlan Rpc Start
	MaintainPlanAdd(ctx context.Context, in *AddMaintainPlanReq, opts ...grpc.CallOption) (*MaintainPlanCommonResp, error)
	MaintainPlanUpdate(ctx context.Context, in *UpdateMaintainPlanReq, opts ...grpc.CallOption) (*MaintainPlanCommonResp, error)
	MaintainPlanDelete(ctx context.Context, in *DeleteMaintainPlanReq, opts ...grpc.CallOption) (*MaintainPlanCommonResp, error)
	MaintainPlanGet(ctx context.Context, in *GetMaintainPlanReq, opts ...grpc.CallOption) (*ListMaintainPlanData, error)
	MaintainPlanList(ctx context.Context, in *ListMaintainPlanReq, opts ...grpc.CallOption) (*ListMaintainPlanResp, error)
	MaintainPlanRangeList(ctx context.Context, in *GetMaintainPlanListTreeByClsIdAndProIdReq, opts ...grpc.CallOption) (*GetMaintainPlanListTreeByClsIdAndProIdResp, error)
	MaintainGetClusterInfo(ctx context.Context, in *MaintainGetClusterInfoReq, opts ...grpc.CallOption) (*MaintainGetClusterInfoResp, error)
	//MaintainPlan Rpc End
	//MergePlan Rpc Start
	MergePlanAdd(ctx context.Context, in *AddMergePlanReq, opts ...grpc.CallOption) (*MergePlanCommonResp, error)
	MergePlanUpdate(ctx context.Context, in *UpdateMergePlanReq, opts ...grpc.CallOption) (*MergePlanCommonResp, error)
	MergePlanDelete(ctx context.Context, in *DeleteMergePlanReq, opts ...grpc.CallOption) (*MergePlanCommonResp, error)
	MergePlanGet(ctx context.Context, in *GetMergePlanReq, opts ...grpc.CallOption) (*ListMergePlanData, error)
	MergePlanList(ctx context.Context, in *ListMergePlanReq, opts ...grpc.CallOption) (*ListMergePlanResp, error)
	MergePlanRangeList(ctx context.Context, in *GetMergeListTreeByPlatIdAndProIdReq, opts ...grpc.CallOption) (*GetMergeListTreeByPlatIdAndProIdResp, error)
	MergeCheckServerRange(ctx context.Context, in *MergeCheckServerRangeReq, opts ...grpc.CallOption) (*MergeCheckServerRangeResp, error)
	//MergePlan Rpc End
	//OpenPlan Rpc Start
	OpenPlanAdd(ctx context.Context, in *AddOpenPlanReq, opts ...grpc.CallOption) (*OpenPlanCommonResp, error)
	OpenPlanUpdate(ctx context.Context, in *UpdateOpenPlanReq, opts ...grpc.CallOption) (*OpenPlanCommonResp, error)
	OpenPlanDelete(ctx context.Context, in *DeleteOpenPlanReq, opts ...grpc.CallOption) (*OpenPlanCommonResp, error)
	OpenPlanGet(ctx context.Context, in *GetOpenPlanReq, opts ...grpc.CallOption) (*ListOpenPlanData, error)
	OpenPlanList(ctx context.Context, in *ListOpenPlanReq, opts ...grpc.CallOption) (*ListOpenPlanResp, error)
	OpenPlanBatchModifyOpenTime(ctx context.Context, in *OpenPlanBatchModifyOpenTimeReq, opts ...grpc.CallOption) (*OpenPlanBatchModifyOpenTimeResp, error)
	OpenplanBatchUpdateStatus(ctx context.Context, in *BatchUpdateStatusReq, opts ...grpc.CallOption) (*BatchUpdateStatusResp, error)
	//OpenPlan Rpc End
	//Hosts Rpc Start
	HostsList(ctx context.Context, in *ListHostsReq, opts ...grpc.CallOption) (*ListHostsResp, error)
	//Hosts Rpc End
	//ServerName Rpc Start
	GameServerList(ctx context.Context, in *ListGameServerReq, opts ...grpc.CallOption) (*ListGameServerResp, error)
	//ServerName Rpc End
	//Tasks Rpc Start
	TasksAdd(ctx context.Context, in *AddTasksReq, opts ...grpc.CallOption) (*TasksCommonResp, error)
	TasksUpdate(ctx context.Context, in *UpdateTasksReq, opts ...grpc.CallOption) (*TasksCommonResp, error)
	TasksDelete(ctx context.Context, in *DeleteTasksReq, opts ...grpc.CallOption) (*TasksCommonResp, error)
	TasksGet(ctx context.Context, in *GetTasksReq, opts ...grpc.CallOption) (*GetTasksResp, error)
	TasksGetOneById(ctx context.Context, in *GetTasksReq, opts ...grpc.CallOption) (*ListTasksData, error)
	TasksList(ctx context.Context, in *ListTasksReq, opts ...grpc.CallOption) (*ListTasksResp, error)
	TaskGetOperation(ctx context.Context, in *TaskGetOperationReq, opts ...grpc.CallOption) (*TaskGetOperationResp, error)
	TaskStart(ctx context.Context, in *StartTasksReq, opts ...grpc.CallOption) (*StartTasksResp, error)
	TaskStop(ctx context.Context, in *StopTasksReq, opts ...grpc.CallOption) (*StopTasksResp, error)
	HotLogHistoryAdd(ctx context.Context, in *AddHotLogHistoryReq, opts ...grpc.CallOption) (*AddHotLogHistoryResp, error)
	HotLogHistoryList(ctx context.Context, in *ListHotLogHistoryReq, opts ...grpc.CallOption) (*ListHotLogHistoryResp, error)
	HotLogHistoryGet(ctx context.Context, in *GetHotLogHistoryReq, opts ...grpc.CallOption) (*ListHotLogHistoryData, error)
	TaskGetFormatJson(ctx context.Context, in *TaskGetFormatJsonReq, opts ...grpc.CallOption) (*TaskGetFormatJsonResp, error)
	WaitMergeList(ctx context.Context, in *ListWaitMergeReq, opts ...grpc.CallOption) (*ListWaitMergeResp, error)
	WaitInstallList(ctx context.Context, in *ListWaitInstallReq, opts ...grpc.CallOption) (*ListWaitInstallResp, error)
	TaskGetInstallLogList(ctx context.Context, in *ListInstallLogListReq, opts ...grpc.CallOption) (*ListInstallLogListResp, error)
	//Tasks Rpc End
	//TaskLogHistroy Rpc Start
	TaskLogHistroyList(ctx context.Context, in *ListTaskLogHistroyReq, opts ...grpc.CallOption) (*ListTaskLogHistroyResp, error)
	TaskLogHistroyDetail(ctx context.Context, in *DetailTaskLogHistroyReq, opts ...grpc.CallOption) (*DetailTaskLogHistroyResp, error)
	//TaskLogHistroy Rpc End
	//ConfigFile Rpc Start
	ConfigFileAdd(ctx context.Context, in *AddConfigFileReq, opts ...grpc.CallOption) (*ConfigFileCommonResp, error)
	ConfigFileUpdate(ctx context.Context, in *UpdateConfigFileReq, opts ...grpc.CallOption) (*ConfigFileCommonResp, error)
	ConfigFileDelete(ctx context.Context, in *DeleteConfigFileReq, opts ...grpc.CallOption) (*ConfigFileCommonResp, error)
	ConfigFileGet(ctx context.Context, in *GetConfigFileReq, opts ...grpc.CallOption) (*ListConfigFileData, error)
	ConfigFileList(ctx context.Context, in *ListConfigFileReq, opts ...grpc.CallOption) (*ListConfigFileResp, error)
	//ConfigFile Rpc End
	//ConfigFileDelivery Rpc Start
	ConfigFileDeliveryAdd(ctx context.Context, in *AddConfigFileDeliveryReq, opts ...grpc.CallOption) (*AddConfigFileDeliveryResp, error)
	ConfigFileDeliveryList(ctx context.Context, in *ListConfigFileDeliveryReq, opts ...grpc.CallOption) (*ListConfigFileDeliveryResp, error)
	ConfigFileDeliveryGet(ctx context.Context, in *GetConfigFileDeliveryTreeReq, opts ...grpc.CallOption) (*GetConfigFileDeliveryTreeResp, error)
	ConfigFileDeliveryGetLog(ctx context.Context, in *GetConfigFileDeliveryLogReq, opts ...grpc.CallOption) (*GetConfigFileDeliveryLogResp, error)
	ConfigFileDeliveryGetFileContent(ctx context.Context, in *ConfigFileDeliveryGetFileContentReq, opts ...grpc.CallOption) (*ConfigFileDeliveryGetFileContentResp, error)
	ConfigFileDeliveryUpdateTemplate(ctx context.Context, in *UpdateConfigFileDeliveryTemplateReq, opts ...grpc.CallOption) (*UpdateConfigFileDeliveryTemplateResp, error)
	//ConfigFileDelivery Rpc End
	//Help Start
	HelpList(ctx context.Context, in *HelpListReq, opts ...grpc.CallOption) (*HelpListResp, error)
	//Dashboard Start
	GetSumOfCurrentInfo(ctx context.Context, in *GetSumOfCurrentInfoListReq, opts ...grpc.CallOption) (*GetSumOfCurrentInfoListResp, error)
	GetTrendChart(ctx context.Context, in *GetTrendChartListReq, opts ...grpc.CallOption) (*GetTrendChartListResp, error)
	//AutoOpengameRule Rpc Start
	AutoOpengameRuleAdd(ctx context.Context, in *AddAutoOpengameRuleReq, opts ...grpc.CallOption) (*AutoOpengameRuleCommonResp, error)
	AutoOpengameRuleUpdate(ctx context.Context, in *UpdateAutoOpengameRuleReq, opts ...grpc.CallOption) (*AutoOpengameRuleCommonResp, error)
	AutoOpengameRuleDelete(ctx context.Context, in *DeleteAutoOpengameRuleReq, opts ...grpc.CallOption) (*AutoOpengameRuleCommonResp, error)
	AutoOpengameRuleGet(ctx context.Context, in *GetAutoOpengameRuleReq, opts ...grpc.CallOption) (*ListAutoOpengameRuleData, error)
	AutoOpengameRuleList(ctx context.Context, in *ListAutoOpengameRuleReq, opts ...grpc.CallOption) (*ListAutoOpengameRuleResp, error)
	//SwitchEntranceGameserver Rpc Start
	SwitchEntranceGameserverAdd(ctx context.Context, in *AddSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*SwitchEntranceGameserverCommonResp, error)
	SwitchEntranceGameserverUpdate(ctx context.Context, in *UpdateSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*SwitchEntranceGameserverCommonResp, error)
	SwitchEntranceGameserverDelete(ctx context.Context, in *DeleteSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*SwitchEntranceGameserverCommonResp, error)
	SwitchEntranceGameserverGet(ctx context.Context, in *GetSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*ListSwitchEntranceGameserverData, error)
	SwitchEntranceGameserverList(ctx context.Context, in *ListSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*ListSwitchEntranceGameserverResp, error)
	//AlarmThresholdManage Rpc Start
	AlarmThresholdManageAdd(ctx context.Context, in *AddAlarmThresholdManageReq, opts ...grpc.CallOption) (*AlarmThresholdManageCommonResp, error)
	AlarmThresholdManageUpdate(ctx context.Context, in *UpdateAlarmThresholdManageReq, opts ...grpc.CallOption) (*AlarmThresholdManageCommonResp, error)
	AlarmThresholdManageDelete(ctx context.Context, in *DeleteAlarmThresholdManageReq, opts ...grpc.CallOption) (*AlarmThresholdManageCommonResp, error)
	AlarmThresholdManageGet(ctx context.Context, in *GetAlarmThresholdManageReq, opts ...grpc.CallOption) (*ListAlarmThresholdManageData, error)
	AlarmThresholdManageList(ctx context.Context, in *ListAlarmThresholdManageReq, opts ...grpc.CallOption) (*ListAlarmThresholdManageResp, error)
	//TasksScheduleQueue Rpc Start
	TasksScheduleQueueAdd(ctx context.Context, in *AddTasksScheduleQueueReq, opts ...grpc.CallOption) (*TasksScheduleQueueCommonResp, error)
	TasksScheduleQueueUpdate(ctx context.Context, in *UpdateTasksScheduleQueueReq, opts ...grpc.CallOption) (*TasksScheduleQueueCommonResp, error)
	TasksScheduleQueueDelete(ctx context.Context, in *DeleteTasksScheduleQueueReq, opts ...grpc.CallOption) (*TasksScheduleQueueCommonResp, error)
	TasksScheduleQueueGet(ctx context.Context, in *GetTasksScheduleQueueReq, opts ...grpc.CallOption) (*ListTasksScheduleQueueData, error)
	TasksScheduleQueueList(ctx context.Context, in *ListTasksScheduleQueueReq, opts ...grpc.CallOption) (*ListTasksScheduleQueueResp, error)
}

type yunWeiClient struct {
	cc grpc.ClientConnInterface
}

func NewYunWeiClient(cc grpc.ClientConnInterface) YunWeiClient {
	return &yunWeiClient{cc}
}

func (c *yunWeiClient) AssetAdd(ctx context.Context, in *AssetAddReq, opts ...grpc.CallOption) (*AssetAddResp, error) {
	out := new(AssetAddResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AssetAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AssetList(ctx context.Context, in *AssetListReq, opts ...grpc.CallOption) (*AssetListResp, error) {
	out := new(AssetListResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AssetUpdate(ctx context.Context, in *AssetUpdateReq, opts ...grpc.CallOption) (*AssetUpdateResp, error) {
	out := new(AssetUpdateResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AssetUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AssetDelete(ctx context.Context, in *AssetDeleteReq, opts ...grpc.CallOption) (*AssetDeleteResp, error) {
	out := new(AssetDeleteResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AssetDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AssetRecycleDelete(ctx context.Context, in *AssetRecycleDeleteReq, opts ...grpc.CallOption) (*AssetRecycleDeleteResp, error) {
	out := new(AssetRecycleDeleteResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AssetRecycleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) GetWebSshTree(ctx context.Context, in *GetWebSshReq, opts ...grpc.CallOption) (*GetWebSshResp, error) {
	out := new(GetWebSshResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/GetWebSshTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AssetBatchDistribute(ctx context.Context, in *BatchDistributeReq, opts ...grpc.CallOption) (*BatchDistributeResp, error) {
	out := new(BatchDistributeResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AssetBatchDistribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) FeatureServerAdd(ctx context.Context, in *AddFeatureServerReq, opts ...grpc.CallOption) (*FeatureServerCommonResp, error) {
	out := new(FeatureServerCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/FeatureServerAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) FeatureServerUpdate(ctx context.Context, in *UpdateFeatureServerReq, opts ...grpc.CallOption) (*FeatureServerCommonResp, error) {
	out := new(FeatureServerCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/FeatureServerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) FeatureServerDelete(ctx context.Context, in *DeleteFeatureServerReq, opts ...grpc.CallOption) (*FeatureServerCommonResp, error) {
	out := new(FeatureServerCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/FeatureServerDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) FeatureServerInfoGet(ctx context.Context, in *GetFeatureServerReq, opts ...grpc.CallOption) (*ListFeatureServerData, error) {
	out := new(ListFeatureServerData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/FeatureServerInfoGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) FeatureServerList(ctx context.Context, in *ListFeatureServerReq, opts ...grpc.CallOption) (*ListFeatureServerResp, error) {
	out := new(ListFeatureServerResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/FeatureServerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) PlatformAdd(ctx context.Context, in *AddPlatformReq, opts ...grpc.CallOption) (*PlatformCommonResp, error) {
	out := new(PlatformCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/PlatformAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) PlatformUpdate(ctx context.Context, in *UpdatePlatformReq, opts ...grpc.CallOption) (*PlatformCommonResp, error) {
	out := new(PlatformCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/PlatformUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) PlatformDelete(ctx context.Context, in *DeletePlatformReq, opts ...grpc.CallOption) (*PlatformCommonResp, error) {
	out := new(PlatformCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/PlatformDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) PlatformGet(ctx context.Context, in *GetPlatformReq, opts ...grpc.CallOption) (*ListPlatformData, error) {
	out := new(ListPlatformData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/PlatformGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) PlatformDetail(ctx context.Context, in *DetailPlatformReq, opts ...grpc.CallOption) (*DetailPlatformResp, error) {
	out := new(DetailPlatformResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/PlatformDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) PlatformList(ctx context.Context, in *ListPlatformReq, opts ...grpc.CallOption) (*ListPlatformResp, error) {
	out := new(ListPlatformResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/PlatformList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) PlatformGetClusterInfo(ctx context.Context, in *GetClusterByPlatformReq, opts ...grpc.CallOption) (*GetClusterByPlatformResp, error) {
	out := new(GetClusterByPlatformResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/PlatformGetClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ClusterList(ctx context.Context, in *ListClusterReq, opts ...grpc.CallOption) (*ListClusterResp, error) {
	out := new(ListClusterResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ClusterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) KeyManageAdd(ctx context.Context, in *AddKeyManageReq, opts ...grpc.CallOption) (*KeyManageCommonResp, error) {
	out := new(KeyManageCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/KeyManageAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) KeyManageUpdate(ctx context.Context, in *UpdateKeyManageReq, opts ...grpc.CallOption) (*KeyManageCommonResp, error) {
	out := new(KeyManageCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/KeyManageUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) KeyManageDelete(ctx context.Context, in *DeleteKeyManageReq, opts ...grpc.CallOption) (*KeyManageCommonResp, error) {
	out := new(KeyManageCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/KeyManageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) KeyManageGet(ctx context.Context, in *GetKeyManageReq, opts ...grpc.CallOption) (*ListKeyManageData, error) {
	out := new(ListKeyManageData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/KeyManageGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) KeyManageList(ctx context.Context, in *ListKeyManageReq, opts ...grpc.CallOption) (*ListKeyManageResp, error) {
	out := new(ListKeyManageResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/KeyManageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MaintainPlanAdd(ctx context.Context, in *AddMaintainPlanReq, opts ...grpc.CallOption) (*MaintainPlanCommonResp, error) {
	out := new(MaintainPlanCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MaintainPlanAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MaintainPlanUpdate(ctx context.Context, in *UpdateMaintainPlanReq, opts ...grpc.CallOption) (*MaintainPlanCommonResp, error) {
	out := new(MaintainPlanCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MaintainPlanUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MaintainPlanDelete(ctx context.Context, in *DeleteMaintainPlanReq, opts ...grpc.CallOption) (*MaintainPlanCommonResp, error) {
	out := new(MaintainPlanCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MaintainPlanDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MaintainPlanGet(ctx context.Context, in *GetMaintainPlanReq, opts ...grpc.CallOption) (*ListMaintainPlanData, error) {
	out := new(ListMaintainPlanData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MaintainPlanGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MaintainPlanList(ctx context.Context, in *ListMaintainPlanReq, opts ...grpc.CallOption) (*ListMaintainPlanResp, error) {
	out := new(ListMaintainPlanResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MaintainPlanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MaintainPlanRangeList(ctx context.Context, in *GetMaintainPlanListTreeByClsIdAndProIdReq, opts ...grpc.CallOption) (*GetMaintainPlanListTreeByClsIdAndProIdResp, error) {
	out := new(GetMaintainPlanListTreeByClsIdAndProIdResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MaintainPlanRangeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MaintainGetClusterInfo(ctx context.Context, in *MaintainGetClusterInfoReq, opts ...grpc.CallOption) (*MaintainGetClusterInfoResp, error) {
	out := new(MaintainGetClusterInfoResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MaintainGetClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MergePlanAdd(ctx context.Context, in *AddMergePlanReq, opts ...grpc.CallOption) (*MergePlanCommonResp, error) {
	out := new(MergePlanCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MergePlanAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MergePlanUpdate(ctx context.Context, in *UpdateMergePlanReq, opts ...grpc.CallOption) (*MergePlanCommonResp, error) {
	out := new(MergePlanCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MergePlanUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MergePlanDelete(ctx context.Context, in *DeleteMergePlanReq, opts ...grpc.CallOption) (*MergePlanCommonResp, error) {
	out := new(MergePlanCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MergePlanDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MergePlanGet(ctx context.Context, in *GetMergePlanReq, opts ...grpc.CallOption) (*ListMergePlanData, error) {
	out := new(ListMergePlanData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MergePlanGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MergePlanList(ctx context.Context, in *ListMergePlanReq, opts ...grpc.CallOption) (*ListMergePlanResp, error) {
	out := new(ListMergePlanResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MergePlanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MergePlanRangeList(ctx context.Context, in *GetMergeListTreeByPlatIdAndProIdReq, opts ...grpc.CallOption) (*GetMergeListTreeByPlatIdAndProIdResp, error) {
	out := new(GetMergeListTreeByPlatIdAndProIdResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MergePlanRangeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) MergeCheckServerRange(ctx context.Context, in *MergeCheckServerRangeReq, opts ...grpc.CallOption) (*MergeCheckServerRangeResp, error) {
	out := new(MergeCheckServerRangeResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/MergeCheckServerRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) OpenPlanAdd(ctx context.Context, in *AddOpenPlanReq, opts ...grpc.CallOption) (*OpenPlanCommonResp, error) {
	out := new(OpenPlanCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/OpenPlanAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) OpenPlanUpdate(ctx context.Context, in *UpdateOpenPlanReq, opts ...grpc.CallOption) (*OpenPlanCommonResp, error) {
	out := new(OpenPlanCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/OpenPlanUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) OpenPlanDelete(ctx context.Context, in *DeleteOpenPlanReq, opts ...grpc.CallOption) (*OpenPlanCommonResp, error) {
	out := new(OpenPlanCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/OpenPlanDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) OpenPlanGet(ctx context.Context, in *GetOpenPlanReq, opts ...grpc.CallOption) (*ListOpenPlanData, error) {
	out := new(ListOpenPlanData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/OpenPlanGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) OpenPlanList(ctx context.Context, in *ListOpenPlanReq, opts ...grpc.CallOption) (*ListOpenPlanResp, error) {
	out := new(ListOpenPlanResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/OpenPlanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) OpenPlanBatchModifyOpenTime(ctx context.Context, in *OpenPlanBatchModifyOpenTimeReq, opts ...grpc.CallOption) (*OpenPlanBatchModifyOpenTimeResp, error) {
	out := new(OpenPlanBatchModifyOpenTimeResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/OpenPlanBatchModifyOpenTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) OpenplanBatchUpdateStatus(ctx context.Context, in *BatchUpdateStatusReq, opts ...grpc.CallOption) (*BatchUpdateStatusResp, error) {
	out := new(BatchUpdateStatusResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/OpenplanBatchUpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) HostsList(ctx context.Context, in *ListHostsReq, opts ...grpc.CallOption) (*ListHostsResp, error) {
	out := new(ListHostsResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/HostsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) GameServerList(ctx context.Context, in *ListGameServerReq, opts ...grpc.CallOption) (*ListGameServerResp, error) {
	out := new(ListGameServerResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/GameServerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksAdd(ctx context.Context, in *AddTasksReq, opts ...grpc.CallOption) (*TasksCommonResp, error) {
	out := new(TasksCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksUpdate(ctx context.Context, in *UpdateTasksReq, opts ...grpc.CallOption) (*TasksCommonResp, error) {
	out := new(TasksCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksDelete(ctx context.Context, in *DeleteTasksReq, opts ...grpc.CallOption) (*TasksCommonResp, error) {
	out := new(TasksCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksGet(ctx context.Context, in *GetTasksReq, opts ...grpc.CallOption) (*GetTasksResp, error) {
	out := new(GetTasksResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksGetOneById(ctx context.Context, in *GetTasksReq, opts ...grpc.CallOption) (*ListTasksData, error) {
	out := new(ListTasksData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksGetOneById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksList(ctx context.Context, in *ListTasksReq, opts ...grpc.CallOption) (*ListTasksResp, error) {
	out := new(ListTasksResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TaskGetOperation(ctx context.Context, in *TaskGetOperationReq, opts ...grpc.CallOption) (*TaskGetOperationResp, error) {
	out := new(TaskGetOperationResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TaskGetOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TaskStart(ctx context.Context, in *StartTasksReq, opts ...grpc.CallOption) (*StartTasksResp, error) {
	out := new(StartTasksResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TaskStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TaskStop(ctx context.Context, in *StopTasksReq, opts ...grpc.CallOption) (*StopTasksResp, error) {
	out := new(StopTasksResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TaskStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) HotLogHistoryAdd(ctx context.Context, in *AddHotLogHistoryReq, opts ...grpc.CallOption) (*AddHotLogHistoryResp, error) {
	out := new(AddHotLogHistoryResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/HotLogHistoryAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) HotLogHistoryList(ctx context.Context, in *ListHotLogHistoryReq, opts ...grpc.CallOption) (*ListHotLogHistoryResp, error) {
	out := new(ListHotLogHistoryResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/HotLogHistoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) HotLogHistoryGet(ctx context.Context, in *GetHotLogHistoryReq, opts ...grpc.CallOption) (*ListHotLogHistoryData, error) {
	out := new(ListHotLogHistoryData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/HotLogHistoryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TaskGetFormatJson(ctx context.Context, in *TaskGetFormatJsonReq, opts ...grpc.CallOption) (*TaskGetFormatJsonResp, error) {
	out := new(TaskGetFormatJsonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TaskGetFormatJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) WaitMergeList(ctx context.Context, in *ListWaitMergeReq, opts ...grpc.CallOption) (*ListWaitMergeResp, error) {
	out := new(ListWaitMergeResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/WaitMergeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) WaitInstallList(ctx context.Context, in *ListWaitInstallReq, opts ...grpc.CallOption) (*ListWaitInstallResp, error) {
	out := new(ListWaitInstallResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/WaitInstallList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TaskGetInstallLogList(ctx context.Context, in *ListInstallLogListReq, opts ...grpc.CallOption) (*ListInstallLogListResp, error) {
	out := new(ListInstallLogListResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TaskGetInstallLogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TaskLogHistroyList(ctx context.Context, in *ListTaskLogHistroyReq, opts ...grpc.CallOption) (*ListTaskLogHistroyResp, error) {
	out := new(ListTaskLogHistroyResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TaskLogHistroyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TaskLogHistroyDetail(ctx context.Context, in *DetailTaskLogHistroyReq, opts ...grpc.CallOption) (*DetailTaskLogHistroyResp, error) {
	out := new(DetailTaskLogHistroyResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TaskLogHistroyDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileAdd(ctx context.Context, in *AddConfigFileReq, opts ...grpc.CallOption) (*ConfigFileCommonResp, error) {
	out := new(ConfigFileCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileUpdate(ctx context.Context, in *UpdateConfigFileReq, opts ...grpc.CallOption) (*ConfigFileCommonResp, error) {
	out := new(ConfigFileCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileDelete(ctx context.Context, in *DeleteConfigFileReq, opts ...grpc.CallOption) (*ConfigFileCommonResp, error) {
	out := new(ConfigFileCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileGet(ctx context.Context, in *GetConfigFileReq, opts ...grpc.CallOption) (*ListConfigFileData, error) {
	out := new(ListConfigFileData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileList(ctx context.Context, in *ListConfigFileReq, opts ...grpc.CallOption) (*ListConfigFileResp, error) {
	out := new(ListConfigFileResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileDeliveryAdd(ctx context.Context, in *AddConfigFileDeliveryReq, opts ...grpc.CallOption) (*AddConfigFileDeliveryResp, error) {
	out := new(AddConfigFileDeliveryResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileDeliveryAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileDeliveryList(ctx context.Context, in *ListConfigFileDeliveryReq, opts ...grpc.CallOption) (*ListConfigFileDeliveryResp, error) {
	out := new(ListConfigFileDeliveryResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileDeliveryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileDeliveryGet(ctx context.Context, in *GetConfigFileDeliveryTreeReq, opts ...grpc.CallOption) (*GetConfigFileDeliveryTreeResp, error) {
	out := new(GetConfigFileDeliveryTreeResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileDeliveryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileDeliveryGetLog(ctx context.Context, in *GetConfigFileDeliveryLogReq, opts ...grpc.CallOption) (*GetConfigFileDeliveryLogResp, error) {
	out := new(GetConfigFileDeliveryLogResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileDeliveryGetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileDeliveryGetFileContent(ctx context.Context, in *ConfigFileDeliveryGetFileContentReq, opts ...grpc.CallOption) (*ConfigFileDeliveryGetFileContentResp, error) {
	out := new(ConfigFileDeliveryGetFileContentResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileDeliveryGetFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) ConfigFileDeliveryUpdateTemplate(ctx context.Context, in *UpdateConfigFileDeliveryTemplateReq, opts ...grpc.CallOption) (*UpdateConfigFileDeliveryTemplateResp, error) {
	out := new(UpdateConfigFileDeliveryTemplateResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/ConfigFileDeliveryUpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) HelpList(ctx context.Context, in *HelpListReq, opts ...grpc.CallOption) (*HelpListResp, error) {
	out := new(HelpListResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/HelpList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) GetSumOfCurrentInfo(ctx context.Context, in *GetSumOfCurrentInfoListReq, opts ...grpc.CallOption) (*GetSumOfCurrentInfoListResp, error) {
	out := new(GetSumOfCurrentInfoListResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/GetSumOfCurrentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) GetTrendChart(ctx context.Context, in *GetTrendChartListReq, opts ...grpc.CallOption) (*GetTrendChartListResp, error) {
	out := new(GetTrendChartListResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/GetTrendChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AutoOpengameRuleAdd(ctx context.Context, in *AddAutoOpengameRuleReq, opts ...grpc.CallOption) (*AutoOpengameRuleCommonResp, error) {
	out := new(AutoOpengameRuleCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AutoOpengameRuleAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AutoOpengameRuleUpdate(ctx context.Context, in *UpdateAutoOpengameRuleReq, opts ...grpc.CallOption) (*AutoOpengameRuleCommonResp, error) {
	out := new(AutoOpengameRuleCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AutoOpengameRuleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AutoOpengameRuleDelete(ctx context.Context, in *DeleteAutoOpengameRuleReq, opts ...grpc.CallOption) (*AutoOpengameRuleCommonResp, error) {
	out := new(AutoOpengameRuleCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AutoOpengameRuleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AutoOpengameRuleGet(ctx context.Context, in *GetAutoOpengameRuleReq, opts ...grpc.CallOption) (*ListAutoOpengameRuleData, error) {
	out := new(ListAutoOpengameRuleData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AutoOpengameRuleGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AutoOpengameRuleList(ctx context.Context, in *ListAutoOpengameRuleReq, opts ...grpc.CallOption) (*ListAutoOpengameRuleResp, error) {
	out := new(ListAutoOpengameRuleResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AutoOpengameRuleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) SwitchEntranceGameserverAdd(ctx context.Context, in *AddSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*SwitchEntranceGameserverCommonResp, error) {
	out := new(SwitchEntranceGameserverCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/SwitchEntranceGameserverAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) SwitchEntranceGameserverUpdate(ctx context.Context, in *UpdateSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*SwitchEntranceGameserverCommonResp, error) {
	out := new(SwitchEntranceGameserverCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/SwitchEntranceGameserverUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) SwitchEntranceGameserverDelete(ctx context.Context, in *DeleteSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*SwitchEntranceGameserverCommonResp, error) {
	out := new(SwitchEntranceGameserverCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/SwitchEntranceGameserverDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) SwitchEntranceGameserverGet(ctx context.Context, in *GetSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*ListSwitchEntranceGameserverData, error) {
	out := new(ListSwitchEntranceGameserverData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/SwitchEntranceGameserverGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) SwitchEntranceGameserverList(ctx context.Context, in *ListSwitchEntranceGameserverReq, opts ...grpc.CallOption) (*ListSwitchEntranceGameserverResp, error) {
	out := new(ListSwitchEntranceGameserverResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/SwitchEntranceGameserverList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AlarmThresholdManageAdd(ctx context.Context, in *AddAlarmThresholdManageReq, opts ...grpc.CallOption) (*AlarmThresholdManageCommonResp, error) {
	out := new(AlarmThresholdManageCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AlarmThresholdManageAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AlarmThresholdManageUpdate(ctx context.Context, in *UpdateAlarmThresholdManageReq, opts ...grpc.CallOption) (*AlarmThresholdManageCommonResp, error) {
	out := new(AlarmThresholdManageCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AlarmThresholdManageUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AlarmThresholdManageDelete(ctx context.Context, in *DeleteAlarmThresholdManageReq, opts ...grpc.CallOption) (*AlarmThresholdManageCommonResp, error) {
	out := new(AlarmThresholdManageCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AlarmThresholdManageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AlarmThresholdManageGet(ctx context.Context, in *GetAlarmThresholdManageReq, opts ...grpc.CallOption) (*ListAlarmThresholdManageData, error) {
	out := new(ListAlarmThresholdManageData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AlarmThresholdManageGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) AlarmThresholdManageList(ctx context.Context, in *ListAlarmThresholdManageReq, opts ...grpc.CallOption) (*ListAlarmThresholdManageResp, error) {
	out := new(ListAlarmThresholdManageResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/AlarmThresholdManageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksScheduleQueueAdd(ctx context.Context, in *AddTasksScheduleQueueReq, opts ...grpc.CallOption) (*TasksScheduleQueueCommonResp, error) {
	out := new(TasksScheduleQueueCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksScheduleQueueAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksScheduleQueueUpdate(ctx context.Context, in *UpdateTasksScheduleQueueReq, opts ...grpc.CallOption) (*TasksScheduleQueueCommonResp, error) {
	out := new(TasksScheduleQueueCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksScheduleQueueUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksScheduleQueueDelete(ctx context.Context, in *DeleteTasksScheduleQueueReq, opts ...grpc.CallOption) (*TasksScheduleQueueCommonResp, error) {
	out := new(TasksScheduleQueueCommonResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksScheduleQueueDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksScheduleQueueGet(ctx context.Context, in *GetTasksScheduleQueueReq, opts ...grpc.CallOption) (*ListTasksScheduleQueueData, error) {
	out := new(ListTasksScheduleQueueData)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksScheduleQueueGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yunWeiClient) TasksScheduleQueueList(ctx context.Context, in *ListTasksScheduleQueueReq, opts ...grpc.CallOption) (*ListTasksScheduleQueueResp, error) {
	out := new(ListTasksScheduleQueueResp)
	err := c.cc.Invoke(ctx, "/yunweiclient.YunWei/TasksScheduleQueueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YunWeiServer is the server API for YunWei service.
// All implementations must embed UnimplementedYunWeiServer
// for forward compatibility
type YunWeiServer interface {
	//Asset Rpc Start
	AssetAdd(context.Context, *AssetAddReq) (*AssetAddResp, error)
	AssetList(context.Context, *AssetListReq) (*AssetListResp, error)
	AssetUpdate(context.Context, *AssetUpdateReq) (*AssetUpdateResp, error)
	AssetDelete(context.Context, *AssetDeleteReq) (*AssetDeleteResp, error)
	AssetRecycleDelete(context.Context, *AssetRecycleDeleteReq) (*AssetRecycleDeleteResp, error)
	GetWebSshTree(context.Context, *GetWebSshReq) (*GetWebSshResp, error)
	AssetBatchDistribute(context.Context, *BatchDistributeReq) (*BatchDistributeResp, error)
	//Asset Rpc End
	//FeatureServer Rpc Start
	FeatureServerAdd(context.Context, *AddFeatureServerReq) (*FeatureServerCommonResp, error)
	FeatureServerUpdate(context.Context, *UpdateFeatureServerReq) (*FeatureServerCommonResp, error)
	FeatureServerDelete(context.Context, *DeleteFeatureServerReq) (*FeatureServerCommonResp, error)
	FeatureServerInfoGet(context.Context, *GetFeatureServerReq) (*ListFeatureServerData, error)
	FeatureServerList(context.Context, *ListFeatureServerReq) (*ListFeatureServerResp, error)
	//FeatureServer Rpc End
	//Platform Rpc Start
	PlatformAdd(context.Context, *AddPlatformReq) (*PlatformCommonResp, error)
	PlatformUpdate(context.Context, *UpdatePlatformReq) (*PlatformCommonResp, error)
	PlatformDelete(context.Context, *DeletePlatformReq) (*PlatformCommonResp, error)
	PlatformGet(context.Context, *GetPlatformReq) (*ListPlatformData, error)
	PlatformDetail(context.Context, *DetailPlatformReq) (*DetailPlatformResp, error)
	PlatformList(context.Context, *ListPlatformReq) (*ListPlatformResp, error)
	PlatformGetClusterInfo(context.Context, *GetClusterByPlatformReq) (*GetClusterByPlatformResp, error)
	//Platform Rpc End
	//Cluster Rpc Start
	ClusterList(context.Context, *ListClusterReq) (*ListClusterResp, error)
	//KeyManage Rpc Start
	KeyManageAdd(context.Context, *AddKeyManageReq) (*KeyManageCommonResp, error)
	KeyManageUpdate(context.Context, *UpdateKeyManageReq) (*KeyManageCommonResp, error)
	KeyManageDelete(context.Context, *DeleteKeyManageReq) (*KeyManageCommonResp, error)
	KeyManageGet(context.Context, *GetKeyManageReq) (*ListKeyManageData, error)
	KeyManageList(context.Context, *ListKeyManageReq) (*ListKeyManageResp, error)
	//KeyManage Rpc End
	//MaintainPlan Rpc Start
	MaintainPlanAdd(context.Context, *AddMaintainPlanReq) (*MaintainPlanCommonResp, error)
	MaintainPlanUpdate(context.Context, *UpdateMaintainPlanReq) (*MaintainPlanCommonResp, error)
	MaintainPlanDelete(context.Context, *DeleteMaintainPlanReq) (*MaintainPlanCommonResp, error)
	MaintainPlanGet(context.Context, *GetMaintainPlanReq) (*ListMaintainPlanData, error)
	MaintainPlanList(context.Context, *ListMaintainPlanReq) (*ListMaintainPlanResp, error)
	MaintainPlanRangeList(context.Context, *GetMaintainPlanListTreeByClsIdAndProIdReq) (*GetMaintainPlanListTreeByClsIdAndProIdResp, error)
	MaintainGetClusterInfo(context.Context, *MaintainGetClusterInfoReq) (*MaintainGetClusterInfoResp, error)
	//MaintainPlan Rpc End
	//MergePlan Rpc Start
	MergePlanAdd(context.Context, *AddMergePlanReq) (*MergePlanCommonResp, error)
	MergePlanUpdate(context.Context, *UpdateMergePlanReq) (*MergePlanCommonResp, error)
	MergePlanDelete(context.Context, *DeleteMergePlanReq) (*MergePlanCommonResp, error)
	MergePlanGet(context.Context, *GetMergePlanReq) (*ListMergePlanData, error)
	MergePlanList(context.Context, *ListMergePlanReq) (*ListMergePlanResp, error)
	MergePlanRangeList(context.Context, *GetMergeListTreeByPlatIdAndProIdReq) (*GetMergeListTreeByPlatIdAndProIdResp, error)
	MergeCheckServerRange(context.Context, *MergeCheckServerRangeReq) (*MergeCheckServerRangeResp, error)
	//MergePlan Rpc End
	//OpenPlan Rpc Start
	OpenPlanAdd(context.Context, *AddOpenPlanReq) (*OpenPlanCommonResp, error)
	OpenPlanUpdate(context.Context, *UpdateOpenPlanReq) (*OpenPlanCommonResp, error)
	OpenPlanDelete(context.Context, *DeleteOpenPlanReq) (*OpenPlanCommonResp, error)
	OpenPlanGet(context.Context, *GetOpenPlanReq) (*ListOpenPlanData, error)
	OpenPlanList(context.Context, *ListOpenPlanReq) (*ListOpenPlanResp, error)
	OpenPlanBatchModifyOpenTime(context.Context, *OpenPlanBatchModifyOpenTimeReq) (*OpenPlanBatchModifyOpenTimeResp, error)
	OpenplanBatchUpdateStatus(context.Context, *BatchUpdateStatusReq) (*BatchUpdateStatusResp, error)
	//OpenPlan Rpc End
	//Hosts Rpc Start
	HostsList(context.Context, *ListHostsReq) (*ListHostsResp, error)
	//Hosts Rpc End
	//ServerName Rpc Start
	GameServerList(context.Context, *ListGameServerReq) (*ListGameServerResp, error)
	//ServerName Rpc End
	//Tasks Rpc Start
	TasksAdd(context.Context, *AddTasksReq) (*TasksCommonResp, error)
	TasksUpdate(context.Context, *UpdateTasksReq) (*TasksCommonResp, error)
	TasksDelete(context.Context, *DeleteTasksReq) (*TasksCommonResp, error)
	TasksGet(context.Context, *GetTasksReq) (*GetTasksResp, error)
	TasksGetOneById(context.Context, *GetTasksReq) (*ListTasksData, error)
	TasksList(context.Context, *ListTasksReq) (*ListTasksResp, error)
	TaskGetOperation(context.Context, *TaskGetOperationReq) (*TaskGetOperationResp, error)
	TaskStart(context.Context, *StartTasksReq) (*StartTasksResp, error)
	TaskStop(context.Context, *StopTasksReq) (*StopTasksResp, error)
	HotLogHistoryAdd(context.Context, *AddHotLogHistoryReq) (*AddHotLogHistoryResp, error)
	HotLogHistoryList(context.Context, *ListHotLogHistoryReq) (*ListHotLogHistoryResp, error)
	HotLogHistoryGet(context.Context, *GetHotLogHistoryReq) (*ListHotLogHistoryData, error)
	TaskGetFormatJson(context.Context, *TaskGetFormatJsonReq) (*TaskGetFormatJsonResp, error)
	WaitMergeList(context.Context, *ListWaitMergeReq) (*ListWaitMergeResp, error)
	WaitInstallList(context.Context, *ListWaitInstallReq) (*ListWaitInstallResp, error)
	TaskGetInstallLogList(context.Context, *ListInstallLogListReq) (*ListInstallLogListResp, error)
	//Tasks Rpc End
	//TaskLogHistroy Rpc Start
	TaskLogHistroyList(context.Context, *ListTaskLogHistroyReq) (*ListTaskLogHistroyResp, error)
	TaskLogHistroyDetail(context.Context, *DetailTaskLogHistroyReq) (*DetailTaskLogHistroyResp, error)
	//TaskLogHistroy Rpc End
	//ConfigFile Rpc Start
	ConfigFileAdd(context.Context, *AddConfigFileReq) (*ConfigFileCommonResp, error)
	ConfigFileUpdate(context.Context, *UpdateConfigFileReq) (*ConfigFileCommonResp, error)
	ConfigFileDelete(context.Context, *DeleteConfigFileReq) (*ConfigFileCommonResp, error)
	ConfigFileGet(context.Context, *GetConfigFileReq) (*ListConfigFileData, error)
	ConfigFileList(context.Context, *ListConfigFileReq) (*ListConfigFileResp, error)
	//ConfigFile Rpc End
	//ConfigFileDelivery Rpc Start
	ConfigFileDeliveryAdd(context.Context, *AddConfigFileDeliveryReq) (*AddConfigFileDeliveryResp, error)
	ConfigFileDeliveryList(context.Context, *ListConfigFileDeliveryReq) (*ListConfigFileDeliveryResp, error)
	ConfigFileDeliveryGet(context.Context, *GetConfigFileDeliveryTreeReq) (*GetConfigFileDeliveryTreeResp, error)
	ConfigFileDeliveryGetLog(context.Context, *GetConfigFileDeliveryLogReq) (*GetConfigFileDeliveryLogResp, error)
	ConfigFileDeliveryGetFileContent(context.Context, *ConfigFileDeliveryGetFileContentReq) (*ConfigFileDeliveryGetFileContentResp, error)
	ConfigFileDeliveryUpdateTemplate(context.Context, *UpdateConfigFileDeliveryTemplateReq) (*UpdateConfigFileDeliveryTemplateResp, error)
	//ConfigFileDelivery Rpc End
	//Help Start
	HelpList(context.Context, *HelpListReq) (*HelpListResp, error)
	//Dashboard Start
	GetSumOfCurrentInfo(context.Context, *GetSumOfCurrentInfoListReq) (*GetSumOfCurrentInfoListResp, error)
	GetTrendChart(context.Context, *GetTrendChartListReq) (*GetTrendChartListResp, error)
	//AutoOpengameRule Rpc Start
	AutoOpengameRuleAdd(context.Context, *AddAutoOpengameRuleReq) (*AutoOpengameRuleCommonResp, error)
	AutoOpengameRuleUpdate(context.Context, *UpdateAutoOpengameRuleReq) (*AutoOpengameRuleCommonResp, error)
	AutoOpengameRuleDelete(context.Context, *DeleteAutoOpengameRuleReq) (*AutoOpengameRuleCommonResp, error)
	AutoOpengameRuleGet(context.Context, *GetAutoOpengameRuleReq) (*ListAutoOpengameRuleData, error)
	AutoOpengameRuleList(context.Context, *ListAutoOpengameRuleReq) (*ListAutoOpengameRuleResp, error)
	//SwitchEntranceGameserver Rpc Start
	SwitchEntranceGameserverAdd(context.Context, *AddSwitchEntranceGameserverReq) (*SwitchEntranceGameserverCommonResp, error)
	SwitchEntranceGameserverUpdate(context.Context, *UpdateSwitchEntranceGameserverReq) (*SwitchEntranceGameserverCommonResp, error)
	SwitchEntranceGameserverDelete(context.Context, *DeleteSwitchEntranceGameserverReq) (*SwitchEntranceGameserverCommonResp, error)
	SwitchEntranceGameserverGet(context.Context, *GetSwitchEntranceGameserverReq) (*ListSwitchEntranceGameserverData, error)
	SwitchEntranceGameserverList(context.Context, *ListSwitchEntranceGameserverReq) (*ListSwitchEntranceGameserverResp, error)
	//AlarmThresholdManage Rpc Start
	AlarmThresholdManageAdd(context.Context, *AddAlarmThresholdManageReq) (*AlarmThresholdManageCommonResp, error)
	AlarmThresholdManageUpdate(context.Context, *UpdateAlarmThresholdManageReq) (*AlarmThresholdManageCommonResp, error)
	AlarmThresholdManageDelete(context.Context, *DeleteAlarmThresholdManageReq) (*AlarmThresholdManageCommonResp, error)
	AlarmThresholdManageGet(context.Context, *GetAlarmThresholdManageReq) (*ListAlarmThresholdManageData, error)
	AlarmThresholdManageList(context.Context, *ListAlarmThresholdManageReq) (*ListAlarmThresholdManageResp, error)
	//TasksScheduleQueue Rpc Start
	TasksScheduleQueueAdd(context.Context, *AddTasksScheduleQueueReq) (*TasksScheduleQueueCommonResp, error)
	TasksScheduleQueueUpdate(context.Context, *UpdateTasksScheduleQueueReq) (*TasksScheduleQueueCommonResp, error)
	TasksScheduleQueueDelete(context.Context, *DeleteTasksScheduleQueueReq) (*TasksScheduleQueueCommonResp, error)
	TasksScheduleQueueGet(context.Context, *GetTasksScheduleQueueReq) (*ListTasksScheduleQueueData, error)
	TasksScheduleQueueList(context.Context, *ListTasksScheduleQueueReq) (*ListTasksScheduleQueueResp, error)
	mustEmbedUnimplementedYunWeiServer()
}

// UnimplementedYunWeiServer must be embedded to have forward compatible implementations.
type UnimplementedYunWeiServer struct {
}

func (UnimplementedYunWeiServer) AssetAdd(context.Context, *AssetAddReq) (*AssetAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetAdd not implemented")
}
func (UnimplementedYunWeiServer) AssetList(context.Context, *AssetListReq) (*AssetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetList not implemented")
}
func (UnimplementedYunWeiServer) AssetUpdate(context.Context, *AssetUpdateReq) (*AssetUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetUpdate not implemented")
}
func (UnimplementedYunWeiServer) AssetDelete(context.Context, *AssetDeleteReq) (*AssetDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetDelete not implemented")
}
func (UnimplementedYunWeiServer) AssetRecycleDelete(context.Context, *AssetRecycleDeleteReq) (*AssetRecycleDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetRecycleDelete not implemented")
}
func (UnimplementedYunWeiServer) GetWebSshTree(context.Context, *GetWebSshReq) (*GetWebSshResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebSshTree not implemented")
}
func (UnimplementedYunWeiServer) AssetBatchDistribute(context.Context, *BatchDistributeReq) (*BatchDistributeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetBatchDistribute not implemented")
}
func (UnimplementedYunWeiServer) FeatureServerAdd(context.Context, *AddFeatureServerReq) (*FeatureServerCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeatureServerAdd not implemented")
}
func (UnimplementedYunWeiServer) FeatureServerUpdate(context.Context, *UpdateFeatureServerReq) (*FeatureServerCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeatureServerUpdate not implemented")
}
func (UnimplementedYunWeiServer) FeatureServerDelete(context.Context, *DeleteFeatureServerReq) (*FeatureServerCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeatureServerDelete not implemented")
}
func (UnimplementedYunWeiServer) FeatureServerInfoGet(context.Context, *GetFeatureServerReq) (*ListFeatureServerData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeatureServerInfoGet not implemented")
}
func (UnimplementedYunWeiServer) FeatureServerList(context.Context, *ListFeatureServerReq) (*ListFeatureServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeatureServerList not implemented")
}
func (UnimplementedYunWeiServer) PlatformAdd(context.Context, *AddPlatformReq) (*PlatformCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformAdd not implemented")
}
func (UnimplementedYunWeiServer) PlatformUpdate(context.Context, *UpdatePlatformReq) (*PlatformCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformUpdate not implemented")
}
func (UnimplementedYunWeiServer) PlatformDelete(context.Context, *DeletePlatformReq) (*PlatformCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformDelete not implemented")
}
func (UnimplementedYunWeiServer) PlatformGet(context.Context, *GetPlatformReq) (*ListPlatformData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformGet not implemented")
}
func (UnimplementedYunWeiServer) PlatformDetail(context.Context, *DetailPlatformReq) (*DetailPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformDetail not implemented")
}
func (UnimplementedYunWeiServer) PlatformList(context.Context, *ListPlatformReq) (*ListPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformList not implemented")
}
func (UnimplementedYunWeiServer) PlatformGetClusterInfo(context.Context, *GetClusterByPlatformReq) (*GetClusterByPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformGetClusterInfo not implemented")
}
func (UnimplementedYunWeiServer) ClusterList(context.Context, *ListClusterReq) (*ListClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterList not implemented")
}
func (UnimplementedYunWeiServer) KeyManageAdd(context.Context, *AddKeyManageReq) (*KeyManageCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyManageAdd not implemented")
}
func (UnimplementedYunWeiServer) KeyManageUpdate(context.Context, *UpdateKeyManageReq) (*KeyManageCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyManageUpdate not implemented")
}
func (UnimplementedYunWeiServer) KeyManageDelete(context.Context, *DeleteKeyManageReq) (*KeyManageCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyManageDelete not implemented")
}
func (UnimplementedYunWeiServer) KeyManageGet(context.Context, *GetKeyManageReq) (*ListKeyManageData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyManageGet not implemented")
}
func (UnimplementedYunWeiServer) KeyManageList(context.Context, *ListKeyManageReq) (*ListKeyManageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyManageList not implemented")
}
func (UnimplementedYunWeiServer) MaintainPlanAdd(context.Context, *AddMaintainPlanReq) (*MaintainPlanCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintainPlanAdd not implemented")
}
func (UnimplementedYunWeiServer) MaintainPlanUpdate(context.Context, *UpdateMaintainPlanReq) (*MaintainPlanCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintainPlanUpdate not implemented")
}
func (UnimplementedYunWeiServer) MaintainPlanDelete(context.Context, *DeleteMaintainPlanReq) (*MaintainPlanCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintainPlanDelete not implemented")
}
func (UnimplementedYunWeiServer) MaintainPlanGet(context.Context, *GetMaintainPlanReq) (*ListMaintainPlanData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintainPlanGet not implemented")
}
func (UnimplementedYunWeiServer) MaintainPlanList(context.Context, *ListMaintainPlanReq) (*ListMaintainPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintainPlanList not implemented")
}
func (UnimplementedYunWeiServer) MaintainPlanRangeList(context.Context, *GetMaintainPlanListTreeByClsIdAndProIdReq) (*GetMaintainPlanListTreeByClsIdAndProIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintainPlanRangeList not implemented")
}
func (UnimplementedYunWeiServer) MaintainGetClusterInfo(context.Context, *MaintainGetClusterInfoReq) (*MaintainGetClusterInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintainGetClusterInfo not implemented")
}
func (UnimplementedYunWeiServer) MergePlanAdd(context.Context, *AddMergePlanReq) (*MergePlanCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePlanAdd not implemented")
}
func (UnimplementedYunWeiServer) MergePlanUpdate(context.Context, *UpdateMergePlanReq) (*MergePlanCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePlanUpdate not implemented")
}
func (UnimplementedYunWeiServer) MergePlanDelete(context.Context, *DeleteMergePlanReq) (*MergePlanCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePlanDelete not implemented")
}
func (UnimplementedYunWeiServer) MergePlanGet(context.Context, *GetMergePlanReq) (*ListMergePlanData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePlanGet not implemented")
}
func (UnimplementedYunWeiServer) MergePlanList(context.Context, *ListMergePlanReq) (*ListMergePlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePlanList not implemented")
}
func (UnimplementedYunWeiServer) MergePlanRangeList(context.Context, *GetMergeListTreeByPlatIdAndProIdReq) (*GetMergeListTreeByPlatIdAndProIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePlanRangeList not implemented")
}
func (UnimplementedYunWeiServer) MergeCheckServerRange(context.Context, *MergeCheckServerRangeReq) (*MergeCheckServerRangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeCheckServerRange not implemented")
}
func (UnimplementedYunWeiServer) OpenPlanAdd(context.Context, *AddOpenPlanReq) (*OpenPlanCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPlanAdd not implemented")
}
func (UnimplementedYunWeiServer) OpenPlanUpdate(context.Context, *UpdateOpenPlanReq) (*OpenPlanCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPlanUpdate not implemented")
}
func (UnimplementedYunWeiServer) OpenPlanDelete(context.Context, *DeleteOpenPlanReq) (*OpenPlanCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPlanDelete not implemented")
}
func (UnimplementedYunWeiServer) OpenPlanGet(context.Context, *GetOpenPlanReq) (*ListOpenPlanData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPlanGet not implemented")
}
func (UnimplementedYunWeiServer) OpenPlanList(context.Context, *ListOpenPlanReq) (*ListOpenPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPlanList not implemented")
}
func (UnimplementedYunWeiServer) OpenPlanBatchModifyOpenTime(context.Context, *OpenPlanBatchModifyOpenTimeReq) (*OpenPlanBatchModifyOpenTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPlanBatchModifyOpenTime not implemented")
}
func (UnimplementedYunWeiServer) OpenplanBatchUpdateStatus(context.Context, *BatchUpdateStatusReq) (*BatchUpdateStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenplanBatchUpdateStatus not implemented")
}
func (UnimplementedYunWeiServer) HostsList(context.Context, *ListHostsReq) (*ListHostsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostsList not implemented")
}
func (UnimplementedYunWeiServer) GameServerList(context.Context, *ListGameServerReq) (*ListGameServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameServerList not implemented")
}
func (UnimplementedYunWeiServer) TasksAdd(context.Context, *AddTasksReq) (*TasksCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksAdd not implemented")
}
func (UnimplementedYunWeiServer) TasksUpdate(context.Context, *UpdateTasksReq) (*TasksCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksUpdate not implemented")
}
func (UnimplementedYunWeiServer) TasksDelete(context.Context, *DeleteTasksReq) (*TasksCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksDelete not implemented")
}
func (UnimplementedYunWeiServer) TasksGet(context.Context, *GetTasksReq) (*GetTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksGet not implemented")
}
func (UnimplementedYunWeiServer) TasksGetOneById(context.Context, *GetTasksReq) (*ListTasksData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksGetOneById not implemented")
}
func (UnimplementedYunWeiServer) TasksList(context.Context, *ListTasksReq) (*ListTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksList not implemented")
}
func (UnimplementedYunWeiServer) TaskGetOperation(context.Context, *TaskGetOperationReq) (*TaskGetOperationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskGetOperation not implemented")
}
func (UnimplementedYunWeiServer) TaskStart(context.Context, *StartTasksReq) (*StartTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskStart not implemented")
}
func (UnimplementedYunWeiServer) TaskStop(context.Context, *StopTasksReq) (*StopTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskStop not implemented")
}
func (UnimplementedYunWeiServer) HotLogHistoryAdd(context.Context, *AddHotLogHistoryReq) (*AddHotLogHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotLogHistoryAdd not implemented")
}
func (UnimplementedYunWeiServer) HotLogHistoryList(context.Context, *ListHotLogHistoryReq) (*ListHotLogHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotLogHistoryList not implemented")
}
func (UnimplementedYunWeiServer) HotLogHistoryGet(context.Context, *GetHotLogHistoryReq) (*ListHotLogHistoryData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotLogHistoryGet not implemented")
}
func (UnimplementedYunWeiServer) TaskGetFormatJson(context.Context, *TaskGetFormatJsonReq) (*TaskGetFormatJsonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskGetFormatJson not implemented")
}
func (UnimplementedYunWeiServer) WaitMergeList(context.Context, *ListWaitMergeReq) (*ListWaitMergeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitMergeList not implemented")
}
func (UnimplementedYunWeiServer) WaitInstallList(context.Context, *ListWaitInstallReq) (*ListWaitInstallResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitInstallList not implemented")
}
func (UnimplementedYunWeiServer) TaskGetInstallLogList(context.Context, *ListInstallLogListReq) (*ListInstallLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskGetInstallLogList not implemented")
}
func (UnimplementedYunWeiServer) TaskLogHistroyList(context.Context, *ListTaskLogHistroyReq) (*ListTaskLogHistroyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskLogHistroyList not implemented")
}
func (UnimplementedYunWeiServer) TaskLogHistroyDetail(context.Context, *DetailTaskLogHistroyReq) (*DetailTaskLogHistroyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskLogHistroyDetail not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileAdd(context.Context, *AddConfigFileReq) (*ConfigFileCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileAdd not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileUpdate(context.Context, *UpdateConfigFileReq) (*ConfigFileCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileUpdate not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileDelete(context.Context, *DeleteConfigFileReq) (*ConfigFileCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileDelete not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileGet(context.Context, *GetConfigFileReq) (*ListConfigFileData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileGet not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileList(context.Context, *ListConfigFileReq) (*ListConfigFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileList not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileDeliveryAdd(context.Context, *AddConfigFileDeliveryReq) (*AddConfigFileDeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileDeliveryAdd not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileDeliveryList(context.Context, *ListConfigFileDeliveryReq) (*ListConfigFileDeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileDeliveryList not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileDeliveryGet(context.Context, *GetConfigFileDeliveryTreeReq) (*GetConfigFileDeliveryTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileDeliveryGet not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileDeliveryGetLog(context.Context, *GetConfigFileDeliveryLogReq) (*GetConfigFileDeliveryLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileDeliveryGetLog not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileDeliveryGetFileContent(context.Context, *ConfigFileDeliveryGetFileContentReq) (*ConfigFileDeliveryGetFileContentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileDeliveryGetFileContent not implemented")
}
func (UnimplementedYunWeiServer) ConfigFileDeliveryUpdateTemplate(context.Context, *UpdateConfigFileDeliveryTemplateReq) (*UpdateConfigFileDeliveryTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigFileDeliveryUpdateTemplate not implemented")
}
func (UnimplementedYunWeiServer) HelpList(context.Context, *HelpListReq) (*HelpListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpList not implemented")
}
func (UnimplementedYunWeiServer) GetSumOfCurrentInfo(context.Context, *GetSumOfCurrentInfoListReq) (*GetSumOfCurrentInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSumOfCurrentInfo not implemented")
}
func (UnimplementedYunWeiServer) GetTrendChart(context.Context, *GetTrendChartListReq) (*GetTrendChartListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendChart not implemented")
}
func (UnimplementedYunWeiServer) AutoOpengameRuleAdd(context.Context, *AddAutoOpengameRuleReq) (*AutoOpengameRuleCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoOpengameRuleAdd not implemented")
}
func (UnimplementedYunWeiServer) AutoOpengameRuleUpdate(context.Context, *UpdateAutoOpengameRuleReq) (*AutoOpengameRuleCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoOpengameRuleUpdate not implemented")
}
func (UnimplementedYunWeiServer) AutoOpengameRuleDelete(context.Context, *DeleteAutoOpengameRuleReq) (*AutoOpengameRuleCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoOpengameRuleDelete not implemented")
}
func (UnimplementedYunWeiServer) AutoOpengameRuleGet(context.Context, *GetAutoOpengameRuleReq) (*ListAutoOpengameRuleData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoOpengameRuleGet not implemented")
}
func (UnimplementedYunWeiServer) AutoOpengameRuleList(context.Context, *ListAutoOpengameRuleReq) (*ListAutoOpengameRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoOpengameRuleList not implemented")
}
func (UnimplementedYunWeiServer) SwitchEntranceGameserverAdd(context.Context, *AddSwitchEntranceGameserverReq) (*SwitchEntranceGameserverCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchEntranceGameserverAdd not implemented")
}
func (UnimplementedYunWeiServer) SwitchEntranceGameserverUpdate(context.Context, *UpdateSwitchEntranceGameserverReq) (*SwitchEntranceGameserverCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchEntranceGameserverUpdate not implemented")
}
func (UnimplementedYunWeiServer) SwitchEntranceGameserverDelete(context.Context, *DeleteSwitchEntranceGameserverReq) (*SwitchEntranceGameserverCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchEntranceGameserverDelete not implemented")
}
func (UnimplementedYunWeiServer) SwitchEntranceGameserverGet(context.Context, *GetSwitchEntranceGameserverReq) (*ListSwitchEntranceGameserverData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchEntranceGameserverGet not implemented")
}
func (UnimplementedYunWeiServer) SwitchEntranceGameserverList(context.Context, *ListSwitchEntranceGameserverReq) (*ListSwitchEntranceGameserverResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchEntranceGameserverList not implemented")
}
func (UnimplementedYunWeiServer) AlarmThresholdManageAdd(context.Context, *AddAlarmThresholdManageReq) (*AlarmThresholdManageCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmThresholdManageAdd not implemented")
}
func (UnimplementedYunWeiServer) AlarmThresholdManageUpdate(context.Context, *UpdateAlarmThresholdManageReq) (*AlarmThresholdManageCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmThresholdManageUpdate not implemented")
}
func (UnimplementedYunWeiServer) AlarmThresholdManageDelete(context.Context, *DeleteAlarmThresholdManageReq) (*AlarmThresholdManageCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmThresholdManageDelete not implemented")
}
func (UnimplementedYunWeiServer) AlarmThresholdManageGet(context.Context, *GetAlarmThresholdManageReq) (*ListAlarmThresholdManageData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmThresholdManageGet not implemented")
}
func (UnimplementedYunWeiServer) AlarmThresholdManageList(context.Context, *ListAlarmThresholdManageReq) (*ListAlarmThresholdManageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmThresholdManageList not implemented")
}
func (UnimplementedYunWeiServer) TasksScheduleQueueAdd(context.Context, *AddTasksScheduleQueueReq) (*TasksScheduleQueueCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksScheduleQueueAdd not implemented")
}
func (UnimplementedYunWeiServer) TasksScheduleQueueUpdate(context.Context, *UpdateTasksScheduleQueueReq) (*TasksScheduleQueueCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksScheduleQueueUpdate not implemented")
}
func (UnimplementedYunWeiServer) TasksScheduleQueueDelete(context.Context, *DeleteTasksScheduleQueueReq) (*TasksScheduleQueueCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksScheduleQueueDelete not implemented")
}
func (UnimplementedYunWeiServer) TasksScheduleQueueGet(context.Context, *GetTasksScheduleQueueReq) (*ListTasksScheduleQueueData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksScheduleQueueGet not implemented")
}
func (UnimplementedYunWeiServer) TasksScheduleQueueList(context.Context, *ListTasksScheduleQueueReq) (*ListTasksScheduleQueueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksScheduleQueueList not implemented")
}
func (UnimplementedYunWeiServer) mustEmbedUnimplementedYunWeiServer() {}

// UnsafeYunWeiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YunWeiServer will
// result in compilation errors.
type UnsafeYunWeiServer interface {
	mustEmbedUnimplementedYunWeiServer()
}

func RegisterYunWeiServer(s grpc.ServiceRegistrar, srv YunWeiServer) {
	s.RegisterService(&YunWei_ServiceDesc, srv)
}

func _YunWei_AssetAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AssetAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AssetAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AssetAdd(ctx, req.(*AssetAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AssetList(ctx, req.(*AssetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AssetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AssetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AssetUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AssetUpdate(ctx, req.(*AssetUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AssetDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AssetDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AssetDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AssetDelete(ctx, req.(*AssetDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AssetRecycleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRecycleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AssetRecycleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AssetRecycleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AssetRecycleDelete(ctx, req.(*AssetRecycleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_GetWebSshTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebSshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).GetWebSshTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/GetWebSshTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).GetWebSshTree(ctx, req.(*GetWebSshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AssetBatchDistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDistributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AssetBatchDistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AssetBatchDistribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AssetBatchDistribute(ctx, req.(*BatchDistributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_FeatureServerAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeatureServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).FeatureServerAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/FeatureServerAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).FeatureServerAdd(ctx, req.(*AddFeatureServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_FeatureServerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).FeatureServerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/FeatureServerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).FeatureServerUpdate(ctx, req.(*UpdateFeatureServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_FeatureServerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).FeatureServerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/FeatureServerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).FeatureServerDelete(ctx, req.(*DeleteFeatureServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_FeatureServerInfoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).FeatureServerInfoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/FeatureServerInfoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).FeatureServerInfoGet(ctx, req.(*GetFeatureServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_FeatureServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).FeatureServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/FeatureServerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).FeatureServerList(ctx, req.(*ListFeatureServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_PlatformAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).PlatformAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/PlatformAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).PlatformAdd(ctx, req.(*AddPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_PlatformUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).PlatformUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/PlatformUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).PlatformUpdate(ctx, req.(*UpdatePlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_PlatformDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).PlatformDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/PlatformDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).PlatformDelete(ctx, req.(*DeletePlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_PlatformGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).PlatformGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/PlatformGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).PlatformGet(ctx, req.(*GetPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_PlatformDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).PlatformDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/PlatformDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).PlatformDetail(ctx, req.(*DetailPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_PlatformList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).PlatformList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/PlatformList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).PlatformList(ctx, req.(*ListPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_PlatformGetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterByPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).PlatformGetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/PlatformGetClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).PlatformGetClusterInfo(ctx, req.(*GetClusterByPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ClusterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ClusterList(ctx, req.(*ListClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_KeyManageAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).KeyManageAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/KeyManageAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).KeyManageAdd(ctx, req.(*AddKeyManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_KeyManageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).KeyManageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/KeyManageUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).KeyManageUpdate(ctx, req.(*UpdateKeyManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_KeyManageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).KeyManageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/KeyManageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).KeyManageDelete(ctx, req.(*DeleteKeyManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_KeyManageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).KeyManageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/KeyManageGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).KeyManageGet(ctx, req.(*GetKeyManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_KeyManageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).KeyManageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/KeyManageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).KeyManageList(ctx, req.(*ListKeyManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MaintainPlanAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMaintainPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MaintainPlanAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MaintainPlanAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MaintainPlanAdd(ctx, req.(*AddMaintainPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MaintainPlanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaintainPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MaintainPlanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MaintainPlanUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MaintainPlanUpdate(ctx, req.(*UpdateMaintainPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MaintainPlanDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMaintainPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MaintainPlanDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MaintainPlanDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MaintainPlanDelete(ctx, req.(*DeleteMaintainPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MaintainPlanGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaintainPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MaintainPlanGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MaintainPlanGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MaintainPlanGet(ctx, req.(*GetMaintainPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MaintainPlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaintainPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MaintainPlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MaintainPlanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MaintainPlanList(ctx, req.(*ListMaintainPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MaintainPlanRangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaintainPlanListTreeByClsIdAndProIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MaintainPlanRangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MaintainPlanRangeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MaintainPlanRangeList(ctx, req.(*GetMaintainPlanListTreeByClsIdAndProIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MaintainGetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintainGetClusterInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MaintainGetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MaintainGetClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MaintainGetClusterInfo(ctx, req.(*MaintainGetClusterInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MergePlanAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMergePlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MergePlanAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MergePlanAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MergePlanAdd(ctx, req.(*AddMergePlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MergePlanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMergePlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MergePlanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MergePlanUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MergePlanUpdate(ctx, req.(*UpdateMergePlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MergePlanDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMergePlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MergePlanDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MergePlanDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MergePlanDelete(ctx, req.(*DeleteMergePlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MergePlanGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergePlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MergePlanGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MergePlanGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MergePlanGet(ctx, req.(*GetMergePlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MergePlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMergePlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MergePlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MergePlanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MergePlanList(ctx, req.(*ListMergePlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MergePlanRangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergeListTreeByPlatIdAndProIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MergePlanRangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MergePlanRangeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MergePlanRangeList(ctx, req.(*GetMergeListTreeByPlatIdAndProIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_MergeCheckServerRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeCheckServerRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).MergeCheckServerRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/MergeCheckServerRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).MergeCheckServerRange(ctx, req.(*MergeCheckServerRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_OpenPlanAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOpenPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).OpenPlanAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/OpenPlanAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).OpenPlanAdd(ctx, req.(*AddOpenPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_OpenPlanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpenPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).OpenPlanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/OpenPlanUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).OpenPlanUpdate(ctx, req.(*UpdateOpenPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_OpenPlanDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOpenPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).OpenPlanDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/OpenPlanDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).OpenPlanDelete(ctx, req.(*DeleteOpenPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_OpenPlanGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).OpenPlanGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/OpenPlanGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).OpenPlanGet(ctx, req.(*GetOpenPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_OpenPlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOpenPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).OpenPlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/OpenPlanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).OpenPlanList(ctx, req.(*ListOpenPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_OpenPlanBatchModifyOpenTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPlanBatchModifyOpenTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).OpenPlanBatchModifyOpenTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/OpenPlanBatchModifyOpenTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).OpenPlanBatchModifyOpenTime(ctx, req.(*OpenPlanBatchModifyOpenTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_OpenplanBatchUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).OpenplanBatchUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/OpenplanBatchUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).OpenplanBatchUpdateStatus(ctx, req.(*BatchUpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_HostsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).HostsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/HostsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).HostsList(ctx, req.(*ListHostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_GameServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).GameServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/GameServerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).GameServerList(ctx, req.(*ListGameServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksAdd(ctx, req.(*AddTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksUpdate(ctx, req.(*UpdateTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksDelete(ctx, req.(*DeleteTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksGet(ctx, req.(*GetTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksGetOneById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksGetOneById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksGetOneById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksGetOneById(ctx, req.(*GetTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksList(ctx, req.(*ListTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TaskGetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskGetOperationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TaskGetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TaskGetOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TaskGetOperation(ctx, req.(*TaskGetOperationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TaskStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TaskStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TaskStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TaskStart(ctx, req.(*StartTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TaskStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TaskStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TaskStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TaskStop(ctx, req.(*StopTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_HotLogHistoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotLogHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).HotLogHistoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/HotLogHistoryAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).HotLogHistoryAdd(ctx, req.(*AddHotLogHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_HotLogHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotLogHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).HotLogHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/HotLogHistoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).HotLogHistoryList(ctx, req.(*ListHotLogHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_HotLogHistoryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotLogHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).HotLogHistoryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/HotLogHistoryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).HotLogHistoryGet(ctx, req.(*GetHotLogHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TaskGetFormatJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskGetFormatJsonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TaskGetFormatJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TaskGetFormatJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TaskGetFormatJson(ctx, req.(*TaskGetFormatJsonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_WaitMergeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWaitMergeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).WaitMergeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/WaitMergeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).WaitMergeList(ctx, req.(*ListWaitMergeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_WaitInstallList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWaitInstallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).WaitInstallList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/WaitInstallList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).WaitInstallList(ctx, req.(*ListWaitInstallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TaskGetInstallLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TaskGetInstallLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TaskGetInstallLogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TaskGetInstallLogList(ctx, req.(*ListInstallLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TaskLogHistroyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskLogHistroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TaskLogHistroyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TaskLogHistroyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TaskLogHistroyList(ctx, req.(*ListTaskLogHistroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TaskLogHistroyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailTaskLogHistroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TaskLogHistroyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TaskLogHistroyDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TaskLogHistroyDetail(ctx, req.(*DetailTaskLogHistroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileAdd(ctx, req.(*AddConfigFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileUpdate(ctx, req.(*UpdateConfigFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileDelete(ctx, req.(*DeleteConfigFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileGet(ctx, req.(*GetConfigFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileList(ctx, req.(*ListConfigFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileDeliveryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigFileDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileDeliveryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileDeliveryAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileDeliveryAdd(ctx, req.(*AddConfigFileDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileDeliveryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigFileDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileDeliveryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileDeliveryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileDeliveryList(ctx, req.(*ListConfigFileDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileDeliveryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigFileDeliveryTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileDeliveryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileDeliveryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileDeliveryGet(ctx, req.(*GetConfigFileDeliveryTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileDeliveryGetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigFileDeliveryLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileDeliveryGetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileDeliveryGetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileDeliveryGetLog(ctx, req.(*GetConfigFileDeliveryLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileDeliveryGetFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigFileDeliveryGetFileContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileDeliveryGetFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileDeliveryGetFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileDeliveryGetFileContent(ctx, req.(*ConfigFileDeliveryGetFileContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_ConfigFileDeliveryUpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigFileDeliveryTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).ConfigFileDeliveryUpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/ConfigFileDeliveryUpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).ConfigFileDeliveryUpdateTemplate(ctx, req.(*UpdateConfigFileDeliveryTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_HelpList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).HelpList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/HelpList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).HelpList(ctx, req.(*HelpListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_GetSumOfCurrentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSumOfCurrentInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).GetSumOfCurrentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/GetSumOfCurrentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).GetSumOfCurrentInfo(ctx, req.(*GetSumOfCurrentInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_GetTrendChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrendChartListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).GetTrendChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/GetTrendChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).GetTrendChart(ctx, req.(*GetTrendChartListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AutoOpengameRuleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAutoOpengameRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AutoOpengameRuleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AutoOpengameRuleAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AutoOpengameRuleAdd(ctx, req.(*AddAutoOpengameRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AutoOpengameRuleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoOpengameRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AutoOpengameRuleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AutoOpengameRuleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AutoOpengameRuleUpdate(ctx, req.(*UpdateAutoOpengameRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AutoOpengameRuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoOpengameRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AutoOpengameRuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AutoOpengameRuleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AutoOpengameRuleDelete(ctx, req.(*DeleteAutoOpengameRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AutoOpengameRuleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoOpengameRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AutoOpengameRuleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AutoOpengameRuleGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AutoOpengameRuleGet(ctx, req.(*GetAutoOpengameRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AutoOpengameRuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutoOpengameRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AutoOpengameRuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AutoOpengameRuleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AutoOpengameRuleList(ctx, req.(*ListAutoOpengameRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_SwitchEntranceGameserverAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSwitchEntranceGameserverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).SwitchEntranceGameserverAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/SwitchEntranceGameserverAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).SwitchEntranceGameserverAdd(ctx, req.(*AddSwitchEntranceGameserverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_SwitchEntranceGameserverUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchEntranceGameserverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).SwitchEntranceGameserverUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/SwitchEntranceGameserverUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).SwitchEntranceGameserverUpdate(ctx, req.(*UpdateSwitchEntranceGameserverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_SwitchEntranceGameserverDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSwitchEntranceGameserverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).SwitchEntranceGameserverDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/SwitchEntranceGameserverDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).SwitchEntranceGameserverDelete(ctx, req.(*DeleteSwitchEntranceGameserverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_SwitchEntranceGameserverGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchEntranceGameserverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).SwitchEntranceGameserverGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/SwitchEntranceGameserverGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).SwitchEntranceGameserverGet(ctx, req.(*GetSwitchEntranceGameserverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_SwitchEntranceGameserverList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwitchEntranceGameserverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).SwitchEntranceGameserverList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/SwitchEntranceGameserverList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).SwitchEntranceGameserverList(ctx, req.(*ListSwitchEntranceGameserverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AlarmThresholdManageAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAlarmThresholdManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AlarmThresholdManageAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AlarmThresholdManageAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AlarmThresholdManageAdd(ctx, req.(*AddAlarmThresholdManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AlarmThresholdManageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlarmThresholdManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AlarmThresholdManageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AlarmThresholdManageUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AlarmThresholdManageUpdate(ctx, req.(*UpdateAlarmThresholdManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AlarmThresholdManageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlarmThresholdManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AlarmThresholdManageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AlarmThresholdManageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AlarmThresholdManageDelete(ctx, req.(*DeleteAlarmThresholdManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AlarmThresholdManageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlarmThresholdManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AlarmThresholdManageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AlarmThresholdManageGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AlarmThresholdManageGet(ctx, req.(*GetAlarmThresholdManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_AlarmThresholdManageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlarmThresholdManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).AlarmThresholdManageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/AlarmThresholdManageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).AlarmThresholdManageList(ctx, req.(*ListAlarmThresholdManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksScheduleQueueAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTasksScheduleQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksScheduleQueueAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksScheduleQueueAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksScheduleQueueAdd(ctx, req.(*AddTasksScheduleQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksScheduleQueueUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTasksScheduleQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksScheduleQueueUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksScheduleQueueUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksScheduleQueueUpdate(ctx, req.(*UpdateTasksScheduleQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksScheduleQueueDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTasksScheduleQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksScheduleQueueDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksScheduleQueueDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksScheduleQueueDelete(ctx, req.(*DeleteTasksScheduleQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksScheduleQueueGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksScheduleQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksScheduleQueueGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksScheduleQueueGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksScheduleQueueGet(ctx, req.(*GetTasksScheduleQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YunWei_TasksScheduleQueueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksScheduleQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YunWeiServer).TasksScheduleQueueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yunweiclient.YunWei/TasksScheduleQueueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YunWeiServer).TasksScheduleQueueList(ctx, req.(*ListTasksScheduleQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

// YunWei_ServiceDesc is the grpc.ServiceDesc for YunWei service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YunWei_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yunweiclient.YunWei",
	HandlerType: (*YunWeiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssetAdd",
			Handler:    _YunWei_AssetAdd_Handler,
		},
		{
			MethodName: "AssetList",
			Handler:    _YunWei_AssetList_Handler,
		},
		{
			MethodName: "AssetUpdate",
			Handler:    _YunWei_AssetUpdate_Handler,
		},
		{
			MethodName: "AssetDelete",
			Handler:    _YunWei_AssetDelete_Handler,
		},
		{
			MethodName: "AssetRecycleDelete",
			Handler:    _YunWei_AssetRecycleDelete_Handler,
		},
		{
			MethodName: "GetWebSshTree",
			Handler:    _YunWei_GetWebSshTree_Handler,
		},
		{
			MethodName: "AssetBatchDistribute",
			Handler:    _YunWei_AssetBatchDistribute_Handler,
		},
		{
			MethodName: "FeatureServerAdd",
			Handler:    _YunWei_FeatureServerAdd_Handler,
		},
		{
			MethodName: "FeatureServerUpdate",
			Handler:    _YunWei_FeatureServerUpdate_Handler,
		},
		{
			MethodName: "FeatureServerDelete",
			Handler:    _YunWei_FeatureServerDelete_Handler,
		},
		{
			MethodName: "FeatureServerInfoGet",
			Handler:    _YunWei_FeatureServerInfoGet_Handler,
		},
		{
			MethodName: "FeatureServerList",
			Handler:    _YunWei_FeatureServerList_Handler,
		},
		{
			MethodName: "PlatformAdd",
			Handler:    _YunWei_PlatformAdd_Handler,
		},
		{
			MethodName: "PlatformUpdate",
			Handler:    _YunWei_PlatformUpdate_Handler,
		},
		{
			MethodName: "PlatformDelete",
			Handler:    _YunWei_PlatformDelete_Handler,
		},
		{
			MethodName: "PlatformGet",
			Handler:    _YunWei_PlatformGet_Handler,
		},
		{
			MethodName: "PlatformDetail",
			Handler:    _YunWei_PlatformDetail_Handler,
		},
		{
			MethodName: "PlatformList",
			Handler:    _YunWei_PlatformList_Handler,
		},
		{
			MethodName: "PlatformGetClusterInfo",
			Handler:    _YunWei_PlatformGetClusterInfo_Handler,
		},
		{
			MethodName: "ClusterList",
			Handler:    _YunWei_ClusterList_Handler,
		},
		{
			MethodName: "KeyManageAdd",
			Handler:    _YunWei_KeyManageAdd_Handler,
		},
		{
			MethodName: "KeyManageUpdate",
			Handler:    _YunWei_KeyManageUpdate_Handler,
		},
		{
			MethodName: "KeyManageDelete",
			Handler:    _YunWei_KeyManageDelete_Handler,
		},
		{
			MethodName: "KeyManageGet",
			Handler:    _YunWei_KeyManageGet_Handler,
		},
		{
			MethodName: "KeyManageList",
			Handler:    _YunWei_KeyManageList_Handler,
		},
		{
			MethodName: "MaintainPlanAdd",
			Handler:    _YunWei_MaintainPlanAdd_Handler,
		},
		{
			MethodName: "MaintainPlanUpdate",
			Handler:    _YunWei_MaintainPlanUpdate_Handler,
		},
		{
			MethodName: "MaintainPlanDelete",
			Handler:    _YunWei_MaintainPlanDelete_Handler,
		},
		{
			MethodName: "MaintainPlanGet",
			Handler:    _YunWei_MaintainPlanGet_Handler,
		},
		{
			MethodName: "MaintainPlanList",
			Handler:    _YunWei_MaintainPlanList_Handler,
		},
		{
			MethodName: "MaintainPlanRangeList",
			Handler:    _YunWei_MaintainPlanRangeList_Handler,
		},
		{
			MethodName: "MaintainGetClusterInfo",
			Handler:    _YunWei_MaintainGetClusterInfo_Handler,
		},
		{
			MethodName: "MergePlanAdd",
			Handler:    _YunWei_MergePlanAdd_Handler,
		},
		{
			MethodName: "MergePlanUpdate",
			Handler:    _YunWei_MergePlanUpdate_Handler,
		},
		{
			MethodName: "MergePlanDelete",
			Handler:    _YunWei_MergePlanDelete_Handler,
		},
		{
			MethodName: "MergePlanGet",
			Handler:    _YunWei_MergePlanGet_Handler,
		},
		{
			MethodName: "MergePlanList",
			Handler:    _YunWei_MergePlanList_Handler,
		},
		{
			MethodName: "MergePlanRangeList",
			Handler:    _YunWei_MergePlanRangeList_Handler,
		},
		{
			MethodName: "MergeCheckServerRange",
			Handler:    _YunWei_MergeCheckServerRange_Handler,
		},
		{
			MethodName: "OpenPlanAdd",
			Handler:    _YunWei_OpenPlanAdd_Handler,
		},
		{
			MethodName: "OpenPlanUpdate",
			Handler:    _YunWei_OpenPlanUpdate_Handler,
		},
		{
			MethodName: "OpenPlanDelete",
			Handler:    _YunWei_OpenPlanDelete_Handler,
		},
		{
			MethodName: "OpenPlanGet",
			Handler:    _YunWei_OpenPlanGet_Handler,
		},
		{
			MethodName: "OpenPlanList",
			Handler:    _YunWei_OpenPlanList_Handler,
		},
		{
			MethodName: "OpenPlanBatchModifyOpenTime",
			Handler:    _YunWei_OpenPlanBatchModifyOpenTime_Handler,
		},
		{
			MethodName: "OpenplanBatchUpdateStatus",
			Handler:    _YunWei_OpenplanBatchUpdateStatus_Handler,
		},
		{
			MethodName: "HostsList",
			Handler:    _YunWei_HostsList_Handler,
		},
		{
			MethodName: "GameServerList",
			Handler:    _YunWei_GameServerList_Handler,
		},
		{
			MethodName: "TasksAdd",
			Handler:    _YunWei_TasksAdd_Handler,
		},
		{
			MethodName: "TasksUpdate",
			Handler:    _YunWei_TasksUpdate_Handler,
		},
		{
			MethodName: "TasksDelete",
			Handler:    _YunWei_TasksDelete_Handler,
		},
		{
			MethodName: "TasksGet",
			Handler:    _YunWei_TasksGet_Handler,
		},
		{
			MethodName: "TasksGetOneById",
			Handler:    _YunWei_TasksGetOneById_Handler,
		},
		{
			MethodName: "TasksList",
			Handler:    _YunWei_TasksList_Handler,
		},
		{
			MethodName: "TaskGetOperation",
			Handler:    _YunWei_TaskGetOperation_Handler,
		},
		{
			MethodName: "TaskStart",
			Handler:    _YunWei_TaskStart_Handler,
		},
		{
			MethodName: "TaskStop",
			Handler:    _YunWei_TaskStop_Handler,
		},
		{
			MethodName: "HotLogHistoryAdd",
			Handler:    _YunWei_HotLogHistoryAdd_Handler,
		},
		{
			MethodName: "HotLogHistoryList",
			Handler:    _YunWei_HotLogHistoryList_Handler,
		},
		{
			MethodName: "HotLogHistoryGet",
			Handler:    _YunWei_HotLogHistoryGet_Handler,
		},
		{
			MethodName: "TaskGetFormatJson",
			Handler:    _YunWei_TaskGetFormatJson_Handler,
		},
		{
			MethodName: "WaitMergeList",
			Handler:    _YunWei_WaitMergeList_Handler,
		},
		{
			MethodName: "WaitInstallList",
			Handler:    _YunWei_WaitInstallList_Handler,
		},
		{
			MethodName: "TaskGetInstallLogList",
			Handler:    _YunWei_TaskGetInstallLogList_Handler,
		},
		{
			MethodName: "TaskLogHistroyList",
			Handler:    _YunWei_TaskLogHistroyList_Handler,
		},
		{
			MethodName: "TaskLogHistroyDetail",
			Handler:    _YunWei_TaskLogHistroyDetail_Handler,
		},
		{
			MethodName: "ConfigFileAdd",
			Handler:    _YunWei_ConfigFileAdd_Handler,
		},
		{
			MethodName: "ConfigFileUpdate",
			Handler:    _YunWei_ConfigFileUpdate_Handler,
		},
		{
			MethodName: "ConfigFileDelete",
			Handler:    _YunWei_ConfigFileDelete_Handler,
		},
		{
			MethodName: "ConfigFileGet",
			Handler:    _YunWei_ConfigFileGet_Handler,
		},
		{
			MethodName: "ConfigFileList",
			Handler:    _YunWei_ConfigFileList_Handler,
		},
		{
			MethodName: "ConfigFileDeliveryAdd",
			Handler:    _YunWei_ConfigFileDeliveryAdd_Handler,
		},
		{
			MethodName: "ConfigFileDeliveryList",
			Handler:    _YunWei_ConfigFileDeliveryList_Handler,
		},
		{
			MethodName: "ConfigFileDeliveryGet",
			Handler:    _YunWei_ConfigFileDeliveryGet_Handler,
		},
		{
			MethodName: "ConfigFileDeliveryGetLog",
			Handler:    _YunWei_ConfigFileDeliveryGetLog_Handler,
		},
		{
			MethodName: "ConfigFileDeliveryGetFileContent",
			Handler:    _YunWei_ConfigFileDeliveryGetFileContent_Handler,
		},
		{
			MethodName: "ConfigFileDeliveryUpdateTemplate",
			Handler:    _YunWei_ConfigFileDeliveryUpdateTemplate_Handler,
		},
		{
			MethodName: "HelpList",
			Handler:    _YunWei_HelpList_Handler,
		},
		{
			MethodName: "GetSumOfCurrentInfo",
			Handler:    _YunWei_GetSumOfCurrentInfo_Handler,
		},
		{
			MethodName: "GetTrendChart",
			Handler:    _YunWei_GetTrendChart_Handler,
		},
		{
			MethodName: "AutoOpengameRuleAdd",
			Handler:    _YunWei_AutoOpengameRuleAdd_Handler,
		},
		{
			MethodName: "AutoOpengameRuleUpdate",
			Handler:    _YunWei_AutoOpengameRuleUpdate_Handler,
		},
		{
			MethodName: "AutoOpengameRuleDelete",
			Handler:    _YunWei_AutoOpengameRuleDelete_Handler,
		},
		{
			MethodName: "AutoOpengameRuleGet",
			Handler:    _YunWei_AutoOpengameRuleGet_Handler,
		},
		{
			MethodName: "AutoOpengameRuleList",
			Handler:    _YunWei_AutoOpengameRuleList_Handler,
		},
		{
			MethodName: "SwitchEntranceGameserverAdd",
			Handler:    _YunWei_SwitchEntranceGameserverAdd_Handler,
		},
		{
			MethodName: "SwitchEntranceGameserverUpdate",
			Handler:    _YunWei_SwitchEntranceGameserverUpdate_Handler,
		},
		{
			MethodName: "SwitchEntranceGameserverDelete",
			Handler:    _YunWei_SwitchEntranceGameserverDelete_Handler,
		},
		{
			MethodName: "SwitchEntranceGameserverGet",
			Handler:    _YunWei_SwitchEntranceGameserverGet_Handler,
		},
		{
			MethodName: "SwitchEntranceGameserverList",
			Handler:    _YunWei_SwitchEntranceGameserverList_Handler,
		},
		{
			MethodName: "AlarmThresholdManageAdd",
			Handler:    _YunWei_AlarmThresholdManageAdd_Handler,
		},
		{
			MethodName: "AlarmThresholdManageUpdate",
			Handler:    _YunWei_AlarmThresholdManageUpdate_Handler,
		},
		{
			MethodName: "AlarmThresholdManageDelete",
			Handler:    _YunWei_AlarmThresholdManageDelete_Handler,
		},
		{
			MethodName: "AlarmThresholdManageGet",
			Handler:    _YunWei_AlarmThresholdManageGet_Handler,
		},
		{
			MethodName: "AlarmThresholdManageList",
			Handler:    _YunWei_AlarmThresholdManageList_Handler,
		},
		{
			MethodName: "TasksScheduleQueueAdd",
			Handler:    _YunWei_TasksScheduleQueueAdd_Handler,
		},
		{
			MethodName: "TasksScheduleQueueUpdate",
			Handler:    _YunWei_TasksScheduleQueueUpdate_Handler,
		},
		{
			MethodName: "TasksScheduleQueueDelete",
			Handler:    _YunWei_TasksScheduleQueueDelete_Handler,
		},
		{
			MethodName: "TasksScheduleQueueGet",
			Handler:    _YunWei_TasksScheduleQueueGet_Handler,
		},
		{
			MethodName: "TasksScheduleQueueList",
			Handler:    _YunWei_TasksScheduleQueueList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yunwei.proto",
}
