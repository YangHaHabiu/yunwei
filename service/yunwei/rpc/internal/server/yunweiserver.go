// Code generated by goctl. DO NOT EDIT.
// Source: yunwei.proto

package server

import (
	"context"

	"ywadmin-v3/service/yunwei/rpc/internal/logic"
	"ywadmin-v3/service/yunwei/rpc/internal/svc"
	"ywadmin-v3/service/yunwei/rpc/yunweiclient"
)

type YunWeiServer struct {
	svcCtx *svc.ServiceContext
	yunweiclient.UnimplementedYunWeiServer
}

func NewYunWeiServer(svcCtx *svc.ServiceContext) *YunWeiServer {
	return &YunWeiServer{
		svcCtx: svcCtx,
	}
}

// Asset Rpc Start
func (s *YunWeiServer) AssetAdd(ctx context.Context, in *yunweiclient.AssetAddReq) (*yunweiclient.AssetAddResp, error) {
	l := logic.NewAssetAddLogic(ctx, s.svcCtx)
	return l.AssetAdd(in)
}

func (s *YunWeiServer) AssetList(ctx context.Context, in *yunweiclient.AssetListReq) (*yunweiclient.AssetListResp, error) {
	l := logic.NewAssetListLogic(ctx, s.svcCtx)
	return l.AssetList(in)
}

func (s *YunWeiServer) AssetUpdate(ctx context.Context, in *yunweiclient.AssetUpdateReq) (*yunweiclient.AssetUpdateResp, error) {
	l := logic.NewAssetUpdateLogic(ctx, s.svcCtx)
	return l.AssetUpdate(in)
}

func (s *YunWeiServer) AssetDelete(ctx context.Context, in *yunweiclient.AssetDeleteReq) (*yunweiclient.AssetDeleteResp, error) {
	l := logic.NewAssetDeleteLogic(ctx, s.svcCtx)
	return l.AssetDelete(in)
}

func (s *YunWeiServer) AssetRecycleDelete(ctx context.Context, in *yunweiclient.AssetRecycleDeleteReq) (*yunweiclient.AssetRecycleDeleteResp, error) {
	l := logic.NewAssetRecycleDeleteLogic(ctx, s.svcCtx)
	return l.AssetRecycleDelete(in)
}

func (s *YunWeiServer) GetWebSshTree(ctx context.Context, in *yunweiclient.GetWebSshReq) (*yunweiclient.GetWebSshResp, error) {
	l := logic.NewGetWebSshTreeLogic(ctx, s.svcCtx)
	return l.GetWebSshTree(in)
}

func (s *YunWeiServer) AssetBatchDistribute(ctx context.Context, in *yunweiclient.BatchDistributeReq) (*yunweiclient.BatchDistributeResp, error) {
	l := logic.NewAssetBatchDistributeLogic(ctx, s.svcCtx)
	return l.AssetBatchDistribute(in)
}

// Asset Rpc End
func (s *YunWeiServer) FeatureServerAdd(ctx context.Context, in *yunweiclient.AddFeatureServerReq) (*yunweiclient.FeatureServerCommonResp, error) {
	l := logic.NewFeatureServerAddLogic(ctx, s.svcCtx)
	return l.FeatureServerAdd(in)
}

func (s *YunWeiServer) FeatureServerUpdate(ctx context.Context, in *yunweiclient.UpdateFeatureServerReq) (*yunweiclient.FeatureServerCommonResp, error) {
	l := logic.NewFeatureServerUpdateLogic(ctx, s.svcCtx)
	return l.FeatureServerUpdate(in)
}

func (s *YunWeiServer) FeatureServerDelete(ctx context.Context, in *yunweiclient.DeleteFeatureServerReq) (*yunweiclient.FeatureServerCommonResp, error) {
	l := logic.NewFeatureServerDeleteLogic(ctx, s.svcCtx)
	return l.FeatureServerDelete(in)
}

func (s *YunWeiServer) FeatureServerInfoGet(ctx context.Context, in *yunweiclient.GetFeatureServerReq) (*yunweiclient.ListFeatureServerData, error) {
	l := logic.NewFeatureServerInfoGetLogic(ctx, s.svcCtx)
	return l.FeatureServerInfoGet(in)
}

func (s *YunWeiServer) FeatureServerList(ctx context.Context, in *yunweiclient.ListFeatureServerReq) (*yunweiclient.ListFeatureServerResp, error) {
	l := logic.NewFeatureServerListLogic(ctx, s.svcCtx)
	return l.FeatureServerList(in)
}

// FeatureServer Rpc End
func (s *YunWeiServer) PlatformAdd(ctx context.Context, in *yunweiclient.AddPlatformReq) (*yunweiclient.PlatformCommonResp, error) {
	l := logic.NewPlatformAddLogic(ctx, s.svcCtx)
	return l.PlatformAdd(in)
}

func (s *YunWeiServer) PlatformUpdate(ctx context.Context, in *yunweiclient.UpdatePlatformReq) (*yunweiclient.PlatformCommonResp, error) {
	l := logic.NewPlatformUpdateLogic(ctx, s.svcCtx)
	return l.PlatformUpdate(in)
}

func (s *YunWeiServer) PlatformDelete(ctx context.Context, in *yunweiclient.DeletePlatformReq) (*yunweiclient.PlatformCommonResp, error) {
	l := logic.NewPlatformDeleteLogic(ctx, s.svcCtx)
	return l.PlatformDelete(in)
}

func (s *YunWeiServer) PlatformGet(ctx context.Context, in *yunweiclient.GetPlatformReq) (*yunweiclient.ListPlatformData, error) {
	l := logic.NewPlatformGetLogic(ctx, s.svcCtx)
	return l.PlatformGet(in)
}

func (s *YunWeiServer) PlatformDetail(ctx context.Context, in *yunweiclient.DetailPlatformReq) (*yunweiclient.DetailPlatformResp, error) {
	l := logic.NewPlatformDetailLogic(ctx, s.svcCtx)
	return l.PlatformDetail(in)
}

func (s *YunWeiServer) PlatformList(ctx context.Context, in *yunweiclient.ListPlatformReq) (*yunweiclient.ListPlatformResp, error) {
	l := logic.NewPlatformListLogic(ctx, s.svcCtx)
	return l.PlatformList(in)
}

func (s *YunWeiServer) PlatformGetClusterInfo(ctx context.Context, in *yunweiclient.GetClusterByPlatformReq) (*yunweiclient.GetClusterByPlatformResp, error) {
	l := logic.NewPlatformGetClusterInfoLogic(ctx, s.svcCtx)
	return l.PlatformGetClusterInfo(in)
}

// Platform Rpc End
func (s *YunWeiServer) ClusterList(ctx context.Context, in *yunweiclient.ListClusterReq) (*yunweiclient.ListClusterResp, error) {
	l := logic.NewClusterListLogic(ctx, s.svcCtx)
	return l.ClusterList(in)
}

// KeyManage Rpc Start
func (s *YunWeiServer) KeyManageAdd(ctx context.Context, in *yunweiclient.AddKeyManageReq) (*yunweiclient.KeyManageCommonResp, error) {
	l := logic.NewKeyManageAddLogic(ctx, s.svcCtx)
	return l.KeyManageAdd(in)
}

func (s *YunWeiServer) KeyManageUpdate(ctx context.Context, in *yunweiclient.UpdateKeyManageReq) (*yunweiclient.KeyManageCommonResp, error) {
	l := logic.NewKeyManageUpdateLogic(ctx, s.svcCtx)
	return l.KeyManageUpdate(in)
}

func (s *YunWeiServer) KeyManageDelete(ctx context.Context, in *yunweiclient.DeleteKeyManageReq) (*yunweiclient.KeyManageCommonResp, error) {
	l := logic.NewKeyManageDeleteLogic(ctx, s.svcCtx)
	return l.KeyManageDelete(in)
}

func (s *YunWeiServer) KeyManageGet(ctx context.Context, in *yunweiclient.GetKeyManageReq) (*yunweiclient.ListKeyManageData, error) {
	l := logic.NewKeyManageGetLogic(ctx, s.svcCtx)
	return l.KeyManageGet(in)
}

func (s *YunWeiServer) KeyManageList(ctx context.Context, in *yunweiclient.ListKeyManageReq) (*yunweiclient.ListKeyManageResp, error) {
	l := logic.NewKeyManageListLogic(ctx, s.svcCtx)
	return l.KeyManageList(in)
}

// KeyManage Rpc End
func (s *YunWeiServer) MaintainPlanAdd(ctx context.Context, in *yunweiclient.AddMaintainPlanReq) (*yunweiclient.MaintainPlanCommonResp, error) {
	l := logic.NewMaintainPlanAddLogic(ctx, s.svcCtx)
	return l.MaintainPlanAdd(in)
}

func (s *YunWeiServer) MaintainPlanUpdate(ctx context.Context, in *yunweiclient.UpdateMaintainPlanReq) (*yunweiclient.MaintainPlanCommonResp, error) {
	l := logic.NewMaintainPlanUpdateLogic(ctx, s.svcCtx)
	return l.MaintainPlanUpdate(in)
}

func (s *YunWeiServer) MaintainPlanDelete(ctx context.Context, in *yunweiclient.DeleteMaintainPlanReq) (*yunweiclient.MaintainPlanCommonResp, error) {
	l := logic.NewMaintainPlanDeleteLogic(ctx, s.svcCtx)
	return l.MaintainPlanDelete(in)
}

func (s *YunWeiServer) MaintainPlanGet(ctx context.Context, in *yunweiclient.GetMaintainPlanReq) (*yunweiclient.ListMaintainPlanData, error) {
	l := logic.NewMaintainPlanGetLogic(ctx, s.svcCtx)
	return l.MaintainPlanGet(in)
}

func (s *YunWeiServer) MaintainPlanList(ctx context.Context, in *yunweiclient.ListMaintainPlanReq) (*yunweiclient.ListMaintainPlanResp, error) {
	l := logic.NewMaintainPlanListLogic(ctx, s.svcCtx)
	return l.MaintainPlanList(in)
}

func (s *YunWeiServer) MaintainPlanRangeList(ctx context.Context, in *yunweiclient.GetMaintainPlanListTreeByClsIdAndProIdReq) (*yunweiclient.GetMaintainPlanListTreeByClsIdAndProIdResp, error) {
	l := logic.NewMaintainPlanRangeListLogic(ctx, s.svcCtx)
	return l.MaintainPlanRangeList(in)
}

func (s *YunWeiServer) MaintainGetClusterInfo(ctx context.Context, in *yunweiclient.MaintainGetClusterInfoReq) (*yunweiclient.MaintainGetClusterInfoResp, error) {
	l := logic.NewMaintainGetClusterInfoLogic(ctx, s.svcCtx)
	return l.MaintainGetClusterInfo(in)
}

// MaintainPlan Rpc End
func (s *YunWeiServer) MergePlanAdd(ctx context.Context, in *yunweiclient.AddMergePlanReq) (*yunweiclient.MergePlanCommonResp, error) {
	l := logic.NewMergePlanAddLogic(ctx, s.svcCtx)
	return l.MergePlanAdd(in)
}

func (s *YunWeiServer) MergePlanUpdate(ctx context.Context, in *yunweiclient.UpdateMergePlanReq) (*yunweiclient.MergePlanCommonResp, error) {
	l := logic.NewMergePlanUpdateLogic(ctx, s.svcCtx)
	return l.MergePlanUpdate(in)
}

func (s *YunWeiServer) MergePlanDelete(ctx context.Context, in *yunweiclient.DeleteMergePlanReq) (*yunweiclient.MergePlanCommonResp, error) {
	l := logic.NewMergePlanDeleteLogic(ctx, s.svcCtx)
	return l.MergePlanDelete(in)
}

func (s *YunWeiServer) MergePlanGet(ctx context.Context, in *yunweiclient.GetMergePlanReq) (*yunweiclient.ListMergePlanData, error) {
	l := logic.NewMergePlanGetLogic(ctx, s.svcCtx)
	return l.MergePlanGet(in)
}

func (s *YunWeiServer) MergePlanList(ctx context.Context, in *yunweiclient.ListMergePlanReq) (*yunweiclient.ListMergePlanResp, error) {
	l := logic.NewMergePlanListLogic(ctx, s.svcCtx)
	return l.MergePlanList(in)
}

func (s *YunWeiServer) MergePlanRangeList(ctx context.Context, in *yunweiclient.GetMergeListTreeByPlatIdAndProIdReq) (*yunweiclient.GetMergeListTreeByPlatIdAndProIdResp, error) {
	l := logic.NewMergePlanRangeListLogic(ctx, s.svcCtx)
	return l.MergePlanRangeList(in)
}

func (s *YunWeiServer) MergeCheckServerRange(ctx context.Context, in *yunweiclient.MergeCheckServerRangeReq) (*yunweiclient.MergeCheckServerRangeResp, error) {
	l := logic.NewMergeCheckServerRangeLogic(ctx, s.svcCtx)
	return l.MergeCheckServerRange(in)
}

// MergePlan Rpc End
func (s *YunWeiServer) OpenPlanAdd(ctx context.Context, in *yunweiclient.AddOpenPlanReq) (*yunweiclient.OpenPlanCommonResp, error) {
	l := logic.NewOpenPlanAddLogic(ctx, s.svcCtx)
	return l.OpenPlanAdd(in)
}

func (s *YunWeiServer) OpenPlanUpdate(ctx context.Context, in *yunweiclient.UpdateOpenPlanReq) (*yunweiclient.OpenPlanCommonResp, error) {
	l := logic.NewOpenPlanUpdateLogic(ctx, s.svcCtx)
	return l.OpenPlanUpdate(in)
}

func (s *YunWeiServer) OpenPlanDelete(ctx context.Context, in *yunweiclient.DeleteOpenPlanReq) (*yunweiclient.OpenPlanCommonResp, error) {
	l := logic.NewOpenPlanDeleteLogic(ctx, s.svcCtx)
	return l.OpenPlanDelete(in)
}

func (s *YunWeiServer) OpenPlanGet(ctx context.Context, in *yunweiclient.GetOpenPlanReq) (*yunweiclient.ListOpenPlanData, error) {
	l := logic.NewOpenPlanGetLogic(ctx, s.svcCtx)
	return l.OpenPlanGet(in)
}

func (s *YunWeiServer) OpenPlanList(ctx context.Context, in *yunweiclient.ListOpenPlanReq) (*yunweiclient.ListOpenPlanResp, error) {
	l := logic.NewOpenPlanListLogic(ctx, s.svcCtx)
	return l.OpenPlanList(in)
}

func (s *YunWeiServer) OpenPlanBatchModifyOpenTime(ctx context.Context, in *yunweiclient.OpenPlanBatchModifyOpenTimeReq) (*yunweiclient.OpenPlanBatchModifyOpenTimeResp, error) {
	l := logic.NewOpenPlanBatchModifyOpenTimeLogic(ctx, s.svcCtx)
	return l.OpenPlanBatchModifyOpenTime(in)
}

func (s *YunWeiServer) OpenplanBatchUpdateStatus(ctx context.Context, in *yunweiclient.BatchUpdateStatusReq) (*yunweiclient.BatchUpdateStatusResp, error) {
	l := logic.NewOpenplanBatchUpdateStatusLogic(ctx, s.svcCtx)
	return l.OpenplanBatchUpdateStatus(in)
}

// OpenPlan Rpc End
func (s *YunWeiServer) HostsList(ctx context.Context, in *yunweiclient.ListHostsReq) (*yunweiclient.ListHostsResp, error) {
	l := logic.NewHostsListLogic(ctx, s.svcCtx)
	return l.HostsList(in)
}

// Hosts Rpc End
func (s *YunWeiServer) GameServerList(ctx context.Context, in *yunweiclient.ListGameServerReq) (*yunweiclient.ListGameServerResp, error) {
	l := logic.NewGameServerListLogic(ctx, s.svcCtx)
	return l.GameServerList(in)
}

// ServerName Rpc End
func (s *YunWeiServer) TasksAdd(ctx context.Context, in *yunweiclient.AddTasksReq) (*yunweiclient.TasksCommonResp, error) {
	l := logic.NewTasksAddLogic(ctx, s.svcCtx)
	return l.TasksAdd(in)
}

func (s *YunWeiServer) TasksUpdate(ctx context.Context, in *yunweiclient.UpdateTasksReq) (*yunweiclient.TasksCommonResp, error) {
	l := logic.NewTasksUpdateLogic(ctx, s.svcCtx)
	return l.TasksUpdate(in)
}

func (s *YunWeiServer) TasksDelete(ctx context.Context, in *yunweiclient.DeleteTasksReq) (*yunweiclient.TasksCommonResp, error) {
	l := logic.NewTasksDeleteLogic(ctx, s.svcCtx)
	return l.TasksDelete(in)
}

func (s *YunWeiServer) TasksGet(ctx context.Context, in *yunweiclient.GetTasksReq) (*yunweiclient.GetTasksResp, error) {
	l := logic.NewTasksGetLogic(ctx, s.svcCtx)
	return l.TasksGet(in)
}

func (s *YunWeiServer) TasksGetOneById(ctx context.Context, in *yunweiclient.GetTasksReq) (*yunweiclient.ListTasksData, error) {
	l := logic.NewTasksGetOneByIdLogic(ctx, s.svcCtx)
	return l.TasksGetOneById(in)
}

func (s *YunWeiServer) TasksList(ctx context.Context, in *yunweiclient.ListTasksReq) (*yunweiclient.ListTasksResp, error) {
	l := logic.NewTasksListLogic(ctx, s.svcCtx)
	return l.TasksList(in)
}

func (s *YunWeiServer) TaskGetOperation(ctx context.Context, in *yunweiclient.TaskGetOperationReq) (*yunweiclient.TaskGetOperationResp, error) {
	l := logic.NewTaskGetOperationLogic(ctx, s.svcCtx)
	return l.TaskGetOperation(in)
}

func (s *YunWeiServer) TaskStart(ctx context.Context, in *yunweiclient.StartTasksReq) (*yunweiclient.StartTasksResp, error) {
	l := logic.NewTaskStartLogic(ctx, s.svcCtx)
	return l.TaskStart(in)
}

func (s *YunWeiServer) TaskStop(ctx context.Context, in *yunweiclient.StopTasksReq) (*yunweiclient.StopTasksResp, error) {
	l := logic.NewTaskStopLogic(ctx, s.svcCtx)
	return l.TaskStop(in)
}

func (s *YunWeiServer) HotLogHistoryAdd(ctx context.Context, in *yunweiclient.AddHotLogHistoryReq) (*yunweiclient.AddHotLogHistoryResp, error) {
	l := logic.NewHotLogHistoryAddLogic(ctx, s.svcCtx)
	return l.HotLogHistoryAdd(in)
}

func (s *YunWeiServer) HotLogHistoryList(ctx context.Context, in *yunweiclient.ListHotLogHistoryReq) (*yunweiclient.ListHotLogHistoryResp, error) {
	l := logic.NewHotLogHistoryListLogic(ctx, s.svcCtx)
	return l.HotLogHistoryList(in)
}

func (s *YunWeiServer) HotLogHistoryGet(ctx context.Context, in *yunweiclient.GetHotLogHistoryReq) (*yunweiclient.ListHotLogHistoryData, error) {
	l := logic.NewHotLogHistoryGetLogic(ctx, s.svcCtx)
	return l.HotLogHistoryGet(in)
}

func (s *YunWeiServer) TaskGetFormatJson(ctx context.Context, in *yunweiclient.TaskGetFormatJsonReq) (*yunweiclient.TaskGetFormatJsonResp, error) {
	l := logic.NewTaskGetFormatJsonLogic(ctx, s.svcCtx)
	return l.TaskGetFormatJson(in)
}

func (s *YunWeiServer) WaitMergeList(ctx context.Context, in *yunweiclient.ListWaitMergeReq) (*yunweiclient.ListWaitMergeResp, error) {
	l := logic.NewWaitMergeListLogic(ctx, s.svcCtx)
	return l.WaitMergeList(in)
}

func (s *YunWeiServer) WaitInstallList(ctx context.Context, in *yunweiclient.ListWaitInstallReq) (*yunweiclient.ListWaitInstallResp, error) {
	l := logic.NewWaitInstallListLogic(ctx, s.svcCtx)
	return l.WaitInstallList(in)
}

func (s *YunWeiServer) TaskGetInstallLogList(ctx context.Context, in *yunweiclient.ListInstallLogListReq) (*yunweiclient.ListInstallLogListResp, error) {
	l := logic.NewTaskGetInstallLogListLogic(ctx, s.svcCtx)
	return l.TaskGetInstallLogList(in)
}

// Tasks Rpc End
func (s *YunWeiServer) TaskLogHistroyList(ctx context.Context, in *yunweiclient.ListTaskLogHistroyReq) (*yunweiclient.ListTaskLogHistroyResp, error) {
	l := logic.NewTaskLogHistroyListLogic(ctx, s.svcCtx)
	return l.TaskLogHistroyList(in)
}

func (s *YunWeiServer) TaskLogHistroyDetail(ctx context.Context, in *yunweiclient.DetailTaskLogHistroyReq) (*yunweiclient.DetailTaskLogHistroyResp, error) {
	l := logic.NewTaskLogHistroyDetailLogic(ctx, s.svcCtx)
	return l.TaskLogHistroyDetail(in)
}

// TaskLogHistroy Rpc End
func (s *YunWeiServer) ConfigFileAdd(ctx context.Context, in *yunweiclient.AddConfigFileReq) (*yunweiclient.ConfigFileCommonResp, error) {
	l := logic.NewConfigFileAddLogic(ctx, s.svcCtx)
	return l.ConfigFileAdd(in)
}

func (s *YunWeiServer) ConfigFileUpdate(ctx context.Context, in *yunweiclient.UpdateConfigFileReq) (*yunweiclient.ConfigFileCommonResp, error) {
	l := logic.NewConfigFileUpdateLogic(ctx, s.svcCtx)
	return l.ConfigFileUpdate(in)
}

func (s *YunWeiServer) ConfigFileDelete(ctx context.Context, in *yunweiclient.DeleteConfigFileReq) (*yunweiclient.ConfigFileCommonResp, error) {
	l := logic.NewConfigFileDeleteLogic(ctx, s.svcCtx)
	return l.ConfigFileDelete(in)
}

func (s *YunWeiServer) ConfigFileGet(ctx context.Context, in *yunweiclient.GetConfigFileReq) (*yunweiclient.ListConfigFileData, error) {
	l := logic.NewConfigFileGetLogic(ctx, s.svcCtx)
	return l.ConfigFileGet(in)
}

func (s *YunWeiServer) ConfigFileList(ctx context.Context, in *yunweiclient.ListConfigFileReq) (*yunweiclient.ListConfigFileResp, error) {
	l := logic.NewConfigFileListLogic(ctx, s.svcCtx)
	return l.ConfigFileList(in)
}

// ConfigFile Rpc End
func (s *YunWeiServer) ConfigFileDeliveryAdd(ctx context.Context, in *yunweiclient.AddConfigFileDeliveryReq) (*yunweiclient.AddConfigFileDeliveryResp, error) {
	l := logic.NewConfigFileDeliveryAddLogic(ctx, s.svcCtx)
	return l.ConfigFileDeliveryAdd(in)
}

func (s *YunWeiServer) ConfigFileDeliveryList(ctx context.Context, in *yunweiclient.ListConfigFileDeliveryReq) (*yunweiclient.ListConfigFileDeliveryResp, error) {
	l := logic.NewConfigFileDeliveryListLogic(ctx, s.svcCtx)
	return l.ConfigFileDeliveryList(in)
}

func (s *YunWeiServer) ConfigFileDeliveryGet(ctx context.Context, in *yunweiclient.GetConfigFileDeliveryTreeReq) (*yunweiclient.GetConfigFileDeliveryTreeResp, error) {
	l := logic.NewConfigFileDeliveryGetLogic(ctx, s.svcCtx)
	return l.ConfigFileDeliveryGet(in)
}

func (s *YunWeiServer) ConfigFileDeliveryGetLog(ctx context.Context, in *yunweiclient.GetConfigFileDeliveryLogReq) (*yunweiclient.GetConfigFileDeliveryLogResp, error) {
	l := logic.NewConfigFileDeliveryGetLogLogic(ctx, s.svcCtx)
	return l.ConfigFileDeliveryGetLog(in)
}

func (s *YunWeiServer) ConfigFileDeliveryGetFileContent(ctx context.Context, in *yunweiclient.ConfigFileDeliveryGetFileContentReq) (*yunweiclient.ConfigFileDeliveryGetFileContentResp, error) {
	l := logic.NewConfigFileDeliveryGetFileContentLogic(ctx, s.svcCtx)
	return l.ConfigFileDeliveryGetFileContent(in)
}

func (s *YunWeiServer) ConfigFileDeliveryUpdateTemplate(ctx context.Context, in *yunweiclient.UpdateConfigFileDeliveryTemplateReq) (*yunweiclient.UpdateConfigFileDeliveryTemplateResp, error) {
	l := logic.NewConfigFileDeliveryUpdateTemplateLogic(ctx, s.svcCtx)
	return l.ConfigFileDeliveryUpdateTemplate(in)
}

// ConfigFileDelivery Rpc End
func (s *YunWeiServer) HelpList(ctx context.Context, in *yunweiclient.HelpListReq) (*yunweiclient.HelpListResp, error) {
	l := logic.NewHelpListLogic(ctx, s.svcCtx)
	return l.HelpList(in)
}

// Dashboard Start
func (s *YunWeiServer) GetSumOfCurrentInfo(ctx context.Context, in *yunweiclient.GetSumOfCurrentInfoListReq) (*yunweiclient.GetSumOfCurrentInfoListResp, error) {
	l := logic.NewGetSumOfCurrentInfoLogic(ctx, s.svcCtx)
	return l.GetSumOfCurrentInfo(in)
}

func (s *YunWeiServer) GetTrendChart(ctx context.Context, in *yunweiclient.GetTrendChartListReq) (*yunweiclient.GetTrendChartListResp, error) {
	l := logic.NewGetTrendChartLogic(ctx, s.svcCtx)
	return l.GetTrendChart(in)
}

// AutoOpengameRule Rpc Start
func (s *YunWeiServer) AutoOpengameRuleAdd(ctx context.Context, in *yunweiclient.AddAutoOpengameRuleReq) (*yunweiclient.AutoOpengameRuleCommonResp, error) {
	l := logic.NewAutoOpengameRuleAddLogic(ctx, s.svcCtx)
	return l.AutoOpengameRuleAdd(in)
}

func (s *YunWeiServer) AutoOpengameRuleUpdate(ctx context.Context, in *yunweiclient.UpdateAutoOpengameRuleReq) (*yunweiclient.AutoOpengameRuleCommonResp, error) {
	l := logic.NewAutoOpengameRuleUpdateLogic(ctx, s.svcCtx)
	return l.AutoOpengameRuleUpdate(in)
}

func (s *YunWeiServer) AutoOpengameRuleDelete(ctx context.Context, in *yunweiclient.DeleteAutoOpengameRuleReq) (*yunweiclient.AutoOpengameRuleCommonResp, error) {
	l := logic.NewAutoOpengameRuleDeleteLogic(ctx, s.svcCtx)
	return l.AutoOpengameRuleDelete(in)
}

func (s *YunWeiServer) AutoOpengameRuleGet(ctx context.Context, in *yunweiclient.GetAutoOpengameRuleReq) (*yunweiclient.ListAutoOpengameRuleData, error) {
	l := logic.NewAutoOpengameRuleGetLogic(ctx, s.svcCtx)
	return l.AutoOpengameRuleGet(in)
}

func (s *YunWeiServer) AutoOpengameRuleList(ctx context.Context, in *yunweiclient.ListAutoOpengameRuleReq) (*yunweiclient.ListAutoOpengameRuleResp, error) {
	l := logic.NewAutoOpengameRuleListLogic(ctx, s.svcCtx)
	return l.AutoOpengameRuleList(in)
}

// SwitchEntranceGameserver Rpc Start
func (s *YunWeiServer) SwitchEntranceGameserverAdd(ctx context.Context, in *yunweiclient.AddSwitchEntranceGameserverReq) (*yunweiclient.SwitchEntranceGameserverCommonResp, error) {
	l := logic.NewSwitchEntranceGameserverAddLogic(ctx, s.svcCtx)
	return l.SwitchEntranceGameserverAdd(in)
}

func (s *YunWeiServer) SwitchEntranceGameserverUpdate(ctx context.Context, in *yunweiclient.UpdateSwitchEntranceGameserverReq) (*yunweiclient.SwitchEntranceGameserverCommonResp, error) {
	l := logic.NewSwitchEntranceGameserverUpdateLogic(ctx, s.svcCtx)
	return l.SwitchEntranceGameserverUpdate(in)
}

func (s *YunWeiServer) SwitchEntranceGameserverDelete(ctx context.Context, in *yunweiclient.DeleteSwitchEntranceGameserverReq) (*yunweiclient.SwitchEntranceGameserverCommonResp, error) {
	l := logic.NewSwitchEntranceGameserverDeleteLogic(ctx, s.svcCtx)
	return l.SwitchEntranceGameserverDelete(in)
}

func (s *YunWeiServer) SwitchEntranceGameserverGet(ctx context.Context, in *yunweiclient.GetSwitchEntranceGameserverReq) (*yunweiclient.ListSwitchEntranceGameserverData, error) {
	l := logic.NewSwitchEntranceGameserverGetLogic(ctx, s.svcCtx)
	return l.SwitchEntranceGameserverGet(in)
}

func (s *YunWeiServer) SwitchEntranceGameserverList(ctx context.Context, in *yunweiclient.ListSwitchEntranceGameserverReq) (*yunweiclient.ListSwitchEntranceGameserverResp, error) {
	l := logic.NewSwitchEntranceGameserverListLogic(ctx, s.svcCtx)
	return l.SwitchEntranceGameserverList(in)
}

// AlarmThresholdManage Rpc Start
func (s *YunWeiServer) AlarmThresholdManageAdd(ctx context.Context, in *yunweiclient.AddAlarmThresholdManageReq) (*yunweiclient.AlarmThresholdManageCommonResp, error) {
	l := logic.NewAlarmThresholdManageAddLogic(ctx, s.svcCtx)
	return l.AlarmThresholdManageAdd(in)
}

func (s *YunWeiServer) AlarmThresholdManageUpdate(ctx context.Context, in *yunweiclient.UpdateAlarmThresholdManageReq) (*yunweiclient.AlarmThresholdManageCommonResp, error) {
	l := logic.NewAlarmThresholdManageUpdateLogic(ctx, s.svcCtx)
	return l.AlarmThresholdManageUpdate(in)
}

func (s *YunWeiServer) AlarmThresholdManageDelete(ctx context.Context, in *yunweiclient.DeleteAlarmThresholdManageReq) (*yunweiclient.AlarmThresholdManageCommonResp, error) {
	l := logic.NewAlarmThresholdManageDeleteLogic(ctx, s.svcCtx)
	return l.AlarmThresholdManageDelete(in)
}

func (s *YunWeiServer) AlarmThresholdManageGet(ctx context.Context, in *yunweiclient.GetAlarmThresholdManageReq) (*yunweiclient.ListAlarmThresholdManageData, error) {
	l := logic.NewAlarmThresholdManageGetLogic(ctx, s.svcCtx)
	return l.AlarmThresholdManageGet(in)
}

func (s *YunWeiServer) AlarmThresholdManageList(ctx context.Context, in *yunweiclient.ListAlarmThresholdManageReq) (*yunweiclient.ListAlarmThresholdManageResp, error) {
	l := logic.NewAlarmThresholdManageListLogic(ctx, s.svcCtx)
	return l.AlarmThresholdManageList(in)
}

// TasksScheduleQueue Rpc Start
func (s *YunWeiServer) TasksScheduleQueueAdd(ctx context.Context, in *yunweiclient.AddTasksScheduleQueueReq) (*yunweiclient.TasksScheduleQueueCommonResp, error) {
	l := logic.NewTasksScheduleQueueAddLogic(ctx, s.svcCtx)
	return l.TasksScheduleQueueAdd(in)
}

func (s *YunWeiServer) TasksScheduleQueueUpdate(ctx context.Context, in *yunweiclient.UpdateTasksScheduleQueueReq) (*yunweiclient.TasksScheduleQueueCommonResp, error) {
	l := logic.NewTasksScheduleQueueUpdateLogic(ctx, s.svcCtx)
	return l.TasksScheduleQueueUpdate(in)
}

func (s *YunWeiServer) TasksScheduleQueueDelete(ctx context.Context, in *yunweiclient.DeleteTasksScheduleQueueReq) (*yunweiclient.TasksScheduleQueueCommonResp, error) {
	l := logic.NewTasksScheduleQueueDeleteLogic(ctx, s.svcCtx)
	return l.TasksScheduleQueueDelete(in)
}

func (s *YunWeiServer) TasksScheduleQueueGet(ctx context.Context, in *yunweiclient.GetTasksScheduleQueueReq) (*yunweiclient.ListTasksScheduleQueueData, error) {
	l := logic.NewTasksScheduleQueueGetLogic(ctx, s.svcCtx)
	return l.TasksScheduleQueueGet(in)
}

func (s *YunWeiServer) TasksScheduleQueueList(ctx context.Context, in *yunweiclient.ListTasksScheduleQueueReq) (*yunweiclient.ListTasksScheduleQueueResp, error) {
	l := logic.NewTasksScheduleQueueListLogic(ctx, s.svcCtx)
	return l.TasksScheduleQueueList(in)
}
