// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	alarmThresholdManage "ywadmin-v3/service/yunwei/api/internal/handler/alarmThresholdManage"
	asset "ywadmin-v3/service/yunwei/api/internal/handler/asset"
	autoOpengameRule "ywadmin-v3/service/yunwei/api/internal/handler/autoOpengameRule"
	cluster "ywadmin-v3/service/yunwei/api/internal/handler/cluster"
	configFile "ywadmin-v3/service/yunwei/api/internal/handler/configFile"
	configFileDelivery "ywadmin-v3/service/yunwei/api/internal/handler/configFileDelivery"
	dashboard "ywadmin-v3/service/yunwei/api/internal/handler/dashboard"
	featureServer "ywadmin-v3/service/yunwei/api/internal/handler/featureServer"
	gameServer "ywadmin-v3/service/yunwei/api/internal/handler/gameServer"
	help "ywadmin-v3/service/yunwei/api/internal/handler/help"
	hosts "ywadmin-v3/service/yunwei/api/internal/handler/hosts"
	installLogList "ywadmin-v3/service/yunwei/api/internal/handler/installLogList"
	keyManage "ywadmin-v3/service/yunwei/api/internal/handler/keyManage"
	maintainPlan "ywadmin-v3/service/yunwei/api/internal/handler/maintainPlan"
	mergePlan "ywadmin-v3/service/yunwei/api/internal/handler/mergePlan"
	openPlan "ywadmin-v3/service/yunwei/api/internal/handler/openPlan"
	platform "ywadmin-v3/service/yunwei/api/internal/handler/platform"
	switchEntranceGameserver "ywadmin-v3/service/yunwei/api/internal/handler/switchEntranceGameserver"
	taskLog "ywadmin-v3/service/yunwei/api/internal/handler/taskLog"
	taskLogHistroy "ywadmin-v3/service/yunwei/api/internal/handler/taskLogHistroy"
	taskQueue "ywadmin-v3/service/yunwei/api/internal/handler/taskQueue"
	tasksScheduleQueue "ywadmin-v3/service/yunwei/api/internal/handler/tasksScheduleQueue"
	"ywadmin-v3/service/yunwei/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/get/:assetId",
				Handler: asset.AssetGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: asset.AssetAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: asset.AssetListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: asset.AssetUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:assetId",
				Handler: asset.AssetDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/recycle/:assetId",
				Handler: asset.AssetRecycleDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/assetInfoData",
				Handler: asset.AssetInfoDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/ownerProjectData",
				Handler: asset.OwnerProjectDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getWebSshTree",
				Handler: asset.GetWebSshTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/assetFile",
				Handler: asset.AssetFileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/assetFileUpload",
				Handler: asset.AssetFileUploadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/assetFileDownload",
				Handler: asset.AssetFileDownloadHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/assetBatchDistribute",
				Handler: asset.AssetBatchDistributeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/asset"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: featureServer.FeatureServerAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: featureServer.FeatureServerListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: featureServer.FeatureServerUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:featureServerId",
				Handler: featureServer.FeatureServerDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:featureServerId",
				Handler: featureServer.FeatureServerGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/featureServer"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: platform.PlatformAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: platform.PlatformListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: platform.PlatformUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:platformId",
				Handler: platform.PlatformDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:platformId",
				Handler: platform.PlatformGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/project/:projectId",
				Handler: platform.PlatformListByProjectHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail/:platformId",
				Handler: platform.PlatformDetailHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/platform"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: keyManage.KeyManageAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: keyManage.KeyManageListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: keyManage.KeyManageUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:keyId",
				Handler: keyManage.KeyManageDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:keyId",
				Handler: keyManage.KeyManageGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/keyManage"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: maintainPlan.MaintainPlanAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: maintainPlan.MaintainPlanListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: maintainPlan.MaintainPlanUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: maintainPlan.MaintainPlanDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:id",
				Handler: maintainPlan.MaintainPlanGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/maintainPlanRangeList",
				Handler: maintainPlan.MaintainPlanRangeListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/maintainGetClusterInfo",
				Handler: maintainPlan.MaintainGetClusterInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getMaintanListByPri",
				Handler: maintainPlan.GetMaintanListByPriHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunying/maintainPlan"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: mergePlan.MergePlanAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: mergePlan.MergePlanListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: mergePlan.MergePlanUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: mergePlan.MergePlanDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:id",
				Handler: mergePlan.MergePlanGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/mergePlanRangeList",
				Handler: mergePlan.MergePlanRangeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/mergeCheckServerRange",
				Handler: mergePlan.MergeCheckServerRangeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunying/mergePlan"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: openPlan.OpenPlanAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: openPlan.OpenPlanListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: openPlan.OpenPlanUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: openPlan.OpenPlanDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:id",
				Handler: openPlan.OpenPlanGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/batchModifyOpenTime",
				Handler: openPlan.OpenPlanBatchModifyOpenTimeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunying/openPlan"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: cluster.ClusterListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail",
				Handler: cluster.ClusterDetailHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/cluster"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: hosts.HostsListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/hosts"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: gameServer.GameServerListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/gameServer"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: taskQueue.TasksAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: taskQueue.TasksListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: taskQueue.TasksUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: taskQueue.TasksDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:id",
				Handler: taskQueue.TasksGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getTaskOperationList",
				Handler: taskQueue.GetTaskOperationListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/start/:id",
				Handler: taskQueue.TasksStartHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/stop/:id",
				Handler: taskQueue.TasksStopHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/taskGetFormatJson",
				Handler: taskQueue.TaskGetFormatJsonHandler(serverCtx),
			},
		},
		rest.WithPrefix("/taskMng/taskQueue"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/getWebSocketAddr",
				Handler: taskQueue.GetWebSocketAddrHandler(serverCtx),
			},
		},
		rest.WithPrefix("/taskMng/taskQueue"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: taskLog.HotLogHistoryListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:id",
				Handler: taskLog.HotLogHistoryGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/taskMng/taskLog"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: taskLogHistroy.TaskLogHistroyListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail/:taskId",
				Handler: taskLogHistroy.TaskLogHistroyDetailHandler(serverCtx),
			},
		},
		rest.WithPrefix("/taskMng/taskLogHistroy"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: configFile.ConfigFileAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: configFile.ConfigFileListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: configFile.ConfigFileUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:ConfigFileId",
				Handler: configFile.ConfigFileDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:ConfigFileId",
				Handler: configFile.ConfigFileGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/configFile"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: configFileDelivery.ConfigFileDeliveryAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: configFileDelivery.ConfigFileDeliveryListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/configFileDeliveryGet",
				Handler: configFileDelivery.ConfigFileDeliveryGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/refreshProfileList",
				Handler: configFileDelivery.ConfigFileDeliveryGetLogHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/configFileDeliveryGetFileContent",
				Handler: configFileDelivery.ConfigFileDeliveryGetFileContentHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/configFileDeliveryUpdateTemplate",
				Handler: configFileDelivery.ConfigFileDeliveryUpdateTemplateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/configFileDelivery"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/waitInstallList",
				Handler: taskQueue.WaitInstallListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/taskMng/taskQueue"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/waitMergeList",
				Handler: taskQueue.WaitMergeListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/taskMng/taskQueue"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/getInstallLogList",
				Handler: installLogList.GetInstallLogListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/taskMng/installLogList"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: help.HelpListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/help"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/getSumOfCurrentInfor",
				Handler: dashboard.GetSumOfCurrentInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getServerTrendChart",
				Handler: dashboard.GetServerTrendChartHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getGameTrendChart",
				Handler: dashboard.GetGameTrendChartHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/dashboard"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: autoOpengameRule.AutoOpengameRuleAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: autoOpengameRule.AutoOpengameRuleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: autoOpengameRule.AutoOpengameRuleUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:AutoOpengameRuleId",
				Handler: autoOpengameRule.AutoOpengameRuleDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:AutoOpengameRuleId",
				Handler: autoOpengameRule.AutoOpengameRuleGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/autoOpengameRule"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: switchEntranceGameserver.SwitchEntranceGameserverAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: switchEntranceGameserver.SwitchEntranceGameserverListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: switchEntranceGameserver.SwitchEntranceGameserverUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete",
				Handler: switchEntranceGameserver.SwitchEntranceGameserverDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:SwitchEntranceGameserverId",
				Handler: switchEntranceGameserver.SwitchEntranceGameserverGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/switchEntranceGameserver"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: alarmThresholdManage.AlarmThresholdManageAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: alarmThresholdManage.AlarmThresholdManageListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: alarmThresholdManage.AlarmThresholdManageUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:AlarmThresholdManageId",
				Handler: alarmThresholdManage.AlarmThresholdManageDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:AlarmThresholdManageId/:AlarmThresholdManageTypes",
				Handler: alarmThresholdManage.AlarmThresholdManageGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/yunwei/alarmThresholdManage"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: tasksScheduleQueue.TasksScheduleQueueAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: tasksScheduleQueue.TasksScheduleQueueListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: tasksScheduleQueue.TasksScheduleQueueUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:TasksScheduleQueueId",
				Handler: tasksScheduleQueue.TasksScheduleQueueDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:TasksScheduleQueueId",
				Handler: tasksScheduleQueue.TasksScheduleQueueGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/taskMng/tasksScheduleQueue"),
	)
}
