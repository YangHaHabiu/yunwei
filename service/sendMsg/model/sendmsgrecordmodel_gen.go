// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sendMsgRecordFieldNames          = builder.RawFieldNames(&SendMsgRecord{})
	sendMsgRecordRows                = strings.Join(sendMsgRecordFieldNames, ",")
	sendMsgRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(sendMsgRecordFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sendMsgRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(sendMsgRecordFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`failure_log`"), "=?,") + "=?"
)

type (
	sendMsgRecordModel interface {
		Insert(ctx context.Context, data *SendMsgRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SendMsgRecord, error)
		FindOneById(ctx context.Context, id int64) (*SendMsgRecord, error)
		Update(ctx context.Context, data *SendMsgRecord) error
		Delete(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]SendMsgRecord, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]SendMsgRecord, error)
		UpdateStatusById(ctx context.Context, id, status int64, failureLog string) error
	}

	defaultSendMsgRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SendMsgRecord struct {
		Id         int64  `db:"id"`          // 消息自增ID
		MsgTitle   string `db:"msg_title"`   // 消息标题
		MsgContent string `db:"msg_content"` // 消息内容
		MsgType    string `db:"msg_type"`    // 消息类型（email,wechat,dingding,feishu）
		MsgLevel   string `db:"msg_level"`   // 消息等级
		MsgTo      string `db:"msg_to"`      // 通知用户名单
		AccessIp   string `db:"access_ip"`   // 客户端IP
		SendType   string `db:"send_type"`   // 发送类型 1: 业务 2: 合服 3：其他
		AppKey     string `db:"app_key"`     // 对应接口appkey
		Status     string `db:"status"`      // 状态：1，待执行 2，执行中 3，完成 4，失败 5
		FailureLog string `db:"failure_log"` //失败日志
		CreateDate int64  `db:"create_date"` // 创建时间
	}
)

func newSendMsgRecordModel(conn sqlx.SqlConn) *defaultSendMsgRecordModel {
	return &defaultSendMsgRecordModel{
		conn:  conn,
		table: "`send_msg_record`",
	}
}

func (m *defaultSendMsgRecordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSendMsgRecordModel) FindOne(ctx context.Context, id int64) (*SendMsgRecord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sendMsgRecordRows, m.table)
	var resp SendMsgRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSendMsgRecordModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]SendMsgRecord, error) {
	query := `SELECT * from %s where 1 = 1
%s
order by create_date desc
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.tableName(), condition)
	//fmt.Println(query)
	resp := make([]SendMsgRecord, 0)
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSendMsgRecordModel) FindAll(ctx context.Context, filters ...interface{}) (*[]SendMsgRecord, error) {
	query := `SELECT * from %s where 1 = 1
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.tableName(), condition)
	resp := make([]SendMsgRecord, 0)
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultSendMsgRecordModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select count(*) as count from %s where 1 = 1 %s", m.table, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultSendMsgRecordModel) FindOneById(ctx context.Context, id int64) (*SendMsgRecord, error) {
	var resp SendMsgRecord
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sendMsgRecordRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSendMsgRecordModel) Insert(ctx context.Context, data *SendMsgRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?)", m.table, sendMsgRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MsgTitle, data.MsgContent, data.MsgType, data.MsgLevel, data.MsgTo, data.AccessIp, data.SendType, data.AppKey, data.Status, data.FailureLog, data.CreateDate)
	return ret, err
}

func (m *defaultSendMsgRecordModel) Update(ctx context.Context, newData *SendMsgRecord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sendMsgRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.MsgTitle, newData.MsgContent, newData.MsgType, newData.MsgLevel, newData.MsgTo, newData.AccessIp, newData.SendType, newData.AppKey, newData.Status, newData.CreateDate, newData.Id)
	return err
}

func (m *defaultSendMsgRecordModel) UpdateStatusById(ctx context.Context, id, status int64, failureLog string) error {
	var (
		query string
		err   error
	)
	if failureLog == "" {
		query = fmt.Sprintf("update %s set `status` = ? where `id` = ?", m.table)
	} else {
		query = fmt.Sprintf("update %s set `status` = ?,`failure_log` = '%s' where `id` = ?", m.table, failureLog)
	}
	_, err = m.conn.ExecCtx(ctx, query, status, id)
	return err
}

func (m *defaultSendMsgRecordModel) tableName() string {
	return m.table
}
