// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sendAccountFieldNames          = builder.RawFieldNames(&SendAccount{})
	sendAccountRows                = strings.Join(sendAccountFieldNames, ",")
	sendAccountRowsExpectAutoSet   = strings.Join(stringx.Remove(sendAccountFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sendAccountRowsWithPlaceHolder = strings.Join(stringx.Remove(sendAccountFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	sendAccountModel interface {
		Insert(ctx context.Context, data *SendAccount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SendAccount, error)
		Update(ctx context.Context, data *SendAccount) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context, filters ...interface{}) (*[]SendAccount, error)
		UpdateMasterById(ctx context.Context, channel, appKey string, id int64) error
	}

	defaultSendAccountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SendAccount struct {
		Id          int64  `db:"id"`
		SendChannel string `db:"send_channel"` // wx,dd,email 发送渠道
		AppKey      string `db:"app_key"`
		Config      string `db:"config"`    // 账户配置
		Title       string `db:"title"`     // 账户名称
		IsMaster    int64  `db:"is_master"` // 是否当前帐号
	}
)

func newSendAccountModel(conn sqlx.SqlConn) *defaultSendAccountModel {
	return &defaultSendAccountModel{
		conn:  conn,
		table: "`send_account`",
	}
}

func (m *defaultSendAccountModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSendAccountModel) FindOne(ctx context.Context, id int64) (*SendAccount, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sendAccountRows, m.table)
	var resp SendAccount
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSendAccountModel) Insert(ctx context.Context, data *SendAccount) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, sendAccountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SendChannel, data.Config, data.Title, data.IsMaster)
	return ret, err
}

func (m *defaultSendAccountModel) Update(ctx context.Context, data *SendAccount) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sendAccountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SendChannel, data.Config, data.Title, data.IsMaster, data.Id)
	return err
}

func (m *defaultSendAccountModel) UpdateMasterById(ctx context.Context, channel, appKey string, id int64) error {
	query := `UPDATE send_account SET is_master=0 WHERE send_channel="%s" and app_key="%s";`
	query = fmt.Sprintf(query, channel, appKey)
	_, err := m.conn.ExecCtx(ctx, query)
	query = `UPDATE send_account SET is_master=1 WHERE id = ?;`
	_, err = m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSendAccountModel) tableName() string {
	return m.table
}

func (m *defaultSendAccountModel) FindAll(ctx context.Context, filters ...interface{}) (*[]SendAccount, error) {
	query := `SELECT * from %s where 1 = 1
%s
`
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.tableName(), condition)
	resp := make([]SendAccount, 0)
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
