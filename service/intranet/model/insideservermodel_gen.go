// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	insideServerFieldNames          = builder.RawFieldNames(&InsideServer{})
	insideServerRows                = strings.Join(insideServerFieldNames, ",")
	insideServerRowsExpectAutoSet   = strings.Join(stringx.Remove(insideServerFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), ",")
	insideServerRowsWithPlaceHolder = strings.Join(stringx.Remove(insideServerFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), "=?,") + "=?"
)

type (
	insideServerModel interface {
		Insert(ctx context.Context, data *InsideServer) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InsideServer, error)
		Update(ctx context.Context, data *InsideServer) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideServerNew, error)
		DeleteSoft(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]InsideServerNew, error)
	}

	defaultInsideServerModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InsideServer struct {
		Id           int64  `db:"id"`
		ProjectId    int64  `db:"project_id"`     // 项目id
		ClusterId    int64  `db:"cluster_id"`     // 集群id
		FeatureType  string `db:"feature_type"`   // 功能服id
		BuildType    string `db:"build_type"`     // 编译类型
		Sort         int64  `db:"sort"`           // 排序
		ServerTitle  string `db:"server_title"`   // 服务器名
		ServerPath   string `db:"server_path"`    // 服务器地址信息
		ServerDescDb string `db:"server_desc_db"` // 服务器目标库
		Domain       string `db:"domain"`         // 域名信息
		DelFlag      int64  `db:"del_flag"`       // 0：使用中 1：已删除
	}
	InsideServerNew struct {
		Id           int64  `db:"id"`
		ProjectId    int64  `db:"project_id"`     // 项目id
		ClusterId    int64  `db:"cluster_id"`     // 集群id
		FeatureType  string `db:"feature_type"`   // 功能服id
		BuildType    string `db:"build_type"`     // 编译类型
		Sort         int64  `db:"sort"`           // 排序
		ServerTitle  string `db:"server_title"`   // 服务器名
		ServerPath   string `db:"server_path"`    // 服务器地址信息
		ServerDescDb string `db:"server_desc_db"` // 服务器目标库
		Domain       string `db:"domain"`         // 域名信息
		DelFlag      int64  `db:"del_flag"`       // 0：使用中 1：已删除
		ProjectCn    string `db:"project_cn"`     // 项目cn
		ClusterCn    string `db:"cluster_cn"`     // 集群cn

	}
)

func newInsideServerModel(conn sqlx.SqlConn) *defaultInsideServerModel {
	return &defaultInsideServerModel{
		conn:  conn,
		table: "`inside_server`",
	}
}

var serverCommonSQL = `
SELECT
	%s
FROM
	(
	SELECT
		inside_server.*,
		project.project_cn,
		label.label_name as cluster_cn
	FROM
		inside_server
		LEFT JOIN project ON inside_server.project_id = project.project_id
		LEFT JOIN label ON label.label_id = inside_server.cluster_id 
	WHERE
		project.del_flag = 0 
		AND inside_server.del_flag = 0 
		AND label.del_flag = 0 
	) A 
WHERE
	1 = 1 
%s
ORDER BY sort,project_id
%s
`

func (m *defaultInsideServerModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInsideServerModel) FindOne(ctx context.Context, id int64) (*InsideServer, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", insideServerRows, m.table)
	var resp InsideServer
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInsideServerModel) Insert(ctx context.Context, data *InsideServer) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, insideServerRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.ClusterId, data.FeatureType, data.BuildType, data.Sort, data.ServerTitle, data.ServerPath, data.ServerDescDb, data.Domain)
	return ret, err
}

func (m *defaultInsideServerModel) Update(ctx context.Context, data *InsideServer) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, insideServerRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.ClusterId, data.FeatureType, data.BuildType, data.Sort, data.ServerTitle, data.ServerPath, data.ServerDescDb, data.Domain, data.Id)
	return err
}

func (m *defaultInsideServerModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultInsideServerModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideServerNew, error) {

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(serverCommonSQL, "*", condition, "limit ? offset ?")

	var resp []InsideServerNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultInsideServerModel) FindAll(ctx context.Context, filters ...interface{}) (*[]InsideServerNew, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(serverCommonSQL, "*", condition, "")
	var resp []InsideServerNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultInsideServerModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf(serverCommonSQL, "count(*)", condition, "")
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultInsideServerModel) DeleteSoft(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, id)
	return err
}
