// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	insideTasksPidFieldNames          = builder.RawFieldNames(&InsideTasksPid{})
	insideTasksPidRows                = strings.Join(insideTasksPidFieldNames, ",")
	insideTasksPidRowsExpectAutoSet   = strings.Join(stringx.Remove(insideTasksPidFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	insideTasksPidRowsWithPlaceHolder = strings.Join(stringx.Remove(insideTasksPidFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	insideTasksPidModel interface {
		Insert(ctx context.Context, data *InsideTasksPid) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InsideTasksPid, error)
		Update(ctx context.Context, data *InsideTasksPid) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideTasksPid, error)
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]InsideTasksPid, error)
	}

	defaultInsideTasksPidModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InsideTasksPid struct {
		Id       int64 `db:"id"`
		TasksId  int64 `db:"tasks_id"`  // 任务id
		TasksPid int64 `db:"tasks_pid"` // 进程id
	}
)

func newInsideTasksPidModel(conn sqlx.SqlConn) *defaultInsideTasksPidModel {
	return &defaultInsideTasksPidModel{
		conn:  conn,
		table: "`inside_tasks_pid`",
	}
}

func (m *defaultInsideTasksPidModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `tasks_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInsideTasksPidModel) FindOne(ctx context.Context, id int64) (*InsideTasksPid, error) {
	query := fmt.Sprintf("select %s from %s where `tasks_id` = ? limit 1", insideTasksPidRows, m.table)
	var resp InsideTasksPid
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInsideTasksPidModel) Insert(ctx context.Context, data *InsideTasksPid) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, insideTasksPidRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.TasksId, data.TasksPid)
	return ret, err
}

func (m *defaultInsideTasksPidModel) Update(ctx context.Context, data *InsideTasksPid) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, insideTasksPidRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TasksId, data.TasksPid, data.Id)
	return err
}

func (m *defaultInsideTasksPidModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultInsideTasksPidModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideTasksPid, error) {
	query := `SELECT * from %s where 1 = 1
%s
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.table, condition)

	var resp []InsideTasksPid
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultInsideTasksPidModel) FindAll(ctx context.Context, filters ...interface{}) (*[]InsideTasksPid, error) {
	query := "select * from %s where 1=1 %s"
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.table, condition)
	var resp []InsideTasksPid
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultInsideTasksPidModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select count(*) as count from %s where 1=1 %s", m.table, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}
