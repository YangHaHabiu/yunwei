// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	insideVersionFieldNames          = builder.RawFieldNames(&InsideVersion{})
	insideVersionRows                = strings.Join(insideVersionFieldNames, ",")
	insideVersionRowsExpectAutoSet   = strings.Join(stringx.Remove(insideVersionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), ",")
	insideVersionRowsWithPlaceHolder = strings.Join(stringx.Remove(insideVersionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), "=?,") + "=?"
)

type (
	insideVersionModel interface {
		Insert(ctx context.Context, data *InsideVersion) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InsideVersion, error)
		Update(ctx context.Context, data *InsideVersion) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideVersionNew, error)
		DeleteSoft(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]InsideVersionNew, error)
	}

	defaultInsideVersionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InsideVersion struct {
		Id          int64  `db:"id"`
		ProjectId   int64  `db:"project_id"`   // 项目id
		ClusterId   int64  `db:"cluster_id"`   // 集群id
		VersionName string `db:"version_name"` // 版本名称
		VersionData string `db:"version_data"` // 版本数据
		VersionConf string `db:"version_conf"` // 版本配置
		VersionType string `db:"version_type"` // 版本类型 1：svn 2：git
		BuildType   string `db:"build_type"`
		SourceDb    string `db:"source_db"` // 数据库信息
		Sort        int64  `db:"sort"`      // 排序
		DelFlag     int64  `db:"del_flag"`  // 0：使用中 1：已删除
	}
	InsideVersionNew struct {
		Id          int64  `db:"id"`
		ProjectId   int64  `db:"project_id"`   // 项目id
		ClusterId   int64  `db:"cluster_id"`   // 集群id
		VersionName string `db:"version_name"` // 版本名称
		VersionData string `db:"version_data"` // 版本数据
		VersionConf string `db:"version_conf"` // 版本配置
		VersionType string `db:"version_type"` // 版本类型 1：svn 2：git
		BuildType   string `db:"build_type"`
		SourceDb    string `db:"source_db"`  // 数据库信息
		Sort        int64  `db:"sort"`       // 排序
		DelFlag     int64  `db:"del_flag"`   // 0：使用中 1：已删除
		ProjectCn   string `db:"project_cn"` // 项目id
		ClusterCn   string `db:"cluster_cn"` // 集群id
	}
)

func newInsideVersionModel(conn sqlx.SqlConn) *defaultInsideVersionModel {
	return &defaultInsideVersionModel{
		conn:  conn,
		table: "`inside_version`",
	}
}

var versionCommonSQL = `
SELECT
	%s
FROM
		(
	SELECT
		inside_version.*,
		project.project_cn,
		label.label_name as cluster_cn
	FROM
		inside_version
		LEFT JOIN project ON inside_version.project_id = project.project_id
		LEFT JOIN label ON label.label_id = inside_version.cluster_id 
	WHERE
		project.del_flag = 0 
		AND inside_version.del_flag = 0 
		AND label.del_flag = 0 
	) A 
WHERE
	1 = 1 
%s
ORDER BY sort,project_id
%s
`

func (m *defaultInsideVersionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInsideVersionModel) FindOne(ctx context.Context, id int64) (*InsideVersion, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", insideVersionRows, m.table)
	var resp InsideVersion
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInsideVersionModel) Insert(ctx context.Context, data *InsideVersion) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?,?, ?, ?)", m.table, insideVersionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.ClusterId, data.VersionName, data.VersionData, data.VersionConf, data.VersionType, data.BuildType, data.SourceDb, data.Sort)
	return ret, err
}

func (m *defaultInsideVersionModel) Update(ctx context.Context, data *InsideVersion) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, insideVersionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.ClusterId, data.VersionName, data.VersionData, data.VersionConf, data.VersionType, data.BuildType, data.SourceDb, data.Sort, data.Id)
	return err
}

func (m *defaultInsideVersionModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultInsideVersionModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideVersionNew, error) {

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(versionCommonSQL, "*", condition, "limit ? offset ?")

	var resp []InsideVersionNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultInsideVersionModel) FindAll(ctx context.Context, filters ...interface{}) (*[]InsideVersionNew, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(versionCommonSQL, "*", condition, "")
	var resp []InsideVersionNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultInsideVersionModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf(versionCommonSQL, "count(*)", condition, "")
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultInsideVersionModel) DeleteSoft(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, id)
	return err
}
