// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	insideInstallPlanFieldNames          = builder.RawFieldNames(&InsideInstallPlan{})
	insideInstallPlanRows                = strings.Join(insideInstallPlanFieldNames, ",")
	insideInstallPlanRowsExpectAutoSet   = strings.Join(stringx.Remove(insideInstallPlanFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), ",")
	insideInstallPlanRowsWithPlaceHolder = strings.Join(stringx.Remove(insideInstallPlanFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), "=?,") + "=?"
)

type (
	insideInstallPlanModel interface {
		Insert(ctx context.Context, data *InsideInstallPlan) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InsideInstallPlan, error)
		Update(ctx context.Context, data *InsideInstallPlan) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideInstallPlanNew, error)
		DeleteSoft(ctx context.Context, id int64) error
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]InsideInstallPlanNew, error)
	}

	defaultInsideInstallPlanModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InsideInstallPlan struct {
		Id            int64  `db:"id"`
		ProjectId     int64  `db:"project_id"`     // 项目id
		ClusterId     int64  `db:"cluster_id"`     // 集群id
		FeatureType   string `db:"feature_type"`   // 功能服id
		Sid           int64  `db:"sid"`            // 服id
		ServerTitle   string `db:"server_title"`   // 游戏服中文名
		InstallStatus string `db:"install_status"` // 1：未安装 2：已安装
		DelFlag       int64  `db:"del_flag"`       // 0：使用中 1：已删除
	}

	InsideInstallPlanNew struct {
		Id            int64  `db:"id"`
		ProjectId     int64  `db:"project_id"`     // 项目id
		ClusterId     int64  `db:"cluster_id"`     // 集群id
		FeatureType   string `db:"feature_type"`   // 功能服id
		Sid           int64  `db:"sid"`            // 服id
		ServerTitle   string `db:"server_title"`   // 游戏服中文名
		InstallStatus string `db:"install_status"` // 1：未安装 2：已安装
		DelFlag       int64  `db:"del_flag"`       // 0：使用中 1：已删除
		ProjectCn     string `db:"project_cn"`
		ClusterCn     string `db:"cluster_cn"`
	}
)

var installPlanCommonSQL = `
SELECT
	%s
FROM
	(
	SELECT
		inside_install_plan.*,
		project.project_cn,
		label.label_name AS cluster_cn 
	FROM
		inside_install_plan
		LEFT JOIN project ON project.project_id = inside_install_plan.project_id
		LEFT JOIN label ON label.label_id = inside_install_plan.cluster_id 
	WHERE
		project.del_flag = 0 
		AND label.del_flag = 0 
		AND inside_install_plan.del_flag = 0 
	) A
	where 1=1
	%s
	ORDER BY install_status,project_id
	%s
`

func newInsideInstallPlanModel(conn sqlx.SqlConn) *defaultInsideInstallPlanModel {
	return &defaultInsideInstallPlanModel{
		conn:  conn,
		table: "`inside_install_plan`",
	}
}

func (m *defaultInsideInstallPlanModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInsideInstallPlanModel) FindOne(ctx context.Context, id int64) (*InsideInstallPlan, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", insideInstallPlanRows, m.table)
	var resp InsideInstallPlan
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInsideInstallPlanModel) Insert(ctx context.Context, data *InsideInstallPlan) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, insideInstallPlanRowsExpectAutoSet)
	data.InstallStatus = "-1"
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.ClusterId, data.FeatureType, data.Sid, data.ServerTitle, data.InstallStatus)
	return ret, err
}

func (m *defaultInsideInstallPlanModel) Update(ctx context.Context, data *InsideInstallPlan) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, insideInstallPlanRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.ClusterId, data.FeatureType, data.Sid, data.ServerTitle, data.InstallStatus, data.Id)
	return err
}

func (m *defaultInsideInstallPlanModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultInsideInstallPlanModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideInstallPlanNew, error) {

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(installPlanCommonSQL, "*", condition, "limit ? offset ?")

	var resp []InsideInstallPlanNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultInsideInstallPlanModel) FindAll(ctx context.Context, filters ...interface{}) (*[]InsideInstallPlanNew, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(installPlanCommonSQL, "*", condition, "")
	var resp []InsideInstallPlanNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultInsideInstallPlanModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf(installPlanCommonSQL, "count(*)", condition, "")
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultInsideInstallPlanModel) DeleteSoft(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, id)
	return err
}
