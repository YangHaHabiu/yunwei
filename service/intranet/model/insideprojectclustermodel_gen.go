// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	insideProjectClusterFieldNames          = builder.RawFieldNames(&InsideProjectCluster{})
	insideProjectClusterRows                = strings.Join(insideProjectClusterFieldNames, ",")
	insideProjectClusterRowsExpectAutoSet   = strings.Join(stringx.Remove(insideProjectClusterFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	insideProjectClusterRowsWithPlaceHolder = strings.Join(stringx.Remove(insideProjectClusterFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	insideProjectClusterModel interface {
		Insert(ctx context.Context, data *InsideProjectCluster) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InsideProjectCluster, error)
		Update(ctx context.Context, data *InsideProjectCluster) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideProjectClusterNew, error)
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]InsideProjectClusterNew, error)
	}

	defaultInsideProjectClusterModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InsideProjectCluster struct {
		Id        int64 `db:"id"`
		ProjectId int64 `db:"project_id"`
		ClusterId int64 `db:"cluster_id"`
	}
	InsideProjectClusterNew struct {
		Id        int64  `db:"id"`
		ProjectId int64  `db:"project_id"`
		ProjectCn string `db:"project_cn"`
		ClusterId int64  `db:"cluster_id"`
		ClusterCn string `db:"cluster_cn"`
	}
)

var commonSQL = `SELECT %s FROM (
SELECT
	inside_project_cluster.*,
	project.project_cn,
	label.label_name AS cluster_cn 
FROM
	inside_project_cluster
	LEFT JOIN project ON project.project_id = inside_project_cluster.project_id
	LEFT JOIN label ON label.label_id = inside_project_cluster.cluster_id 
WHERE
	label.label_type = 1 
	AND project.del_flag =0
) A
WHERE 1=1
%s
order by project_id
`

func newInsideProjectClusterModel(conn sqlx.SqlConn) *defaultInsideProjectClusterModel {
	return &defaultInsideProjectClusterModel{
		conn:  conn,
		table: "`inside_project_cluster`",
	}
}

func (m *defaultInsideProjectClusterModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInsideProjectClusterModel) FindOne(ctx context.Context, id int64) (*InsideProjectCluster, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", insideProjectClusterRows, m.table)
	var resp InsideProjectCluster
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInsideProjectClusterModel) Insert(ctx context.Context, data *InsideProjectCluster) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, insideProjectClusterRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.ClusterId)
	return ret, err
}

func (m *defaultInsideProjectClusterModel) Update(ctx context.Context, data *InsideProjectCluster) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, insideProjectClusterRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.ClusterId, data.Id)
	return err
}

func (m *defaultInsideProjectClusterModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultInsideProjectClusterModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideProjectClusterNew, error) {
	query := commonSQL + "limit ? offset ?"
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, "*", condition)
	var resp []InsideProjectClusterNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultInsideProjectClusterModel) FindAll(ctx context.Context, filters ...interface{}) (*[]InsideProjectClusterNew, error) {

	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(commonSQL, "*", condition)
	var resp []InsideProjectClusterNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultInsideProjectClusterModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf(commonSQL, "count(*)", condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}
