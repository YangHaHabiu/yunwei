// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/pkg/errors"
	"strings"
	"ywadmin-v3/common/globalkey"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	insideHostInfoFieldNames          = builder.RawFieldNames(&InsideHostInfo{})
	insideHostInfoRows                = strings.Join(insideHostInfoFieldNames, ",")
	insideHostInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(insideHostInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), ",")
	insideHostInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(insideHostInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), "=?,") + "=?"
)

type (
	insideHostInfoModel interface {
		Insert(ctx context.Context, data *InsideHostInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InsideHostInfo, error)
		Update(ctx context.Context, data *InsideHostInfo) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideHostInfo, error)
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]InsideHostInfo, error)
		DeleteSoft(ctx context.Context, id int64) error
	}

	defaultInsideHostInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InsideHostInfo struct {
		Id             int64  `db:"id"`
		HostName       string `db:"host_name"`
		HostIp         string `db:"host_ip"`
		HostPort       int64  `db:"host_port"`
		HostScriptPath string `db:"host_script_path"`
		DbUser         string `db:"db_user"`
		DbPass         string `db:"db_pass"`
		DbPort         int64  `db:"db_port"`
		DelFlag        int64  `db:"del_flag"` // 0：使用中 1：已删除
	}
)

func newInsideHostInfoModel(conn sqlx.SqlConn) *defaultInsideHostInfoModel {
	return &defaultInsideHostInfoModel{
		conn:  conn,
		table: "`inside_host_info`",
	}
}

func (m *defaultInsideHostInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInsideHostInfoModel) FindOne(ctx context.Context, id int64) (*InsideHostInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_flag=0 limit 1", insideHostInfoRows, m.table)
	var resp InsideHostInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInsideHostInfoModel) Insert(ctx context.Context, data *InsideHostInfo) (sql.Result, error) {
	all, err := m.FindAll(ctx, "host_ip__=", data.HostIp)
	if len(*all) != 0 {
		return nil, errors.New("存在相同的ip")
	}
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?,?)", m.table, insideHostInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.HostName, data.HostIp, data.HostPort, data.HostScriptPath, data.DbUser, data.DbPass, data.DbPort)
	return ret, err
}

func (m *defaultInsideHostInfoModel) Update(ctx context.Context, data *InsideHostInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, insideHostInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.HostName, data.HostIp, data.HostPort, data.HostScriptPath, data.DbUser, data.DbPass, data.DbPort, data.Id)
	return err
}

func (m *defaultInsideHostInfoModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultInsideHostInfoModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideHostInfo, error) {
	query := `SELECT * from %s where del_flag = %d
%s
limit ? offset ?
`
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.table, globalkey.DelStateNo, condition)

	var resp []InsideHostInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultInsideHostInfoModel) FindAll(ctx context.Context, filters ...interface{}) (*[]InsideHostInfo, error) {
	query := "select * from %s where del_flag = %d %s"
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query = fmt.Sprintf(query, m.table, globalkey.DelStateNo, condition)
	var resp []InsideHostInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultInsideHostInfoModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select count(*) as count from %s where del_flag = %d %s", m.table, globalkey.DelStateNo, condition)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

//软删除
func (m *defaultInsideHostInfoModel) DeleteSoft(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set `del_flag`=? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, globalkey.DelStateYes, id)
	return err
}
