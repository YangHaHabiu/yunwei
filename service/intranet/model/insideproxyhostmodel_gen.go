// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	insideProxyHostFieldNames          = builder.RawFieldNames(&InsideProxyHost{})
	insideProxyHostRows                = strings.Join(insideProxyHostFieldNames, ",")
	insideProxyHostRowsExpectAutoSet   = strings.Join(stringx.Remove(insideProxyHostFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), ",")
	insideProxyHostRowsWithPlaceHolder = strings.Join(stringx.Remove(insideProxyHostFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`del_flag`"), "=?,") + "=?"
)

type (
	insideProxyHostModel interface {
		Insert(ctx context.Context, data *InsideProxyHost) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InsideProxyHostNew, error)
		Update(ctx context.Context, data *InsideProxyHost) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideProxyHostNew, error)
		Count(ctx context.Context, filters ...interface{}) (int64, error)
		FindAll(ctx context.Context, filters ...interface{}) (*[]InsideProxyHostNew, error)
	}

	defaultInsideProxyHostModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InsideProxyHost struct {
		Id        int64 `db:"id"`
		ProjectId int64 `db:"project_id"` // 项目
		HostId    int64 `db:"host_id"`    // 主机端口
	}
	InsideProxyHostNew struct {
		Id             int64  `db:"id"`
		ProjectId      int64  `db:"project_id"` // 项目
		HostName       string `db:"host_name"`  // 主机ip
		HostId         int64  `db:"host_id"`    // 主机ip
		HostIp         string `db:"host_ip"`    // 主机ip
		HostPort       int64  `db:"host_port"`  // 主机端口
		HostScriptPath string `db:"host_script_path"`
		DbUser         string `db:"db_user"`    // 数据库用户
		DbPass         string `db:"db_pass"`    // 数据库密码
		DbPort         int64  `db:"db_port"`    // 数据库端口
		DelFlag        int64  `db:"del_flag"`   // 删除标记
		ProjectCn      string `db:"project_cn"` // 项目
	}
)

func newInsideProxyHostModel(conn sqlx.SqlConn) *defaultInsideProxyHostModel {
	return &defaultInsideProxyHostModel{
		conn:  conn,
		table: "`inside_proxy_host`",
	}
}

var hostCommonSQL = `SELECT
	%s 
FROM
	(
	SELECT
		inside_proxy_host.id,
		inside_proxy_host.host_id,
		project.project_id,
		project.project_cn,
		inside_host_info.host_ip,
		inside_host_info.host_name,
		inside_host_info.host_port,
		inside_host_info.host_script_path,
		inside_host_info.db_user,
		inside_host_info.db_pass,
		inside_host_info.db_port,
		inside_host_info.del_flag
	FROM
		inside_proxy_host
		LEFT JOIN project ON project.project_id = inside_proxy_host.project_id
		LEFT JOIN inside_host_info ON inside_proxy_host.host_id = inside_host_info.id 
	WHERE
		project.del_flag = 0 
		AND inside_host_info.del_flag = 0 
	) A 
WHERE
	1 = 1 
%s
ORDER BY project_id
%s

`

func (m *defaultInsideProxyHostModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInsideProxyHostModel) FindOne(ctx context.Context, id int64) (*InsideProxyHostNew, error) {
	query := fmt.Sprintf(hostCommonSQL, "*", " and `id` = ?", "limit 1")
	var resp InsideProxyHostNew
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInsideProxyHostModel) Insert(ctx context.Context, data *InsideProxyHost) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, insideProxyHostRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.HostId)
	return ret, err
}

func (m *defaultInsideProxyHostModel) Update(ctx context.Context, data *InsideProxyHost) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, insideProxyHostRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProjectId, data.HostId, data.Id)
	return err
}

func (m *defaultInsideProxyHostModel) tableName() string {
	return m.table
}

//分页条件查询
func (m *defaultInsideProxyHostModel) FindPageListByPage(ctx context.Context, page, pageSize int64, filters ...interface{}) (*[]InsideProxyHostNew, error) {

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(hostCommonSQL, "*", condition, "limit ? offset ?")

	var resp []InsideProxyHostNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query, pageSize, offset)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件查询所有
func (m *defaultInsideProxyHostModel) FindAll(ctx context.Context, filters ...interface{}) (*[]InsideProxyHostNew, error) {
	var condition string
	filter := xfilters.Xfilters(filters...)
	if len(filter) != 0 {
		condition = " and " + filter
	}
	query := fmt.Sprintf(hostCommonSQL, "*", condition, "")
	var resp []InsideProxyHostNew
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//条件统计
func (m *defaultInsideProxyHostModel) Count(ctx context.Context, filters ...interface{}) (int64, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " and " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf(hostCommonSQL, "count(*)", condition, "")
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}
