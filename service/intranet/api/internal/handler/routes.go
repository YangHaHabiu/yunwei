// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	insideHostInfo "ywadmin-v3/service/intranet/api/internal/handler/insideHostInfo"
	insideInstallPlan "ywadmin-v3/service/intranet/api/internal/handler/insideInstallPlan"
	insideOperation "ywadmin-v3/service/intranet/api/internal/handler/insideOperation"
	insideProjectCluster "ywadmin-v3/service/intranet/api/internal/handler/insideProjectCluster"
	insideProxyHost "ywadmin-v3/service/intranet/api/internal/handler/insideProxyHost"
	insideServer "ywadmin-v3/service/intranet/api/internal/handler/insideServer"
	insideTasks "ywadmin-v3/service/intranet/api/internal/handler/insideTasks"
	insideTasksLogs "ywadmin-v3/service/intranet/api/internal/handler/insideTasksLogs"
	insideVersion "ywadmin-v3/service/intranet/api/internal/handler/insideVersion"
	"ywadmin-v3/service/intranet/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: insideInstallPlan.InsideInstallPlanAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: insideInstallPlan.InsideInstallPlanListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: insideInstallPlan.InsideInstallPlanUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:InsideInstallPlanId",
				Handler: insideInstallPlan.InsideInstallPlanDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:InsideInstallPlanId",
				Handler: insideInstallPlan.InsideInstallPlanGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/intranet/insideInstallPlan"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: insideOperation.InsideOperationAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: insideOperation.InsideOperationListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: insideOperation.InsideOperationUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:InsideOperationId",
				Handler: insideOperation.InsideOperationDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:InsideOperationId",
				Handler: insideOperation.InsideOperationGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/intranet/insideOperation"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: insideProjectCluster.InsideProjectClusterAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: insideProjectCluster.InsideProjectClusterListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: insideProjectCluster.InsideProjectClusterUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:InsideProjectClusterId",
				Handler: insideProjectCluster.InsideProjectClusterDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:InsideProjectClusterId",
				Handler: insideProjectCluster.InsideProjectClusterGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/intranet/insideProjectCluster"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: insideProxyHost.InsideProxyHostAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: insideProxyHost.InsideProxyHostListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: insideProxyHost.InsideProxyHostUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:InsideProxyHostId",
				Handler: insideProxyHost.InsideProxyHostDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:InsideProxyHostId",
				Handler: insideProxyHost.InsideProxyHostGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/intranet/insideProxyHost"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: insideServer.InsideServerAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: insideServer.InsideServerListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: insideServer.InsideServerUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:InsideServerId",
				Handler: insideServer.InsideServerDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:InsideServerId",
				Handler: insideServer.InsideServerGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/intranet/insideServer"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: insideTasks.InsideTasksAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: insideTasks.InsideTasksListHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:InsideTasksId",
				Handler: insideTasks.InsideTasksDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:InsideTasksId",
				Handler: insideTasks.InsideTasksGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/operationInsideTasks",
				Handler: insideTasks.InsideTasksOperationHandler(serverCtx),
			},
		},
		rest.WithPrefix("/intranet/insideTasks"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: insideTasksLogs.InsideTasksLogsAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: insideTasksLogs.InsideTasksLogsListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: insideTasksLogs.InsideTasksLogsUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:InsideTasksLogsId",
				Handler: insideTasksLogs.InsideTasksLogsDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:InsideTasksLogsId",
				Handler: insideTasksLogs.InsideTasksLogsGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/intranet/insideTasksLogs"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: insideVersion.InsideVersionAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: insideVersion.InsideVersionListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: insideVersion.InsideVersionUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:InsideVersionId",
				Handler: insideVersion.InsideVersionDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:InsideVersionId",
				Handler: insideVersion.InsideVersionGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getVersionInfo",
				Handler: insideVersion.GetVersionInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/intranet/insideVersion"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: insideHostInfo.InsideHostInfoAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: insideHostInfo.InsideHostInfoListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: insideHostInfo.InsideHostInfoUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:InsideHostInfoId",
				Handler: insideHostInfo.InsideHostInfoDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/:InsideHostInfoId",
				Handler: insideHostInfo.InsideHostInfoGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/intranet/insideHostInfo"),
	)
}
