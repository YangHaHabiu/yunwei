// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	qqLoadBalanceFieldNames          = builder.RawFieldNames(&QqLoadBalance{})
	qqLoadBalanceRows                = strings.Join(qqLoadBalanceFieldNames, ",")
	qqLoadBalanceRowsExpectAutoSet   = strings.Join(stringx.Remove(qqLoadBalanceFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	qqLoadBalanceRowsWithPlaceHolder = strings.Join(stringx.Remove(qqLoadBalanceFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	qqLoadBalanceModel interface {
		Insert(ctx context.Context, data *QqLoadBalance) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*QqLoadBalance, error)
		Update(ctx context.Context, data *QqLoadBalance) error
		Delete(ctx context.Context, id int64) error
		FindAll(filters ...interface{}) (*[]QqLoadBalance, error)
		FindMasterByFilters(filters ...interface{}) (*[]QqLoadBalance, error)
		UpdateIsMaster(groupType string, qq, isMaster int64) error
	}

	defaultQqLoadBalanceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	QqLoadBalance struct {
		Id        int64  `db:"id"`
		Qq        int64  `db:"qq"`        // qq
		QqApi     string `db:"qq_api"`    // qqapi地址
		IsMaster  int64  `db:"is_master"` // 是否为主q 0：未激活 1： 激活
		GroupType string `db:"group_type"`
	}
)

func newQqLoadBalanceModel(conn sqlx.SqlConn) *defaultQqLoadBalanceModel {
	return &defaultQqLoadBalanceModel{
		conn:  conn,
		table: "`qq_load_balance`",
	}
}

func (m *defaultQqLoadBalanceModel) Insert(ctx context.Context, data *QqLoadBalance) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, qqLoadBalanceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.QqApi, data.IsMaster)
	return ret, err
}

func (m *defaultQqLoadBalanceModel) FindOne(ctx context.Context, id int64) (*QqLoadBalance, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", qqLoadBalanceRows, m.table)
	var resp QqLoadBalance
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultQqLoadBalanceModel) FindMasterByFilters(filters ...interface{}) (*[]QqLoadBalance, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select %s from %s %s", qqLoadBalanceRows, m.table, condition)
	var resp []QqLoadBalance
	err := m.conn.QueryRows(&resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQqLoadBalanceModel) UpdateIsMaster(groupType string, qq, isMaster int64) error {
	if groupType != "" {
		groupType = "and group_type = '" + groupType + "'"
	}
	query := fmt.Sprintf("update %s set is_master = %d where `qq` = '%d' %s", m.table, isMaster, qq, groupType)
	_, err := m.conn.Exec(query)
	return err
}

func (m *defaultQqLoadBalanceModel) FindAll(filters ...interface{}) (*[]QqLoadBalance, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select %s from %s %s", qqLoadBalanceRows, m.table, condition)
	var resp []QqLoadBalance
	err := m.conn.QueryRows(&resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQqLoadBalanceModel) Update(ctx context.Context, data *QqLoadBalance) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, qqLoadBalanceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.QqApi, data.IsMaster, data.Id)
	return err
}

func (m *defaultQqLoadBalanceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultQqLoadBalanceModel) tableName() string {
	return m.table
}
