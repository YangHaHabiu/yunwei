// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"
	"ywadmin-v3/common/xfilters"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	qqMessageHistoryFieldNames          = builder.RawFieldNames(&QqMessageHistory{})
	qqMessageHistoryRows                = strings.Join(qqMessageHistoryFieldNames, ",")
	qqMessageHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(qqMessageHistoryFieldNames, "`id`", "`update_time`"), ",")
	qqMessageHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(qqMessageHistoryFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	qqMessageHistoryModel interface {
		Insert(data *QqMessageHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*QqMessageHistory, error)
		Update(ctx context.Context, data *QqMessageHistory) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context) (*[]QqMessageHistory, error)
		FindMasterByFilters(filters ...interface{}) (*[]QqMessageHistory, error)
		UpdateExecuted(msgId string) error
		FindOneByMsgId(msgId,newMsgId string) (*QqMessageHistory, error)
		DeleteMessageHistory(times int) (err error)
		FindOneBySeqId(userId,seq,rand int64) (*QqMessageHistory, error)
	}

	defaultQqMessageHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	QqMessageHistory struct {
		Id         int64          `db:"id"`
		MessageId  sql.NullString `db:"message_id"`  // 消息id
		UserId     int64          `db:"user_id"`     // 用户id
		Content    string         `db:"content"`     // 消息内容
		CreateTime int64          `db:"create_time"` // 创建时间
		Executed   int64          `db:"executed"`    // 执行
		GroupType  string         `db:"group_type"`  // 群组类型
		GroupId    sql.NullInt64  `db:"group_id"`    // 群id
		SelfId     int64          `db:"self_id"`     // 发送id
		DiscussId  sql.NullInt64  `db:"discuss_id"`  // 发送id
	}

	// 解析前端json
	OperationList struct {
		OperationListForm []TaskCommonJson `json:"operationListForm"`
	}

	// 解析统一结构-对应下面内容
	TaskCommonJson struct {
		Id             int64  `json:"id,omitempty"`
		Operation      string `json:"operation,omitempty"`
		Stable         string `json:"stable,omitempty"`
		OuterIp        string `json:"outerIp,omitempty"`
		DbUpdate       string `json:"dbUpdate,omitempty"`
		FileList       string `json:"fileList,omitempty"`
		MaintainRange  string `json:"maintainRange,omitempty"`
		CmdList        string `json:"cmdList,omitempty"`
		DbType         string `json:"dbType,omitempty"`
		SQLCmd         string `json:"SQLCmd,omitempty"`
		Merge          string `json:"merge,omitempty"`
		ExportFileName string `json:"exportFileName,omitempty"`
		PlatName       string `json:"platName,omitempty"`
		CheckSt        string `json:"checkSt,omitempty"`
		//OperationCn    string   `json:"operationCn,omitempty"`
		InitSetTime    string `json:"initSetTime,omitempty"`
		ExecuteSQL     string `json:"executeSQL,omitempty"`
		ExecuteFlag    string `json:"executeFlag,omitempty"`
		AddRestartGame string `json:"addRestartGame,omitempty"`
	}
)

func newQqMessageHistoryModel(conn sqlx.SqlConn) *defaultQqMessageHistoryModel {
	return &defaultQqMessageHistoryModel{
		conn:  conn,
		table: "`qq_message_history`",
	}
}

func (m *defaultQqMessageHistoryModel) Insert(data *QqMessageHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?,?,?,?)", m.table, qqMessageHistoryRowsExpectAutoSet)
	ret, err := m.conn.Exec(query, data.MessageId.String, data.UserId, data.Content, data.CreateTime, data.Executed, data.GroupType, data.GroupId.Int64, data.SelfId, data.DiscussId.Int64)
	return ret, err
}

func (m *defaultQqMessageHistoryModel) FindOne(ctx context.Context, id int64) (*QqMessageHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", qqMessageHistoryRows, m.table)
	var resp QqMessageHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultQqMessageHistoryModel) FindOneByMsgId(msgId,newMsgId string) (*QqMessageHistory, error) {
	query := fmt.Sprintf("SELECT id,message_id,user_id,executed,create_time,group_type,group_id,self_id,discuss_id,replace(replace(content,char(13),'\\n'),char(10),'\\n') content   FROM %s WHERE  (  BINARY message_id = ? or  BINARY message_id = ?)", m.table)
	var resp QqMessageHistory
	err := m.conn.QueryRow(&resp, query, msgId,newMsgId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultQqMessageHistoryModel) FindOneBySeqId(userId,seq,rand int64) (*QqMessageHistory, error) {

	query := fmt.Sprintf("SELECT id,message_id,user_id,executed,create_time,group_type,group_id,self_id,discuss_id,replace(replace(content,char(13),'\\n'),char(10),'\\n') content,seq,rand,time  FROM %s WHERE user_id = ? and seq = ? and rand = ?", m.table)
	var resp QqMessageHistory
	err := m.conn.QueryRow(&resp, query, userId,seq,rand)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQqMessageHistoryModel) FindAll(ctx context.Context) (*[]QqMessageHistory, error) {

	query := fmt.Sprintf("select %s from %s ", qqMessageHistoryRows, m.table)
	var resp []QqMessageHistory
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQqMessageHistoryModel) Update(ctx context.Context, data *QqMessageHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, qqMessageHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MessageId, data.UserId, data.Content, data.Executed, data.GroupType, data.GroupId, data.Id)
	return err
}

func (m *defaultQqMessageHistoryModel) UpdateExecuted(msgId string) error {
	query := fmt.Sprintf("update %s set %s where `message_id` = ?", m.table, "executed = 1")
	_, err := m.conn.Exec(query, msgId)
	return err
}

func (m *defaultQqMessageHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultQqMessageHistoryModel) tableName() string {
	return m.table
}

func (m *defaultQqMessageHistoryModel) FindMasterByFilters(filters ...interface{}) (*[]QqMessageHistory, error) {
	var condition string
	if len(xfilters.Xfilters(filters...)) != 0 {
		condition = " where " + xfilters.Xfilters(filters...)
	}
	query := fmt.Sprintf("select %s from %s %s", qqMessageHistoryRows, m.table, condition)
	var resp []QqMessageHistory
	err := m.conn.QueryRows(&resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//删除一个月前的旧的qq记录
func (m *defaultQqMessageHistoryModel) DeleteMessageHistory(times int) (err error) {
	now := time.Now().Format("20060102")
	location, _ := time.ParseInLocation("20060102", now, time.Local)
	date := location.AddDate(0, 0, -times)
	query := fmt.Sprintf("delete from %s where `create_time` < ?", m.table)
	_, err = m.conn.Exec(query, date.Unix())
	if err != nil {
		return err
	}
	return nil
}
